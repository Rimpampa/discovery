
registers:	file format elf32-littlearm


Disassembly of section .text:

08000194 <Reset>:
; pub unsafe extern "C" fn Reset() -> ! {
 8000194:      	push	{r7, lr}
 8000196:      	mov	r7, sp
;     __pre_init();
 8000198:      	bl	#0x143a
 800019c:      	b	#-0x2 <Reset+0xa>
;     r0::zero_bss(&mut __sbss, &mut __ebss);
 800019e:      	movw	r0, #0x0
 80001a2:      	movt	r0, #0x2000
 80001a6:      	movw	r1, #0x4
 80001aa:      	movt	r1, #0x2000
 80001ae:      	bl	#0x14fc
 80001b2:      	b	#-0x2 <Reset+0x20>
;     r0::init_data(&mut __sdata, &mut __edata, &__sidata);
 80001b4:      	movw	r0, #0x0
 80001b8:      	movt	r0, #0x2000
 80001bc:      	movw	r1, #0x0
 80001c0:      	movt	r1, #0x2000
 80001c4:      	movw	r2, #0x3b74
 80001c8:      	movt	r2, #0x800
 80001cc:      	bl	#0x1528
 80001d0:      	b	#-0x2 <Reset+0x3e>
 80001d2:      	movw	r0, #0xed88
 80001d6:      	movt	r0, #0xe000
;                 *SCB_CPACR | SCB_CPACR_FPU_ENABLE | SCB_CPACR_FPU_USER,
 80001da:      	ldr	r1, [r0]
 80001dc:      	orr	r1, r1, #0xf00000
;             core::ptr::write_volatile(
 80001e0:      	bl	#0x13f4
 80001e4:      	b	#-0x2 <Reset+0x52>
;             trampoline()
 80001e6:      	bl	#0x13c8
 80001ea:      	trap

080001ec <main>:
; #[entry]
 80001ec:      	push	{r7, lr}
 80001ee:      	mov	r7, sp
 80001f0:      	bl	#0x2
 80001f4:      	trap

080001f6 <registers::__cortex_m_rt_main::h88b085069101a6da>:
; fn main() -> ! {
 80001f6:      	push	{r7, lr}
 80001f8:      	mov	r7, sp
;     aux7::init();
 80001fa:      	bl	#0x4e
 80001fe:      	b	#-0x2 <registers::__cortex_m_rt_main::h88b085069101a6da+0xa>
 8000200:      	movw	r0, #0x1018
 8000204:      	movt	r0, #0x4800
 8000208:      	mov.w	r1, #0x200
;         ptr::write_volatile(GPIOE_BSRR as *mut u32, 1 << 9);
 800020c:      	bl	#0x15e0
 8000210:      	b	#-0x2 <registers::__cortex_m_rt_main::h88b085069101a6da+0x1c>
 8000212:      	movw	r0, #0x1018
 8000216:      	movt	r0, #0x4800
 800021a:      	mov.w	r1, #0x800
;         ptr::write_volatile(GPIOE_BSRR as *mut u32, 1 << 11);
 800021e:      	bl	#0x15ce
 8000222:      	b	#-0x2 <registers::__cortex_m_rt_main::h88b085069101a6da+0x2e>
 8000224:      	movw	r0, #0x1018
 8000228:      	movt	r0, #0x4800
 800022c:      	mov.w	r1, #0x2000000
;         ptr::write_volatile(GPIOE_BSRR as *mut u32, 1 << (9 + 16));
 8000230:      	bl	#0x15bc
 8000234:      	b	#-0x2 <registers::__cortex_m_rt_main::h88b085069101a6da+0x40>
 8000236:      	movw	r0, #0x1018
 800023a:      	movt	r0, #0x4800
 800023e:      	mov.w	r1, #0x8000000
;         ptr::write_volatile(GPIOE_BSRR as *mut u32, 1 << (11 + 16));
 8000242:      	bl	#0x15aa
 8000246:      	b	#-0x2 <registers::__cortex_m_rt_main::h88b085069101a6da+0x52>
;     loop {}
 8000248:      	b	#-0x2 <registers::__cortex_m_rt_main::h88b085069101a6da+0x54>
 800024a:      	b	#-0x4 <registers::__cortex_m_rt_main::h88b085069101a6da+0x54>

0800024c <aux7::init::ha7dd4ea2f22186bd>:
; pub fn init() -> (ITM, &'static RegisterBlock) {
 800024c:      	push	{r7, lr}
 800024e:      	mov	r7, sp
 8000250:      	sub	sp, #0x58
;     let device_periphs = stm32::Peripherals::take().unwrap();
 8000252:      	bl	#0x210
 8000256:      	str	r0, [sp, #0x8]
 8000258:      	b	#-0x2 <aux7::init::ha7dd4ea2f22186bd+0xe>
 800025a:      	ldr	r0, [sp, #0x8]
 800025c:      	and	r0, r0, #0x1
 8000260:      	movw	r1, #0x354c
 8000264:      	movt	r1, #0x800
 8000268:      	bl	#0x24c
 800026c:      	b	#-0x2 <aux7::init::ha7dd4ea2f22186bd+0x22>
 800026e:      	add	r0, sp, #0x10
;     let mut reset_and_clock_control = device_periphs.RCC.constrain();
 8000270:      	bl	#0x10b2
 8000274:      	b	#-0x2 <aux7::init::ha7dd4ea2f22186bd+0x2a>
 8000276:      	add	r0, sp, #0x10
;     let mut gpioe = device_periphs.GPIOE.split(&mut reset_and_clock_control.ahb);
 8000278:      	bl	#0x10d2
 800027c:      	b	#-0x2 <aux7::init::ha7dd4ea2f22186bd+0x32>
 800027e:      	add	r1, sp, #0x3c
;     let _leds = Leds::new(
 8000280:      	mov	r0, r1
 8000282:      	bl	#0x3c
 8000286:      	str	r1, [sp, #0x54]
 8000288:      	str	r0, [sp, #0x50]
 800028a:      	ldr	r0, [sp, #0x50]
 800028c:      	ldr	r1, [sp, #0x54]
 800028e:      	str	r1, [sp, #0x44]
 8000290:      	str	r0, [sp, #0x40]
 8000292:      	b	#-0x2 <aux7::init::ha7dd4ea2f22186bd+0x48>
;     let core_periphs = cortex_m::Peripherals::take().unwrap();
 8000294:      	bl	#0x280
 8000298:      	str	r0, [sp, #0x4]
 800029a:      	b	#-0x2 <aux7::init::ha7dd4ea2f22186bd+0x50>
 800029c:      	ldr	r0, [sp, #0x4]
 800029e:      	and	r0, r0, #0x1
 80002a2:      	movw	r1, #0x355c
 80002a6:      	movt	r1, #0x800
 80002aa:      	bl	#0x23a
 80002ae:      	b	#-0x2 <aux7::init::ha7dd4ea2f22186bd+0x64>
;     (core_periphs.ITM, unsafe { &*stm32f303::GPIOE::ptr() })
 80002b0:      	b	#-0x2 <aux7::init::ha7dd4ea2f22186bd+0x66>
 80002b2:      	movw	r0, #0x1000
 80002b6:      	movt	r0, #0x4800
;     (core_periphs.ITM, unsafe { &*stm32f303::GPIOE::ptr() })
 80002ba:      	str	r0, [sp, #0xc]
; }
 80002bc:      	ldr	r0, [sp, #0xc]
 80002be:      	add	sp, #0x58
 80002c0:      	pop	{r7, pc}

080002c2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90>:
;     pub fn new<PE8Mode, PE9Mode, PE10Mode, PE11Mode, PE12Mode, PE13Mode, PE14Mode, PE15Mode>(
 80002c2:      	push	{r4, r5, r7, lr}
 80002c4:      	add	r7, sp, #0x8
 80002c6:      	sub	sp, #0x78
 80002c8:      	str	r1, [sp, #0x40]
 80002ca:      	str	r0, [sp, #0x44]
 80002cc:      	str	r0, [sp, #0x70]
 80002ce:      	str	r1, [sp, #0x74]
;             ld3: pe9
 80002d0:      	bl	#0x630
 80002d4:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0x14>
 80002d6:      	bl	#0xe94
 80002da:      	str	r0, [sp, #0x3c]
 80002dc:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0x1c>
 80002de:      	ldr	r0, [sp, #0x3c]
 80002e0:      	bl	#0x418
 80002e4:      	str	r0, [sp, #0x38]
 80002e6:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0x26>
;             ld4: pe8
 80002e8:      	ldr	r1, [sp, #0x40]
 80002ea:      	ldr	r0, [sp, #0x44]
 80002ec:      	bl	#0x4e2
 80002f0:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0x30>
 80002f2:      	bl	#0xe68
 80002f6:      	str	r0, [sp, #0x34]
 80002f8:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0x38>
 80002fa:      	ldr	r0, [sp, #0x34]
 80002fc:      	bl	#0x3fc
 8000300:      	str	r0, [sp, #0x30]
 8000302:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0x42>
;             ld5: pe10
 8000304:      	ldr	r1, [sp, #0x40]
 8000306:      	ldr	r0, [sp, #0x44]
 8000308:      	bl	#0x72a
 800030c:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0x4c>
 800030e:      	bl	#0xe6c
 8000312:      	str	r0, [sp, #0x2c]
 8000314:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0x54>
 8000316:      	ldr	r0, [sp, #0x2c]
 8000318:      	bl	#0x3e0
 800031c:      	str	r0, [sp, #0x28]
 800031e:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0x5e>
;             ld6: pe15
 8000320:      	ldr	r1, [sp, #0x40]
 8000322:      	ldr	r0, [sp, #0x44]
 8000324:      	bl	#0xd08
 8000328:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0x68>
 800032a:      	bl	#0xea0
 800032e:      	str	r0, [sp, #0x24]
 8000330:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0x70>
 8000332:      	ldr	r0, [sp, #0x24]
 8000334:      	bl	#0x3c4
 8000338:      	str	r0, [sp, #0x20]
 800033a:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0x7a>
;             ld7: pe11
 800033c:      	ldr	r1, [sp, #0x40]
 800033e:      	ldr	r0, [sp, #0x44]
 8000340:      	bl	#0x824
 8000344:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0x84>
 8000346:      	bl	#0xe44
 800034a:      	str	r0, [sp, #0x1c]
 800034c:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0x8c>
 800034e:      	ldr	r0, [sp, #0x1c]
 8000350:      	bl	#0x3a8
 8000354:      	str	r0, [sp, #0x18]
 8000356:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0x96>
;             ld8: pe14
 8000358:      	ldr	r1, [sp, #0x40]
 800035a:      	ldr	r0, [sp, #0x44]
 800035c:      	bl	#0xb9e
 8000360:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0xa0>
 8000362:      	bl	#0xe58
 8000366:      	str	r0, [sp, #0x14]
 8000368:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0xa8>
 800036a:      	ldr	r0, [sp, #0x14]
 800036c:      	bl	#0x38c
 8000370:      	str	r0, [sp, #0x10]
 8000372:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0xb2>
;             ld9: pe12
 8000374:      	ldr	r1, [sp, #0x40]
 8000376:      	ldr	r0, [sp, #0x44]
 8000378:      	bl	#0x91e
 800037c:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0xbc>
 800037e:      	bl	#0xe1c
 8000382:      	str	r0, [sp, #0xc]
 8000384:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0xc4>
 8000386:      	ldr	r0, [sp, #0xc]
 8000388:      	bl	#0x370
 800038c:      	str	r0, [sp, #0x8]
 800038e:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0xce>
;             ld10: pe13
 8000390:      	ldr	r1, [sp, #0x40]
 8000392:      	ldr	r0, [sp, #0x44]
 8000394:      	bl	#0xa34
 8000398:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0xd8>
 800039a:      	bl	#0xe10
 800039e:      	str	r0, [sp, #0x4]
 80003a0:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0xe0>
 80003a2:      	ldr	r0, [sp, #0x4]
 80003a4:      	bl	#0x354
 80003a8:      	str	r0, [sp]
 80003aa:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0xea>
;         let mut leds = Leds {
 80003ac:      	ldr	r0, [sp]
 80003ae:      	ldr	r1, [sp, #0x8]
 80003b0:      	ldr	r2, [sp, #0x10]
 80003b2:      	ldr	r3, [sp, #0x18]
 80003b4:      	ldr.w	r12, [sp, #0x20]
 80003b8:      	ldr.w	lr, [sp, #0x28]
 80003bc:      	ldr	r4, [sp, #0x30]
 80003be:      	ldr	r5, [sp, #0x38]
 80003c0:      	strb.w	r5, [sp, #0x48]
 80003c4:      	strb.w	r4, [sp, #0x49]
 80003c8:      	strb.w	lr, [sp, #0x4a]
 80003cc:      	strb.w	r12, [sp, #0x4b]
 80003d0:      	strb.w	r3, [sp, #0x4c]
 80003d4:      	strb.w	r2, [sp, #0x4d]
 80003d8:      	strb.w	r1, [sp, #0x4e]
 80003dc:      	strb.w	r0, [sp, #0x4f]
 80003e0:      	add	r0, sp, #0x48
;         leds.ld3.off().ok();
 80003e2:      	bl	#0xe7a
 80003e6:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0x126>
 80003e8:      	bl	#0xa0
 80003ec:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0x12c>
 80003ee:      	add	r0, sp, #0x48
;         leds.ld4.off().ok();
 80003f0:      	adds	r0, #0x1
 80003f2:      	bl	#0xe6a
 80003f6:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0x136>
 80003f8:      	bl	#0x90
 80003fc:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0x13c>
 80003fe:      	add	r0, sp, #0x48
;         leds.ld5.off().ok();
 8000400:      	adds	r0, #0x2
 8000402:      	bl	#0xe5a
 8000406:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0x146>
 8000408:      	bl	#0x80
 800040c:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0x14c>
 800040e:      	add	r0, sp, #0x48
;         leds.ld6.off().ok();
 8000410:      	adds	r0, #0x3
 8000412:      	bl	#0xe4a
 8000416:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0x156>
 8000418:      	bl	#0x70
 800041c:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0x15c>
 800041e:      	add	r0, sp, #0x48
;         leds.ld7.off().ok();
 8000420:      	adds	r0, #0x4
 8000422:      	bl	#0xe3a
 8000426:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0x166>
 8000428:      	bl	#0x60
 800042c:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0x16c>
 800042e:      	add	r0, sp, #0x48
;         leds.ld8.off().ok();
 8000430:      	adds	r0, #0x5
 8000432:      	bl	#0xe2a
 8000436:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0x176>
 8000438:      	bl	#0x50
 800043c:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0x17c>
 800043e:      	add	r0, sp, #0x48
;         leds.ld9.off().ok();
 8000440:      	adds	r0, #0x6
 8000442:      	bl	#0xe1a
 8000446:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0x186>
 8000448:      	bl	#0x40
 800044c:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0x18c>
 800044e:      	add	r0, sp, #0x48
;         leds.ld10.off().ok();
 8000450:      	adds	r0, #0x7
 8000452:      	bl	#0xe0a
 8000456:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0x196>
 8000458:      	bl	#0x30
 800045c:      	b	#-0x2 <stm32f3_discovery::leds::Leds::new::h5226ba8f46a2ec90+0x19c>
;     }
 800045e:      	ldr	r0, [sp, #0x48]
 8000460:      	ldr	r1, [sp, #0x4c]
 8000462:      	add	sp, #0x78
 8000464:      	pop	{r4, r5, r7, pc}

08000466 <stm32f3::stm32f303::Peripherals::take::hf7f441868a4fbde5>:
;     pub fn take() -> Option<Self> {
 8000466:      	push	{r7, lr}
 8000468:      	mov	r7, sp
 800046a:      	sub	sp, #0x8
;         cortex_m::interrupt::free(|_| {
 800046c:      	bl	#0x150
 8000470:      	str	r0, [sp, #0x4]
 8000472:      	b	#-0x2 <stm32f3::stm32f303::Peripherals::take::hf7f441868a4fbde5+0xe>
;     }
 8000474:      	ldr	r0, [sp, #0x4]
 8000476:      	and	r0, r0, #0x1
 800047a:      	add	sp, #0x8
 800047c:      	pop	{r7, pc}

0800047e <stm32f3::stm32f303::Peripherals::steal::hcd967a9e2e5c9d41>:
;         DEVICE_PERIPHERALS = true;
 800047e:      	movw	r1, #0x0
 8000482:      	movt	r1, #0x2000
 8000486:      	movs	r0, #0x1
 8000488:      	strb	r0, [r1]
;     }
 800048a:      	bx	lr

0800048c <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h66bb7c308686e460E>:
;     pub fn ok(self) -> Option<T> {
 800048c:      	sub	sp, #0x8
 800048e:      	movs	r0, #0x1
;             Ok(x) => Some(x),
 8000490:      	cbnz	r0, #0xa
 8000492:      	b	#-0x2 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h66bb7c308686e460E+0x8>
 8000494:      	movs	r0, #0x0
;             Err(_) => None,
 8000496:      	strb.w	r0, [sp, #0x3]
;         match self {
 800049a:      	b	#0x12 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h66bb7c308686e460E+0x24>
 800049c:      	trap
 800049e:      	movs	r0, #0x1
;             Ok(x) => Some(x),
 80004a0:      	strb.w	r0, [sp, #0x3]
;     }
 80004a4:      	b	#0x8 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h66bb7c308686e460E+0x24>
 80004a6:      	ldrb.w	r0, [sp, #0x3]
 80004aa:      	add	sp, #0x8
 80004ac:      	bx	lr
 80004ae:      	b	#-0xc <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h66bb7c308686e460E+0x1a>
 80004b0:      	movs	r0, #0x1
;     }
 80004b2:      	cmp	r0, #0x0
 80004b4:      	bne	#-0x12 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h66bb7c308686e460E+0x1a>
 80004b6:      	b	#-0xc <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h66bb7c308686e460E+0x22>

080004b8 <core::option::Option<T>::unwrap::h6ffe32f6ef98990e>:
;     pub const fn unwrap(self) -> T {
 80004b8:      	push	{r7, lr}
 80004ba:      	mov	r7, sp
 80004bc:      	sub	sp, #0x10
 80004be:      	str	r1, [sp, #0x4]
 80004c0:      	strb	r0, [r7, #-5]
;             Some(val) => val,
 80004c4:      	ldrb	r1, [r7, #-5]
 80004c8:      	lsls	r0, r1, #0x1f
 80004ca:      	cbz	r0, #0x2
 80004cc:      	b	#-0x2 <core::option::Option<T>::unwrap::h6ffe32f6ef98990e+0x16>
 80004ce:      	b	#0x12 <core::option::Option<T>::unwrap::h6ffe32f6ef98990e+0x2c>
;             None => panic!("called `Option::unwrap()` on a `None` value"),
 80004d0:      	ldr	r2, [sp, #0x4]
 80004d2:      	movw	r0, #0x356c
 80004d6:      	movt	r0, #0x800
 80004da:      	movs	r1, #0x2b
 80004dc:      	bl	#0x16b6
 80004e0:      	trap
;         match self {
 80004e2:      	trap
;     }
 80004e4:      	add	sp, #0x10
 80004e6:      	pop	{r7, pc}

080004e8 <core::option::Option<T>::unwrap::he489816e0480d234>:
;     pub const fn unwrap(self) -> T {
 80004e8:      	push	{r7, lr}
 80004ea:      	mov	r7, sp
 80004ec:      	sub	sp, #0x10
 80004ee:      	str	r1, [sp, #0x4]
 80004f0:      	strb	r0, [r7, #-5]
;             Some(val) => val,
 80004f4:      	ldrb	r1, [r7, #-5]
 80004f8:      	lsls	r0, r1, #0x1f
 80004fa:      	cbz	r0, #0x2
 80004fc:      	b	#-0x2 <core::option::Option<T>::unwrap::he489816e0480d234+0x16>
 80004fe:      	b	#0x12 <core::option::Option<T>::unwrap::he489816e0480d234+0x2c>
;             None => panic!("called `Option::unwrap()` on a `None` value"),
 8000500:      	ldr	r2, [sp, #0x4]
 8000502:      	movw	r0, #0x356c
 8000506:      	movt	r0, #0x800
 800050a:      	movs	r1, #0x2b
 800050c:      	bl	#0x1686
 8000510:      	trap
;         match self {
 8000512:      	trap
;     }
 8000514:      	add	sp, #0x10
 8000516:      	pop	{r7, pc}

08000518 <cortex_m::peripheral::Peripherals::take::h5deabeb6bcf233bc>:
;     pub fn take() -> Option<Self> {
 8000518:      	push	{r7, lr}
 800051a:      	mov	r7, sp
 800051c:      	sub	sp, #0x8
;         interrupt::free(|_| match cortex_m_0_7::peripheral::Peripherals::take() {
 800051e:      	bl	#0xfa
 8000522:      	str	r0, [sp, #0x4]
 8000524:      	b	#-0x2 <cortex_m::peripheral::Peripherals::take::h5deabeb6bcf233bc+0xe>
;     }
 8000526:      	ldr	r0, [sp, #0x4]
 8000528:      	and	r0, r0, #0x1
 800052c:      	add	sp, #0x8
 800052e:      	pop	{r7, pc}

08000530 <cortex_m::peripheral::Peripherals::steal::h27f869007d10a8cb>:
;     pub unsafe fn steal() -> Self {
 8000530:      	push	{r7, lr}
 8000532:      	mov	r7, sp
;         cortex_m_0_7::peripheral::Peripherals::steal();
 8000534:      	bl	#0x1e
 8000538:      	b	#-0x2 <cortex_m::peripheral::Peripherals::steal::h27f869007d10a8cb+0xa>
;         core::mem::transmute(())
 800053a:      	b	#-0x2 <cortex_m::peripheral::Peripherals::steal::h27f869007d10a8cb+0xc>
;     }
 800053c:      	pop	{r7, pc}

0800053e <cortex_m::peripheral::Peripherals::take::hebfb7152914bab00>:
;     pub fn take() -> Option<Self> {
 800053e:      	push	{r7, lr}
 8000540:      	mov	r7, sp
 8000542:      	sub	sp, #0x8
;         interrupt::free(|_| {
 8000544:      	bl	#0x1c
 8000548:      	str	r0, [sp, #0x4]
 800054a:      	b	#-0x2 <cortex_m::peripheral::Peripherals::take::hebfb7152914bab00+0xe>
;     }
 800054c:      	ldr	r0, [sp, #0x4]
 800054e:      	and	r0, r0, #0x1
 8000552:      	add	sp, #0x8
 8000554:      	pop	{r7, pc}

08000556 <cortex_m::peripheral::Peripherals::steal::h92a61c7d5ed7fb44>:
;         TAKEN = true;
 8000556:      	movw	r1, #0x1
 800055a:      	movt	r1, #0x2000
 800055e:      	movs	r0, #0x1
 8000560:      	strb	r0, [r1]
;     }
 8000562:      	bx	lr

08000564 <cortex_m::interrupt::free::h0a2c4b05e132eb92>:
; pub fn free<F, R>(f: F) -> R
 8000564:      	push	{r7, lr}
 8000566:      	mov	r7, sp
 8000568:      	sub	sp, #0x20
;     let primask = crate::register::primask::read();
 800056a:      	bl	#0xd60
 800056e:      	mov	r1, r0
 8000570:      	str	r1, [sp, #0xc]
 8000572:      	strb	r0, [r7, #-2]
 8000576:      	b	#-0x2 <cortex_m::interrupt::free::h0a2c4b05e132eb92+0x14>
;     disable();
 8000578:      	bl	#0x174
 800057c:      	b	#-0x2 <cortex_m::interrupt::free::h0a2c4b05e132eb92+0x1a>
;     let r = f(unsafe { &CriticalSection::new() });
 800057e:      	bl	#0x1506
 8000582:      	b	#-0x2 <cortex_m::interrupt::free::h0a2c4b05e132eb92+0x20>
 8000584:      	add	r0, sp, #0x14
;     let r = f(unsafe { &CriticalSection::new() });
 8000586:      	str	r0, [sp, #0x10]
 8000588:      	ldr	r0, [sp, #0x10]
 800058a:      	bl	#0x120
 800058e:      	mov	r1, r0
 8000590:      	str	r1, [sp, #0x8]
 8000592:      	strb	r0, [r7, #-1]
 8000596:      	b	#-0x2 <cortex_m::interrupt::free::h0a2c4b05e132eb92+0x34>
;     if primask.is_active() {
 8000598:      	ldr	r0, [sp, #0xc]
 800059a:      	and	r0, r0, #0x1
 800059e:      	bl	#0xd5e
 80005a2:      	str	r0, [sp, #0x4]
 80005a4:      	b	#-0x2 <cortex_m::interrupt::free::h0a2c4b05e132eb92+0x42>
 80005a6:      	ldr	r0, [sp, #0x4]
 80005a8:      	lsls	r0, r0, #0x1f
 80005aa:      	cbz	r0, #0x6
 80005ac:      	b	#-0x2 <cortex_m::interrupt::free::h0a2c4b05e132eb92+0x4a>
;         unsafe { enable() }
 80005ae:      	bl	#0x132
 80005b2:      	b	#0x0 <cortex_m::interrupt::free::h0a2c4b05e132eb92+0x52>
;     if primask.is_active() {
 80005b4:      	b	#-0x2 <cortex_m::interrupt::free::h0a2c4b05e132eb92+0x52>
; }
 80005b6:      	ldr	r0, [sp, #0x8]
 80005b8:      	and	r0, r0, #0x1
 80005bc:      	add	sp, #0x20
 80005be:      	pop	{r7, pc}

080005c0 <cortex_m::interrupt::free::h36d366212f3a7fe5>:
; pub fn free<F, R>(f: F) -> R
 80005c0:      	push	{r7, lr}
 80005c2:      	mov	r7, sp
 80005c4:      	sub	sp, #0x20
;     let primask = crate::register::primask::read();
 80005c6:      	bl	#0xd04
 80005ca:      	mov	r1, r0
 80005cc:      	str	r1, [sp, #0xc]
 80005ce:      	strb	r0, [r7, #-2]
 80005d2:      	b	#-0x2 <cortex_m::interrupt::free::h36d366212f3a7fe5+0x14>
;     disable();
 80005d4:      	bl	#0x118
 80005d8:      	b	#-0x2 <cortex_m::interrupt::free::h36d366212f3a7fe5+0x1a>
;     let r = f(unsafe { &CriticalSection::new() });
 80005da:      	bl	#0x14aa
 80005de:      	b	#-0x2 <cortex_m::interrupt::free::h36d366212f3a7fe5+0x20>
 80005e0:      	add	r0, sp, #0x14
;     let r = f(unsafe { &CriticalSection::new() });
 80005e2:      	str	r0, [sp, #0x10]
 80005e4:      	ldr	r0, [sp, #0x10]
 80005e6:      	bl	#0x8e
 80005ea:      	mov	r1, r0
 80005ec:      	str	r1, [sp, #0x8]
 80005ee:      	strb	r0, [r7, #-1]
 80005f2:      	b	#-0x2 <cortex_m::interrupt::free::h36d366212f3a7fe5+0x34>
;     if primask.is_active() {
 80005f4:      	ldr	r0, [sp, #0xc]
 80005f6:      	and	r0, r0, #0x1
 80005fa:      	bl	#0xd02
 80005fe:      	str	r0, [sp, #0x4]
 8000600:      	b	#-0x2 <cortex_m::interrupt::free::h36d366212f3a7fe5+0x42>
 8000602:      	ldr	r0, [sp, #0x4]
 8000604:      	lsls	r0, r0, #0x1f
 8000606:      	cbz	r0, #0x6
 8000608:      	b	#-0x2 <cortex_m::interrupt::free::h36d366212f3a7fe5+0x4a>
;         unsafe { enable() }
 800060a:      	bl	#0xd6
 800060e:      	b	#0x0 <cortex_m::interrupt::free::h36d366212f3a7fe5+0x52>
;     if primask.is_active() {
 8000610:      	b	#-0x2 <cortex_m::interrupt::free::h36d366212f3a7fe5+0x52>
; }
 8000612:      	ldr	r0, [sp, #0x8]
 8000614:      	and	r0, r0, #0x1
 8000618:      	add	sp, #0x20
 800061a:      	pop	{r7, pc}

0800061c <cortex_m::interrupt::free::h9bfe4e9288710a7d>:
; pub fn free<F, R>(f: F) -> R
 800061c:      	push	{r7, lr}
 800061e:      	mov	r7, sp
 8000620:      	sub	sp, #0x20
;     let primask = crate::register::primask::read();
 8000622:      	bl	#0xca8
 8000626:      	mov	r1, r0
 8000628:      	str	r1, [sp, #0xc]
 800062a:      	strb	r0, [r7, #-2]
 800062e:      	b	#-0x2 <cortex_m::interrupt::free::h9bfe4e9288710a7d+0x14>
;     disable();
 8000630:      	bl	#0xbc
 8000634:      	b	#-0x2 <cortex_m::interrupt::free::h9bfe4e9288710a7d+0x1a>
;     let r = f(unsafe { &CriticalSection::new() });
 8000636:      	bl	#0x144e
 800063a:      	b	#-0x2 <cortex_m::interrupt::free::h9bfe4e9288710a7d+0x20>
 800063c:      	add	r0, sp, #0x14
;     let r = f(unsafe { &CriticalSection::new() });
 800063e:      	str	r0, [sp, #0x10]
 8000640:      	ldr	r0, [sp, #0x10]
 8000642:      	bl	#0xbca
 8000646:      	mov	r1, r0
 8000648:      	str	r1, [sp, #0x8]
 800064a:      	strb	r0, [r7, #-1]
 800064e:      	b	#-0x2 <cortex_m::interrupt::free::h9bfe4e9288710a7d+0x34>
;     if primask.is_active() {
 8000650:      	ldr	r0, [sp, #0xc]
 8000652:      	and	r0, r0, #0x1
 8000656:      	bl	#0xca6
 800065a:      	str	r0, [sp, #0x4]
 800065c:      	b	#-0x2 <cortex_m::interrupt::free::h9bfe4e9288710a7d+0x42>
 800065e:      	ldr	r0, [sp, #0x4]
 8000660:      	lsls	r0, r0, #0x1f
 8000662:      	cbz	r0, #0x6
 8000664:      	b	#-0x2 <cortex_m::interrupt::free::h9bfe4e9288710a7d+0x4a>
;         unsafe { enable() }
 8000666:      	bl	#0x7a
 800066a:      	b	#0x0 <cortex_m::interrupt::free::h9bfe4e9288710a7d+0x52>
;     if primask.is_active() {
 800066c:      	b	#-0x2 <cortex_m::interrupt::free::h9bfe4e9288710a7d+0x52>
; }
 800066e:      	ldr	r0, [sp, #0x8]
 8000670:      	and	r0, r0, #0x1
 8000674:      	add	sp, #0x20
 8000676:      	pop	{r7, pc}

08000678 <stm32f3::stm32f303::Peripherals::take::{{closure}}::h864c12e16565a348>:
;         cortex_m::interrupt::free(|_| {
 8000678:      	push	{r7, lr}
 800067a:      	mov	r7, sp
 800067c:      	sub	sp, #0x10
 800067e:      	str	r0, [sp, #0xc]
;             if unsafe { DEVICE_PERIPHERALS } {
 8000680:      	movw	r0, #0x0
 8000684:      	movt	r0, #0x2000
 8000688:      	ldrb	r0, [r0]
 800068a:      	lsls	r0, r0, #0x1f
 800068c:      	cbz	r0, #0x8
 800068e:      	b	#-0x2 <stm32f3::stm32f303::Peripherals::take::{{closure}}::h864c12e16565a348+0x18>
 8000690:      	movs	r0, #0x0
;                 None
 8000692:      	strb	r0, [r7, #-9]
;             if unsafe { DEVICE_PERIPHERALS } {
 8000696:      	b	#0xc <stm32f3::stm32f303::Peripherals::take::{{closure}}::h864c12e16565a348+0x2e>
;                 Some(unsafe { Peripherals::steal() })
 8000698:      	bl	#-0x21e
 800069c:      	b	#-0x2 <stm32f3::stm32f303::Peripherals::take::{{closure}}::h864c12e16565a348+0x26>
 800069e:      	movs	r0, #0x1
;                 Some(unsafe { Peripherals::steal() })
 80006a0:      	strb	r0, [r7, #-9]
;             if unsafe { DEVICE_PERIPHERALS } {
 80006a4:      	b	#-0x2 <stm32f3::stm32f303::Peripherals::take::{{closure}}::h864c12e16565a348+0x2e>
;         })
 80006a6:      	ldrb	r0, [r7, #-9]
 80006aa:      	add	sp, #0x10
 80006ac:      	pop	{r7, pc}

080006ae <cortex_m::peripheral::Peripherals::take::{{closure}}::h6d2901c8ff83c0f5>:
;         interrupt::free(|_| {
 80006ae:      	push	{r7, lr}
 80006b0:      	mov	r7, sp
 80006b2:      	sub	sp, #0x10
 80006b4:      	str	r0, [sp, #0xc]
;             if unsafe { TAKEN } {
 80006b6:      	movw	r0, #0x1
 80006ba:      	movt	r0, #0x2000
 80006be:      	ldrb	r0, [r0]
 80006c0:      	lsls	r0, r0, #0x1f
 80006c2:      	cbz	r0, #0x8
 80006c4:      	b	#-0x2 <cortex_m::peripheral::Peripherals::take::{{closure}}::h6d2901c8ff83c0f5+0x18>
 80006c6:      	movs	r0, #0x0
;                 None
 80006c8:      	strb	r0, [r7, #-9]
;             if unsafe { TAKEN } {
 80006cc:      	b	#0xc <cortex_m::peripheral::Peripherals::take::{{closure}}::h6d2901c8ff83c0f5+0x2e>
;                 Some(unsafe { Peripherals::steal() })
 80006ce:      	bl	#-0x17c
 80006d2:      	b	#-0x2 <cortex_m::peripheral::Peripherals::take::{{closure}}::h6d2901c8ff83c0f5+0x26>
 80006d4:      	movs	r0, #0x1
;                 Some(unsafe { Peripherals::steal() })
 80006d6:      	strb	r0, [r7, #-9]
;             if unsafe { TAKEN } {
 80006da:      	b	#-0x2 <cortex_m::peripheral::Peripherals::take::{{closure}}::h6d2901c8ff83c0f5+0x2e>
;         })
 80006dc:      	ldrb	r0, [r7, #-9]
 80006e0:      	add	sp, #0x10
 80006e2:      	pop	{r7, pc}

080006e4 <cortex_m::interrupt::enable::h9ffd17d1c05dc0dc>:
; pub unsafe fn enable() {
 80006e4:      	push	{r7, lr}
 80006e6:      	mov	r7, sp
;     call_asm!(__cpsie());
 80006e8:      	bl	#0x1392
 80006ec:      	b	#-0x2 <cortex_m::interrupt::enable::h9ffd17d1c05dc0dc+0xa>
; }
 80006ee:      	pop	{r7, pc}

080006f0 <cortex_m::interrupt::disable::h507378956ae6281a>:
; pub fn disable() {
 80006f0:      	push	{r7, lr}
 80006f2:      	mov	r7, sp
;     call_asm!(__cpsid());
 80006f4:      	bl	#0x1382
 80006f8:      	b	#-0x2 <cortex_m::interrupt::disable::h507378956ae6281a+0xa>
; }
 80006fa:      	pop	{r7, pc}

080006fc <switch_hal::IntoSwitch::into_active_high_switch::h66c1dd8b8f4a9026>:
;     fn into_active_high_switch(self) -> Switch<Self, ActiveHigh>
 80006fc:      	push	{r7, lr}
 80006fe:      	mov	r7, sp
 8000700:      	sub	sp, #0x8
 8000702:      	strb	r0, [r7, #-1]
;         self.into_switch::<ActiveHigh>()
 8000706:      	bl	#0xad4
 800070a:      	str	r0, [sp]
 800070c:      	b	#-0x2 <switch_hal::IntoSwitch::into_active_high_switch::h66c1dd8b8f4a9026+0x12>
;     }
 800070e:      	ldr	r0, [sp]
 8000710:      	add	sp, #0x8
 8000712:      	pop	{r7, pc}

08000714 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h25abb238c81c726aE>:
;                         fn set_low(&mut self) -> Result<(), Self::Error> {
 8000714:      	push	{r7, lr}
 8000716:      	mov	r7, sp
 8000718:      	sub	sp, #0x28
 800071a:      	str	r0, [sp, #0x8]
; gpio!([
 800071c:      	b	#-0x2 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h25abb238c81c726aE+0xa>
 800071e:      	add	r0, sp, #0x8
;                             unsafe { (*$GPIOX::ptr()).bsrr.write(|w| w.bits(1 << (16 + self.i))) }
 8000720:      	str	r0, [sp, #0xc]
 8000722:      	ldr	r0, [sp, #0xc]
 8000724:      	movw	r1, #0x1018
 8000728:      	movt	r1, #0x4800
 800072c:      	str	r1, [sp]
 800072e:      	str	r1, [sp, #0x18]
 8000730:      	str	r0, [sp, #0x1c]
 8000732:      	movs	r1, #0x0
;         self.register.set(f(&mut W {bits: Self::reset_value(), _reg: marker::PhantomData}).bits);
 8000734:      	str	r1, [sp, #0x14]
 8000736:      	add	r1, sp, #0x14
 8000738:      	str	r1, [sp, #0x10]
 800073a:      	ldr	r1, [sp, #0x10]
 800073c:      	bl	#0x1c
 8000740:      	mov	r1, r0
 8000742:      	ldr	r0, [sp]
 8000744:      	ldr	r1, [r1]
 8000746:      	str	r1, [sp, #0x4]
 8000748:      	str	r0, [sp, #0x20]
 800074a:      	str	r1, [sp, #0x24]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 800074c:      	bl	#0x1290
 8000750:      	ldr	r1, [sp, #0x4]
 8000752:      	bl	#0x109a
;                             unsafe { (*$GPIOX::ptr()).bsrr.write(|w| w.bits(1 << (16 + self.i))) }
 8000756:      	b	#-0x2 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h25abb238c81c726aE+0x44>
;                         }
 8000758:      	add	sp, #0x28
 800075a:      	pop	{r7, pc}

0800075c <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h1c328dc182064e5dE>:
;                             unsafe { (*$GPIOX::ptr()).bsrr.write(|w| w.bits(1 << (16 + self.i))) }
 800075c:      	push	{r7, lr}
 800075e:      	mov	r7, sp
 8000760:      	sub	sp, #0x20
 8000762:      	str	r1, [sp, #0x8]
 8000764:      	str	r0, [sp, #0x10]
 8000766:      	str	r1, [sp, #0x14]
 8000768:      	ldr	r0, [r0]
 800076a:      	ldrb	r0, [r0]
 800076c:      	add.w	r1, r0, #0x10
 8000770:      	uxtb	r0, r1
 8000772:      	mov	r2, r1
 8000774:      	str	r2, [sp, #0xc]
 8000776:      	cmp	r0, r1
 8000778:      	bne	#0x26 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h1c328dc182064e5dE+0x46>
 800077a:      	b	#-0x2 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h1c328dc182064e5dE+0x20>
 800077c:      	ldr	r0, [sp, #0xc]
 800077e:      	and	r2, r0, #0x1f
 8000782:      	movs	r1, #0x1
 8000784:      	lsls	r1, r2
 8000786:      	str	r1, [sp, #0x4]
 8000788:      	tst.w	r0, #0xe0
 800078c:      	bne	#0x2a <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h1c328dc182064e5dE+0x5e>
 800078e:      	b	#-0x2 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h1c328dc182064e5dE+0x34>
 8000790:      	ldr	r0, [sp, #0x4]
 8000792:      	ldr	r1, [sp, #0x8]
 8000794:      	str	r1, [sp, #0x18]
 8000796:      	str	r0, [sp, #0x1c]
;         self.bits = bits;
 8000798:      	str	r0, [r1]
;                             unsafe { (*$GPIOX::ptr()).bsrr.write(|w| w.bits(1 << (16 + self.i))) }
 800079a:      	b	#-0x2 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h1c328dc182064e5dE+0x40>
 800079c:      	ldr	r0, [sp, #0x8]
 800079e:      	add	sp, #0x20
 80007a0:      	pop	{r7, pc}
 80007a2:      	movw	r0, #0x3610
 80007a6:      	movt	r0, #0x800
 80007aa:      	movw	r2, #0x35f8
 80007ae:      	movt	r2, #0x800
 80007b2:      	movs	r1, #0x1c
 80007b4:      	bl	#0x13de
 80007b8:      	trap
 80007ba:      	movw	r0, #0x3630
 80007be:      	movt	r0, #0x800
 80007c2:      	movw	r2, #0x35f8
 80007c6:      	movt	r2, #0x800
 80007ca:      	movs	r1, #0x23
 80007cc:      	bl	#0x13c6
 80007d0:      	trap

080007d2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17hfe99e8c7cd2b06adE>:
;                             pub fn into_push_pull_output(
 80007d2:      	push	{r7, lr}
 80007d4:      	mov	r7, sp
 80007d6:      	sub	sp, #0x68
 80007d8:      	str	r1, [sp, #0xc]
 80007da:      	str	r0, [sp, #0x18]
 80007dc:      	str	r1, [sp, #0x1c]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 80007de:      	bl	#0xdac
 80007e2:      	str	r0, [sp, #0x10]
 80007e4:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17hfe99e8c7cd2b06adE+0x14>
 80007e6:      	ldr	r0, [sp, #0x10]
 80007e8:      	str	r0, [sp, #0x30]
 80007ea:      	str	r0, [sp, #0x38]
;         unsafe { ptr::read_volatile(self.value.get()) }
 80007ec:      	bl	#0x11f0
 80007f0:      	bl	#0xfc8
;         let bits = self.register.get();
 80007f4:      	str	r0, [sp, #0x34]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 80007f6:      	str	r0, [sp, #0x28]
 80007f8:      	str	r0, [sp, #0x2c]
 80007fa:      	add	r0, sp, #0x28
 80007fc:      	str	r0, [sp, #0x20]
 80007fe:      	add	r0, sp, #0x2c
 8000800:      	str	r0, [sp, #0x24]
 8000802:      	ldr	r0, [sp, #0x20]
 8000804:      	ldr	r1, [sp, #0x24]
 8000806:      	bl	#0xac
 800080a:      	mov	r1, r0
 800080c:      	ldr	r0, [sp, #0x10]
 800080e:      	ldr	r1, [r1]
 8000810:      	str	r1, [sp, #0x8]
 8000812:      	str	r0, [sp, #0x3c]
 8000814:      	str	r1, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000816:      	bl	#0x11c6
 800081a:      	ldr	r1, [sp, #0x8]
 800081c:      	bl	#0xfd0
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000820:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17hfe99e8c7cd2b06adE+0x50>
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000822:      	ldr	r0, [sp, #0xc]
 8000824:      	bl	#0xd78
 8000828:      	str	r0, [sp, #0x4]
 800082a:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17hfe99e8c7cd2b06adE+0x5a>
 800082c:      	ldr	r0, [sp, #0x4]
 800082e:      	str	r0, [sp, #0x54]
 8000830:      	str	r0, [sp, #0x5c]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000832:      	bl	#0x11aa
 8000836:      	bl	#0xf82
;         let bits = self.register.get();
 800083a:      	str	r0, [sp, #0x58]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 800083c:      	str	r0, [sp, #0x4c]
 800083e:      	str	r0, [sp, #0x50]
 8000840:      	add	r0, sp, #0x4c
 8000842:      	str	r0, [sp, #0x44]
 8000844:      	add	r0, sp, #0x50
 8000846:      	str	r0, [sp, #0x48]
 8000848:      	ldr	r0, [sp, #0x44]
 800084a:      	ldr	r1, [sp, #0x48]
 800084c:      	bl	#0x1c
 8000850:      	mov	r1, r0
 8000852:      	ldr	r0, [sp, #0x4]
 8000854:      	ldr	r1, [r1]
 8000856:      	str	r1, [sp]
 8000858:      	str	r0, [sp, #0x60]
 800085a:      	str	r1, [sp, #0x64]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 800085c:      	bl	#0x1180
 8000860:      	ldr	r1, [sp]
 8000862:      	bl	#0xf8a
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000866:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17hfe99e8c7cd2b06adE+0x96>
;                             }
 8000868:      	add	sp, #0x68
 800086a:      	pop	{r7, pc}

0800086c <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h4e7cd60c95fe6b53E>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 800086c:      	push	{r7, lr}
 800086e:      	mov	r7, sp
 8000870:      	sub	sp, #0x30
 8000872:      	str	r0, [sp, #0x8]
 8000874:      	str	r1, [sp, #0xc]
 8000876:      	str	r1, [sp, #0x14]
;         OT8_W { w: self }
 8000878:      	str	r1, [sp, #0x10]
;     }
 800087a:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 800087c:      	str	r0, [sp]
 800087e:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h4e7cd60c95fe6b53E+0x14>
 8000880:      	ldr	r1, [sp]
 8000882:      	str	r1, [sp, #0x1c]
 8000884:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000886:      	strb	r0, [r7, #-21]
 800088a:      	ldrb	r0, [r7, #-21]
 800088e:      	str	r1, [sp, #0x20]
 8000890:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 8000894:      	bl	#0x95e
 8000898:      	ldr	r1, [sp]
 800089a:      	mov	r2, r0
 800089c:      	str	r1, [sp, #0x28]
 800089e:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
 80008a2:      	ldr	r0, [r1]
 80008a4:      	bic	r0, r0, #0x100
 80008a8:      	orr.w	r0, r0, r2, lsl #8
 80008ac:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80008ae:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h4e7cd60c95fe6b53E+0x44>
 80008b0:      	ldr	r0, [sp]
 80008b2:      	add	sp, #0x30
 80008b4:      	pop	{r7, pc}

080008b6 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17ha3a90c3c3ed80913E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 80008b6:      	push	{r7, lr}
 80008b8:      	mov	r7, sp
 80008ba:      	sub	sp, #0x30
 80008bc:      	str	r0, [sp, #0x8]
 80008be:      	str	r1, [sp, #0xc]
 80008c0:      	str	r1, [sp, #0x14]
;         MODER8_W { w: self }
 80008c2:      	str	r1, [sp, #0x10]
;     }
 80008c4:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 80008c6:      	str	r0, [sp]
 80008c8:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17ha3a90c3c3ed80913E+0x14>
 80008ca:      	ldr	r1, [sp]
 80008cc:      	str	r1, [sp, #0x1c]
 80008ce:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 80008d0:      	strb	r0, [r7, #-21]
 80008d4:      	ldrb	r0, [r7, #-21]
 80008d8:      	str	r1, [sp, #0x20]
 80008da:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 80008de:      	bl	#0x990
 80008e2:      	ldr	r1, [sp]
 80008e4:      	mov	r2, r0
 80008e6:      	str	r1, [sp, #0x28]
 80008e8:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
 80008ec:      	ldr	r0, [r1]
 80008ee:      	bic	r0, r0, #0x30000
 80008f2:      	and	r2, r2, #0x3
 80008f6:      	orr.w	r0, r0, r2, lsl #16
 80008fa:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 80008fc:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17ha3a90c3c3ed80913E+0x48>
 80008fe:      	ldr	r0, [sp]
 8000900:      	add	sp, #0x30
 8000902:      	pop	{r7, pc}

08000904 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17h70a7e2f7125d47b2E>:
;                             pub fn into_push_pull_output(
 8000904:      	push	{r7, lr}
 8000906:      	mov	r7, sp
 8000908:      	sub	sp, #0x68
 800090a:      	str	r1, [sp, #0xc]
 800090c:      	str	r0, [sp, #0x18]
 800090e:      	str	r1, [sp, #0x1c]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000910:      	bl	#0xc7a
 8000914:      	str	r0, [sp, #0x10]
 8000916:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17h70a7e2f7125d47b2E+0x14>
 8000918:      	ldr	r0, [sp, #0x10]
 800091a:      	str	r0, [sp, #0x30]
 800091c:      	str	r0, [sp, #0x38]
;         unsafe { ptr::read_volatile(self.value.get()) }
 800091e:      	bl	#0x10be
 8000922:      	bl	#0xe96
;         let bits = self.register.get();
 8000926:      	str	r0, [sp, #0x34]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000928:      	str	r0, [sp, #0x28]
 800092a:      	str	r0, [sp, #0x2c]
 800092c:      	add	r0, sp, #0x28
 800092e:      	str	r0, [sp, #0x20]
 8000930:      	add	r0, sp, #0x2c
 8000932:      	str	r0, [sp, #0x24]
 8000934:      	ldr	r0, [sp, #0x20]
 8000936:      	ldr	r1, [sp, #0x24]
 8000938:      	bl	#0x62
 800093c:      	mov	r1, r0
 800093e:      	ldr	r0, [sp, #0x10]
 8000940:      	ldr	r1, [r1]
 8000942:      	str	r1, [sp, #0x8]
 8000944:      	str	r0, [sp, #0x3c]
 8000946:      	str	r1, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000948:      	bl	#0x1094
 800094c:      	ldr	r1, [sp, #0x8]
 800094e:      	bl	#0xe9e
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000952:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17h70a7e2f7125d47b2E+0x50>
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000954:      	ldr	r0, [sp, #0xc]
 8000956:      	bl	#0xc46
 800095a:      	str	r0, [sp, #0x4]
 800095c:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17h70a7e2f7125d47b2E+0x5a>
 800095e:      	ldr	r0, [sp, #0x4]
 8000960:      	str	r0, [sp, #0x54]
 8000962:      	str	r0, [sp, #0x5c]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000964:      	bl	#0x1078
 8000968:      	bl	#0xe50
;         let bits = self.register.get();
 800096c:      	str	r0, [sp, #0x58]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 800096e:      	str	r0, [sp, #0x4c]
 8000970:      	str	r0, [sp, #0x50]
 8000972:      	add	r0, sp, #0x4c
 8000974:      	str	r0, [sp, #0x44]
 8000976:      	add	r0, sp, #0x50
 8000978:      	str	r0, [sp, #0x48]
 800097a:      	ldr	r0, [sp, #0x44]
 800097c:      	ldr	r1, [sp, #0x48]
 800097e:      	bl	#0x6a
 8000982:      	mov	r1, r0
 8000984:      	ldr	r0, [sp, #0x4]
 8000986:      	ldr	r1, [r1]
 8000988:      	str	r1, [sp]
 800098a:      	str	r0, [sp, #0x60]
 800098c:      	str	r1, [sp, #0x64]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 800098e:      	bl	#0x104e
 8000992:      	ldr	r1, [sp]
 8000994:      	bl	#0xe58
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000998:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17h70a7e2f7125d47b2E+0x96>
;                             }
 800099a:      	add	sp, #0x68
 800099c:      	pop	{r7, pc}

0800099e <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h767c23e358d5032fE>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 800099e:      	push	{r7, lr}
 80009a0:      	mov	r7, sp
 80009a2:      	sub	sp, #0x30
 80009a4:      	str	r0, [sp, #0x8]
 80009a6:      	str	r1, [sp, #0xc]
 80009a8:      	str	r1, [sp, #0x14]
;         MODER9_W { w: self }
 80009aa:      	str	r1, [sp, #0x10]
;     }
 80009ac:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 80009ae:      	str	r0, [sp]
 80009b0:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h767c23e358d5032fE+0x14>
 80009b2:      	ldr	r1, [sp]
 80009b4:      	str	r1, [sp, #0x1c]
 80009b6:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 80009b8:      	strb	r0, [r7, #-21]
 80009bc:      	ldrb	r0, [r7, #-21]
 80009c0:      	str	r1, [sp, #0x20]
 80009c2:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 80009c6:      	bl	#0x8a8
 80009ca:      	ldr	r1, [sp]
 80009cc:      	mov	r2, r0
 80009ce:      	str	r1, [sp, #0x28]
 80009d0:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 18)) | (((value as u32) & 0x03) << 18);
 80009d4:      	ldr	r0, [r1]
 80009d6:      	bic	r0, r0, #0xc0000
 80009da:      	and	r2, r2, #0x3
 80009de:      	orr.w	r0, r0, r2, lsl #18
 80009e2:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 80009e4:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h767c23e358d5032fE+0x48>
 80009e6:      	ldr	r0, [sp]
 80009e8:      	add	sp, #0x30
 80009ea:      	pop	{r7, pc}

080009ec <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hf7315a51f6d6bb43E>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80009ec:      	push	{r7, lr}
 80009ee:      	mov	r7, sp
 80009f0:      	sub	sp, #0x30
 80009f2:      	str	r0, [sp, #0x8]
 80009f4:      	str	r1, [sp, #0xc]
 80009f6:      	str	r1, [sp, #0x14]
;         OT9_W { w: self }
 80009f8:      	str	r1, [sp, #0x10]
;     }
 80009fa:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80009fc:      	str	r0, [sp]
 80009fe:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hf7315a51f6d6bb43E+0x14>
 8000a00:      	ldr	r1, [sp]
 8000a02:      	str	r1, [sp, #0x1c]
 8000a04:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000a06:      	strb	r0, [r7, #-21]
 8000a0a:      	ldrb	r0, [r7, #-21]
 8000a0e:      	str	r1, [sp, #0x20]
 8000a10:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 8000a14:      	bl	#0x7de
 8000a18:      	ldr	r1, [sp]
 8000a1a:      	mov	r2, r0
 8000a1c:      	str	r1, [sp, #0x28]
 8000a1e:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
 8000a22:      	ldr	r0, [r1]
 8000a24:      	bic	r0, r0, #0x200
 8000a28:      	orr.w	r0, r0, r2, lsl #9
 8000a2c:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000a2e:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hf7315a51f6d6bb43E+0x44>
 8000a30:      	ldr	r0, [sp]
 8000a32:      	add	sp, #0x30
 8000a34:      	pop	{r7, pc}

08000a36 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17ha4520521744a9c29E>:
;                             pub fn into_push_pull_output(
 8000a36:      	push	{r7, lr}
 8000a38:      	mov	r7, sp
 8000a3a:      	sub	sp, #0x68
 8000a3c:      	str	r1, [sp, #0xc]
 8000a3e:      	str	r0, [sp, #0x18]
 8000a40:      	str	r1, [sp, #0x1c]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000a42:      	bl	#0xb48
 8000a46:      	str	r0, [sp, #0x10]
 8000a48:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17ha4520521744a9c29E+0x14>
 8000a4a:      	ldr	r0, [sp, #0x10]
 8000a4c:      	str	r0, [sp, #0x30]
 8000a4e:      	str	r0, [sp, #0x38]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000a50:      	bl	#0xf8c
 8000a54:      	bl	#0xd64
;         let bits = self.register.get();
 8000a58:      	str	r0, [sp, #0x34]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000a5a:      	str	r0, [sp, #0x28]
 8000a5c:      	str	r0, [sp, #0x2c]
 8000a5e:      	add	r0, sp, #0x28
 8000a60:      	str	r0, [sp, #0x20]
 8000a62:      	add	r0, sp, #0x2c
 8000a64:      	str	r0, [sp, #0x24]
 8000a66:      	ldr	r0, [sp, #0x20]
 8000a68:      	ldr	r1, [sp, #0x24]
 8000a6a:      	bl	#0x62
 8000a6e:      	mov	r1, r0
 8000a70:      	ldr	r0, [sp, #0x10]
 8000a72:      	ldr	r1, [r1]
 8000a74:      	str	r1, [sp, #0x8]
 8000a76:      	str	r0, [sp, #0x3c]
 8000a78:      	str	r1, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000a7a:      	bl	#0xf62
 8000a7e:      	ldr	r1, [sp, #0x8]
 8000a80:      	bl	#0xd6c
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000a84:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17ha4520521744a9c29E+0x50>
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000a86:      	ldr	r0, [sp, #0xc]
 8000a88:      	bl	#0xb14
 8000a8c:      	str	r0, [sp, #0x4]
 8000a8e:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17ha4520521744a9c29E+0x5a>
 8000a90:      	ldr	r0, [sp, #0x4]
 8000a92:      	str	r0, [sp, #0x54]
 8000a94:      	str	r0, [sp, #0x5c]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000a96:      	bl	#0xf46
 8000a9a:      	bl	#0xd1e
;         let bits = self.register.get();
 8000a9e:      	str	r0, [sp, #0x58]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000aa0:      	str	r0, [sp, #0x4c]
 8000aa2:      	str	r0, [sp, #0x50]
 8000aa4:      	add	r0, sp, #0x4c
 8000aa6:      	str	r0, [sp, #0x44]
 8000aa8:      	add	r0, sp, #0x50
 8000aaa:      	str	r0, [sp, #0x48]
 8000aac:      	ldr	r0, [sp, #0x44]
 8000aae:      	ldr	r1, [sp, #0x48]
 8000ab0:      	bl	#0x6a
 8000ab4:      	mov	r1, r0
 8000ab6:      	ldr	r0, [sp, #0x4]
 8000ab8:      	ldr	r1, [r1]
 8000aba:      	str	r1, [sp]
 8000abc:      	str	r0, [sp, #0x60]
 8000abe:      	str	r1, [sp, #0x64]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000ac0:      	bl	#0xf1c
 8000ac4:      	ldr	r1, [sp]
 8000ac6:      	bl	#0xd26
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000aca:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17ha4520521744a9c29E+0x96>
;                             }
 8000acc:      	add	sp, #0x68
 8000ace:      	pop	{r7, pc}

08000ad0 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17he485bf55a6dec2b8E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000ad0:      	push	{r7, lr}
 8000ad2:      	mov	r7, sp
 8000ad4:      	sub	sp, #0x30
 8000ad6:      	str	r0, [sp, #0x8]
 8000ad8:      	str	r1, [sp, #0xc]
 8000ada:      	str	r1, [sp, #0x14]
;         MODER10_W { w: self }
 8000adc:      	str	r1, [sp, #0x10]
;     }
 8000ade:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000ae0:      	str	r0, [sp]
 8000ae2:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17he485bf55a6dec2b8E+0x14>
 8000ae4:      	ldr	r1, [sp]
 8000ae6:      	str	r1, [sp, #0x1c]
 8000ae8:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8000aea:      	strb	r0, [r7, #-21]
 8000aee:      	ldrb	r0, [r7, #-21]
 8000af2:      	str	r1, [sp, #0x20]
 8000af4:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 8000af8:      	bl	#0x776
 8000afc:      	ldr	r1, [sp]
 8000afe:      	mov	r2, r0
 8000b00:      	str	r1, [sp, #0x28]
 8000b02:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
 8000b06:      	ldr	r0, [r1]
 8000b08:      	bic	r0, r0, #0x300000
 8000b0c:      	and	r2, r2, #0x3
 8000b10:      	orr.w	r0, r0, r2, lsl #20
 8000b14:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000b16:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17he485bf55a6dec2b8E+0x48>
 8000b18:      	ldr	r0, [sp]
 8000b1a:      	add	sp, #0x30
 8000b1c:      	pop	{r7, pc}

08000b1e <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17he845bc57dc1d3c5dE>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000b1e:      	push	{r7, lr}
 8000b20:      	mov	r7, sp
 8000b22:      	sub	sp, #0x30
 8000b24:      	str	r0, [sp, #0x8]
 8000b26:      	str	r1, [sp, #0xc]
 8000b28:      	str	r1, [sp, #0x14]
;         OT10_W { w: self }
 8000b2a:      	str	r1, [sp, #0x10]
;     }
 8000b2c:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000b2e:      	str	r0, [sp]
 8000b30:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17he845bc57dc1d3c5dE+0x14>
 8000b32:      	ldr	r1, [sp]
 8000b34:      	str	r1, [sp, #0x1c]
 8000b36:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000b38:      	strb	r0, [r7, #-21]
 8000b3c:      	ldrb	r0, [r7, #-21]
 8000b40:      	str	r1, [sp, #0x20]
 8000b42:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 8000b46:      	bl	#0x6ac
 8000b4a:      	ldr	r1, [sp]
 8000b4c:      	mov	r2, r0
 8000b4e:      	str	r1, [sp, #0x28]
 8000b50:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
 8000b54:      	ldr	r0, [r1]
 8000b56:      	bic	r0, r0, #0x400
 8000b5a:      	orr.w	r0, r0, r2, lsl #10
 8000b5e:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000b60:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17he845bc57dc1d3c5dE+0x44>
 8000b62:      	ldr	r0, [sp]
 8000b64:      	add	sp, #0x30
 8000b66:      	pop	{r7, pc}

08000b68 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17hb5ec4ca0281e6230E>:
;                             pub fn into_push_pull_output(
 8000b68:      	push	{r7, lr}
 8000b6a:      	mov	r7, sp
 8000b6c:      	sub	sp, #0x68
 8000b6e:      	str	r1, [sp, #0xc]
 8000b70:      	str	r0, [sp, #0x18]
 8000b72:      	str	r1, [sp, #0x1c]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000b74:      	bl	#0xa16
 8000b78:      	str	r0, [sp, #0x10]
 8000b7a:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17hb5ec4ca0281e6230E+0x14>
 8000b7c:      	ldr	r0, [sp, #0x10]
 8000b7e:      	str	r0, [sp, #0x30]
 8000b80:      	str	r0, [sp, #0x38]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000b82:      	bl	#0xe5a
 8000b86:      	bl	#0xc32
;         let bits = self.register.get();
 8000b8a:      	str	r0, [sp, #0x34]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000b8c:      	str	r0, [sp, #0x28]
 8000b8e:      	str	r0, [sp, #0x2c]
 8000b90:      	add	r0, sp, #0x28
 8000b92:      	str	r0, [sp, #0x20]
 8000b94:      	add	r0, sp, #0x2c
 8000b96:      	str	r0, [sp, #0x24]
 8000b98:      	ldr	r0, [sp, #0x20]
 8000b9a:      	ldr	r1, [sp, #0x24]
 8000b9c:      	bl	#0xac
 8000ba0:      	mov	r1, r0
 8000ba2:      	ldr	r0, [sp, #0x10]
 8000ba4:      	ldr	r1, [r1]
 8000ba6:      	str	r1, [sp, #0x8]
 8000ba8:      	str	r0, [sp, #0x3c]
 8000baa:      	str	r1, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000bac:      	bl	#0xe30
 8000bb0:      	ldr	r1, [sp, #0x8]
 8000bb2:      	bl	#0xc3a
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000bb6:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17hb5ec4ca0281e6230E+0x50>
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000bb8:      	ldr	r0, [sp, #0xc]
 8000bba:      	bl	#0x9e2
 8000bbe:      	str	r0, [sp, #0x4]
 8000bc0:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17hb5ec4ca0281e6230E+0x5a>
 8000bc2:      	ldr	r0, [sp, #0x4]
 8000bc4:      	str	r0, [sp, #0x54]
 8000bc6:      	str	r0, [sp, #0x5c]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000bc8:      	bl	#0xe14
 8000bcc:      	bl	#0xbec
;         let bits = self.register.get();
 8000bd0:      	str	r0, [sp, #0x58]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000bd2:      	str	r0, [sp, #0x4c]
 8000bd4:      	str	r0, [sp, #0x50]
 8000bd6:      	add	r0, sp, #0x4c
 8000bd8:      	str	r0, [sp, #0x44]
 8000bda:      	add	r0, sp, #0x50
 8000bdc:      	str	r0, [sp, #0x48]
 8000bde:      	ldr	r0, [sp, #0x44]
 8000be0:      	ldr	r1, [sp, #0x48]
 8000be2:      	bl	#0x1c
 8000be6:      	mov	r1, r0
 8000be8:      	ldr	r0, [sp, #0x4]
 8000bea:      	ldr	r1, [r1]
 8000bec:      	str	r1, [sp]
 8000bee:      	str	r0, [sp, #0x60]
 8000bf0:      	str	r1, [sp, #0x64]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000bf2:      	bl	#0xdea
 8000bf6:      	ldr	r1, [sp]
 8000bf8:      	bl	#0xbf4
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000bfc:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17hb5ec4ca0281e6230E+0x96>
;                             }
 8000bfe:      	add	sp, #0x68
 8000c00:      	pop	{r7, pc}

08000c02 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h0d513cf5a5ba674bE>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000c02:      	push	{r7, lr}
 8000c04:      	mov	r7, sp
 8000c06:      	sub	sp, #0x30
 8000c08:      	str	r0, [sp, #0x8]
 8000c0a:      	str	r1, [sp, #0xc]
 8000c0c:      	str	r1, [sp, #0x14]
;         OT11_W { w: self }
 8000c0e:      	str	r1, [sp, #0x10]
;     }
 8000c10:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000c12:      	str	r0, [sp]
 8000c14:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h0d513cf5a5ba674bE+0x14>
 8000c16:      	ldr	r1, [sp]
 8000c18:      	str	r1, [sp, #0x1c]
 8000c1a:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000c1c:      	strb	r0, [r7, #-21]
 8000c20:      	ldrb	r0, [r7, #-21]
 8000c24:      	str	r1, [sp, #0x20]
 8000c26:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 8000c2a:      	bl	#0x5c8
 8000c2e:      	ldr	r1, [sp]
 8000c30:      	mov	r2, r0
 8000c32:      	str	r1, [sp, #0x28]
 8000c34:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
 8000c38:      	ldr	r0, [r1]
 8000c3a:      	bic	r0, r0, #0x800
 8000c3e:      	orr.w	r0, r0, r2, lsl #11
 8000c42:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000c44:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h0d513cf5a5ba674bE+0x44>
 8000c46:      	ldr	r0, [sp]
 8000c48:      	add	sp, #0x30
 8000c4a:      	pop	{r7, pc}

08000c4c <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17ha8f8c8dbf9c9ee66E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000c4c:      	push	{r7, lr}
 8000c4e:      	mov	r7, sp
 8000c50:      	sub	sp, #0x30
 8000c52:      	str	r0, [sp, #0x8]
 8000c54:      	str	r1, [sp, #0xc]
 8000c56:      	str	r1, [sp, #0x14]
;         MODER11_W { w: self }
 8000c58:      	str	r1, [sp, #0x10]
;     }
 8000c5a:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000c5c:      	str	r0, [sp]
 8000c5e:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17ha8f8c8dbf9c9ee66E+0x14>
 8000c60:      	ldr	r1, [sp]
 8000c62:      	str	r1, [sp, #0x1c]
 8000c64:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8000c66:      	strb	r0, [r7, #-21]
 8000c6a:      	ldrb	r0, [r7, #-21]
 8000c6e:      	str	r1, [sp, #0x20]
 8000c70:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 8000c74:      	bl	#0x5fa
 8000c78:      	ldr	r1, [sp]
 8000c7a:      	mov	r2, r0
 8000c7c:      	str	r1, [sp, #0x28]
 8000c7e:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 22)) | (((value as u32) & 0x03) << 22);
 8000c82:      	ldr	r0, [r1]
 8000c84:      	bic	r0, r0, #0xc00000
 8000c88:      	and	r2, r2, #0x3
 8000c8c:      	orr.w	r0, r0, r2, lsl #22
 8000c90:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000c92:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17ha8f8c8dbf9c9ee66E+0x48>
 8000c94:      	ldr	r0, [sp]
 8000c96:      	add	sp, #0x30
 8000c98:      	pop	{r7, pc}

08000c9a <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17h4edd3a50c044f028E>:
;                             pub fn into_push_pull_output(
 8000c9a:      	push	{r7, lr}
 8000c9c:      	mov	r7, sp
 8000c9e:      	sub	sp, #0x68
 8000ca0:      	str	r1, [sp, #0xc]
 8000ca2:      	str	r0, [sp, #0x18]
 8000ca4:      	str	r1, [sp, #0x1c]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000ca6:      	bl	#0x8e4
 8000caa:      	str	r0, [sp, #0x10]
 8000cac:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17h4edd3a50c044f028E+0x14>
 8000cae:      	ldr	r0, [sp, #0x10]
 8000cb0:      	str	r0, [sp, #0x30]
 8000cb2:      	str	r0, [sp, #0x38]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000cb4:      	bl	#0xd28
 8000cb8:      	bl	#0xb00
;         let bits = self.register.get();
 8000cbc:      	str	r0, [sp, #0x34]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000cbe:      	str	r0, [sp, #0x28]
 8000cc0:      	str	r0, [sp, #0x2c]
 8000cc2:      	add	r0, sp, #0x28
 8000cc4:      	str	r0, [sp, #0x20]
 8000cc6:      	add	r0, sp, #0x2c
 8000cc8:      	str	r0, [sp, #0x24]
 8000cca:      	ldr	r0, [sp, #0x20]
 8000ccc:      	ldr	r1, [sp, #0x24]
 8000cce:      	bl	#0xac
 8000cd2:      	mov	r1, r0
 8000cd4:      	ldr	r0, [sp, #0x10]
 8000cd6:      	ldr	r1, [r1]
 8000cd8:      	str	r1, [sp, #0x8]
 8000cda:      	str	r0, [sp, #0x3c]
 8000cdc:      	str	r1, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000cde:      	bl	#0xcfe
 8000ce2:      	ldr	r1, [sp, #0x8]
 8000ce4:      	bl	#0xb08
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000ce8:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17h4edd3a50c044f028E+0x50>
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000cea:      	ldr	r0, [sp, #0xc]
 8000cec:      	bl	#0x8b0
 8000cf0:      	str	r0, [sp, #0x4]
 8000cf2:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17h4edd3a50c044f028E+0x5a>
 8000cf4:      	ldr	r0, [sp, #0x4]
 8000cf6:      	str	r0, [sp, #0x54]
 8000cf8:      	str	r0, [sp, #0x5c]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000cfa:      	bl	#0xce2
 8000cfe:      	bl	#0xaba
;         let bits = self.register.get();
 8000d02:      	str	r0, [sp, #0x58]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000d04:      	str	r0, [sp, #0x4c]
 8000d06:      	str	r0, [sp, #0x50]
 8000d08:      	add	r0, sp, #0x4c
 8000d0a:      	str	r0, [sp, #0x44]
 8000d0c:      	add	r0, sp, #0x50
 8000d0e:      	str	r0, [sp, #0x48]
 8000d10:      	ldr	r0, [sp, #0x44]
 8000d12:      	ldr	r1, [sp, #0x48]
 8000d14:      	bl	#0x1c
 8000d18:      	mov	r1, r0
 8000d1a:      	ldr	r0, [sp, #0x4]
 8000d1c:      	ldr	r1, [r1]
 8000d1e:      	str	r1, [sp]
 8000d20:      	str	r0, [sp, #0x60]
 8000d22:      	str	r1, [sp, #0x64]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000d24:      	bl	#0xcb8
 8000d28:      	ldr	r1, [sp]
 8000d2a:      	bl	#0xac2
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000d2e:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17h4edd3a50c044f028E+0x96>
;                             }
 8000d30:      	add	sp, #0x68
 8000d32:      	pop	{r7, pc}

08000d34 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h5ba139a093aa5e62E>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000d34:      	push	{r7, lr}
 8000d36:      	mov	r7, sp
 8000d38:      	sub	sp, #0x30
 8000d3a:      	str	r0, [sp, #0x8]
 8000d3c:      	str	r1, [sp, #0xc]
 8000d3e:      	str	r1, [sp, #0x14]
;         OT12_W { w: self }
 8000d40:      	str	r1, [sp, #0x10]
;     }
 8000d42:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000d44:      	str	r0, [sp]
 8000d46:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h5ba139a093aa5e62E+0x14>
 8000d48:      	ldr	r1, [sp]
 8000d4a:      	str	r1, [sp, #0x1c]
 8000d4c:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000d4e:      	strb	r0, [r7, #-21]
 8000d52:      	ldrb	r0, [r7, #-21]
 8000d56:      	str	r1, [sp, #0x20]
 8000d58:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 8000d5c:      	bl	#0x496
 8000d60:      	ldr	r1, [sp]
 8000d62:      	mov	r2, r0
 8000d64:      	str	r1, [sp, #0x28]
 8000d66:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
 8000d6a:      	ldr	r0, [r1]
 8000d6c:      	bic	r0, r0, #0x1000
 8000d70:      	orr.w	r0, r0, r2, lsl #12
 8000d74:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000d76:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h5ba139a093aa5e62E+0x44>
 8000d78:      	ldr	r0, [sp]
 8000d7a:      	add	sp, #0x30
 8000d7c:      	pop	{r7, pc}

08000d7e <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hc954ed5d4afc955eE>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000d7e:      	push	{r7, lr}
 8000d80:      	mov	r7, sp
 8000d82:      	sub	sp, #0x30
 8000d84:      	str	r0, [sp, #0x8]
 8000d86:      	str	r1, [sp, #0xc]
 8000d88:      	str	r1, [sp, #0x14]
;         MODER12_W { w: self }
 8000d8a:      	str	r1, [sp, #0x10]
;     }
 8000d8c:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000d8e:      	str	r0, [sp]
 8000d90:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hc954ed5d4afc955eE+0x14>
 8000d92:      	ldr	r1, [sp]
 8000d94:      	str	r1, [sp, #0x1c]
 8000d96:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8000d98:      	strb	r0, [r7, #-21]
 8000d9c:      	ldrb	r0, [r7, #-21]
 8000da0:      	str	r1, [sp, #0x20]
 8000da2:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 8000da6:      	bl	#0x4c8
 8000daa:      	ldr	r1, [sp]
 8000dac:      	mov	r2, r0
 8000dae:      	str	r1, [sp, #0x28]
 8000db0:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 24)) | (((value as u32) & 0x03) << 24);
 8000db4:      	ldr	r0, [r1]
 8000db6:      	bic	r0, r0, #0x3000000
 8000dba:      	and	r2, r2, #0x3
 8000dbe:      	orr.w	r0, r0, r2, lsl #24
 8000dc2:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000dc4:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hc954ed5d4afc955eE+0x48>
 8000dc6:      	ldr	r0, [sp]
 8000dc8:      	add	sp, #0x30
 8000dca:      	pop	{r7, pc}

08000dcc <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17h1839d04bb445ccaaE>:
;                             pub fn into_push_pull_output(
 8000dcc:      	push	{r7, lr}
 8000dce:      	mov	r7, sp
 8000dd0:      	sub	sp, #0x68
 8000dd2:      	str	r1, [sp, #0xc]
 8000dd4:      	str	r0, [sp, #0x18]
 8000dd6:      	str	r1, [sp, #0x1c]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000dd8:      	bl	#0x7b2
 8000ddc:      	str	r0, [sp, #0x10]
 8000dde:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17h1839d04bb445ccaaE+0x14>
 8000de0:      	ldr	r0, [sp, #0x10]
 8000de2:      	str	r0, [sp, #0x30]
 8000de4:      	str	r0, [sp, #0x38]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000de6:      	bl	#0xbf6
 8000dea:      	bl	#0x9ce
;         let bits = self.register.get();
 8000dee:      	str	r0, [sp, #0x34]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000df0:      	str	r0, [sp, #0x28]
 8000df2:      	str	r0, [sp, #0x2c]
 8000df4:      	add	r0, sp, #0x28
 8000df6:      	str	r0, [sp, #0x20]
 8000df8:      	add	r0, sp, #0x2c
 8000dfa:      	str	r0, [sp, #0x24]
 8000dfc:      	ldr	r0, [sp, #0x20]
 8000dfe:      	ldr	r1, [sp, #0x24]
 8000e00:      	bl	#0x62
 8000e04:      	mov	r1, r0
 8000e06:      	ldr	r0, [sp, #0x10]
 8000e08:      	ldr	r1, [r1]
 8000e0a:      	str	r1, [sp, #0x8]
 8000e0c:      	str	r0, [sp, #0x3c]
 8000e0e:      	str	r1, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000e10:      	bl	#0xbcc
 8000e14:      	ldr	r1, [sp, #0x8]
 8000e16:      	bl	#0x9d6
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000e1a:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17h1839d04bb445ccaaE+0x50>
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000e1c:      	ldr	r0, [sp, #0xc]
 8000e1e:      	bl	#0x77e
 8000e22:      	str	r0, [sp, #0x4]
 8000e24:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17h1839d04bb445ccaaE+0x5a>
 8000e26:      	ldr	r0, [sp, #0x4]
 8000e28:      	str	r0, [sp, #0x54]
 8000e2a:      	str	r0, [sp, #0x5c]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000e2c:      	bl	#0xbb0
 8000e30:      	bl	#0x988
;         let bits = self.register.get();
 8000e34:      	str	r0, [sp, #0x58]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000e36:      	str	r0, [sp, #0x4c]
 8000e38:      	str	r0, [sp, #0x50]
 8000e3a:      	add	r0, sp, #0x4c
 8000e3c:      	str	r0, [sp, #0x44]
 8000e3e:      	add	r0, sp, #0x50
 8000e40:      	str	r0, [sp, #0x48]
 8000e42:      	ldr	r0, [sp, #0x44]
 8000e44:      	ldr	r1, [sp, #0x48]
 8000e46:      	bl	#0x6a
 8000e4a:      	mov	r1, r0
 8000e4c:      	ldr	r0, [sp, #0x4]
 8000e4e:      	ldr	r1, [r1]
 8000e50:      	str	r1, [sp]
 8000e52:      	str	r0, [sp, #0x60]
 8000e54:      	str	r1, [sp, #0x64]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000e56:      	bl	#0xb86
 8000e5a:      	ldr	r1, [sp]
 8000e5c:      	bl	#0x990
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000e60:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17h1839d04bb445ccaaE+0x96>
;                             }
 8000e62:      	add	sp, #0x68
 8000e64:      	pop	{r7, pc}

08000e66 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h30836042cfb47513E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000e66:      	push	{r7, lr}
 8000e68:      	mov	r7, sp
 8000e6a:      	sub	sp, #0x30
 8000e6c:      	str	r0, [sp, #0x8]
 8000e6e:      	str	r1, [sp, #0xc]
 8000e70:      	str	r1, [sp, #0x14]
;         MODER13_W { w: self }
 8000e72:      	str	r1, [sp, #0x10]
;     }
 8000e74:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000e76:      	str	r0, [sp]
 8000e78:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h30836042cfb47513E+0x14>
 8000e7a:      	ldr	r1, [sp]
 8000e7c:      	str	r1, [sp, #0x1c]
 8000e7e:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8000e80:      	strb	r0, [r7, #-21]
 8000e84:      	ldrb	r0, [r7, #-21]
 8000e88:      	str	r1, [sp, #0x20]
 8000e8a:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 8000e8e:      	bl	#0x3e0
 8000e92:      	ldr	r1, [sp]
 8000e94:      	mov	r2, r0
 8000e96:      	str	r1, [sp, #0x28]
 8000e98:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 26)) | (((value as u32) & 0x03) << 26);
 8000e9c:      	ldr	r0, [r1]
 8000e9e:      	bic	r0, r0, #0xc000000
 8000ea2:      	and	r2, r2, #0x3
 8000ea6:      	orr.w	r0, r0, r2, lsl #26
 8000eaa:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000eac:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h30836042cfb47513E+0x48>
 8000eae:      	ldr	r0, [sp]
 8000eb0:      	add	sp, #0x30
 8000eb2:      	pop	{r7, pc}

08000eb4 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17he7565a634971632cE>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000eb4:      	push	{r7, lr}
 8000eb6:      	mov	r7, sp
 8000eb8:      	sub	sp, #0x30
 8000eba:      	str	r0, [sp, #0x8]
 8000ebc:      	str	r1, [sp, #0xc]
 8000ebe:      	str	r1, [sp, #0x14]
;         OT13_W { w: self }
 8000ec0:      	str	r1, [sp, #0x10]
;     }
 8000ec2:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000ec4:      	str	r0, [sp]
 8000ec6:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17he7565a634971632cE+0x14>
 8000ec8:      	ldr	r1, [sp]
 8000eca:      	str	r1, [sp, #0x1c]
 8000ecc:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000ece:      	strb	r0, [r7, #-21]
 8000ed2:      	ldrb	r0, [r7, #-21]
 8000ed6:      	str	r1, [sp, #0x20]
 8000ed8:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 8000edc:      	bl	#0x316
 8000ee0:      	ldr	r1, [sp]
 8000ee2:      	mov	r2, r0
 8000ee4:      	str	r1, [sp, #0x28]
 8000ee6:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
 8000eea:      	ldr	r0, [r1]
 8000eec:      	bic	r0, r0, #0x2000
 8000ef0:      	orr.w	r0, r0, r2, lsl #13
 8000ef4:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000ef6:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17he7565a634971632cE+0x44>
 8000ef8:      	ldr	r0, [sp]
 8000efa:      	add	sp, #0x30
 8000efc:      	pop	{r7, pc}

08000efe <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17hde7246be81c2a733E>:
;                             pub fn into_push_pull_output(
 8000efe:      	push	{r7, lr}
 8000f00:      	mov	r7, sp
 8000f02:      	sub	sp, #0x68
 8000f04:      	str	r1, [sp, #0xc]
 8000f06:      	str	r0, [sp, #0x18]
 8000f08:      	str	r1, [sp, #0x1c]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000f0a:      	bl	#0x680
 8000f0e:      	str	r0, [sp, #0x10]
 8000f10:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17hde7246be81c2a733E+0x14>
 8000f12:      	ldr	r0, [sp, #0x10]
 8000f14:      	str	r0, [sp, #0x30]
 8000f16:      	str	r0, [sp, #0x38]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000f18:      	bl	#0xac4
 8000f1c:      	bl	#0x89c
;         let bits = self.register.get();
 8000f20:      	str	r0, [sp, #0x34]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000f22:      	str	r0, [sp, #0x28]
 8000f24:      	str	r0, [sp, #0x2c]
 8000f26:      	add	r0, sp, #0x28
 8000f28:      	str	r0, [sp, #0x20]
 8000f2a:      	add	r0, sp, #0x2c
 8000f2c:      	str	r0, [sp, #0x24]
 8000f2e:      	ldr	r0, [sp, #0x20]
 8000f30:      	ldr	r1, [sp, #0x24]
 8000f32:      	bl	#0xac
 8000f36:      	mov	r1, r0
 8000f38:      	ldr	r0, [sp, #0x10]
 8000f3a:      	ldr	r1, [r1]
 8000f3c:      	str	r1, [sp, #0x8]
 8000f3e:      	str	r0, [sp, #0x3c]
 8000f40:      	str	r1, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000f42:      	bl	#0xa9a
 8000f46:      	ldr	r1, [sp, #0x8]
 8000f48:      	bl	#0x8a4
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000f4c:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17hde7246be81c2a733E+0x50>
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000f4e:      	ldr	r0, [sp, #0xc]
 8000f50:      	bl	#0x64c
 8000f54:      	str	r0, [sp, #0x4]
 8000f56:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17hde7246be81c2a733E+0x5a>
 8000f58:      	ldr	r0, [sp, #0x4]
 8000f5a:      	str	r0, [sp, #0x54]
 8000f5c:      	str	r0, [sp, #0x5c]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000f5e:      	bl	#0xa7e
 8000f62:      	bl	#0x856
;         let bits = self.register.get();
 8000f66:      	str	r0, [sp, #0x58]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000f68:      	str	r0, [sp, #0x4c]
 8000f6a:      	str	r0, [sp, #0x50]
 8000f6c:      	add	r0, sp, #0x4c
 8000f6e:      	str	r0, [sp, #0x44]
 8000f70:      	add	r0, sp, #0x50
 8000f72:      	str	r0, [sp, #0x48]
 8000f74:      	ldr	r0, [sp, #0x44]
 8000f76:      	ldr	r1, [sp, #0x48]
 8000f78:      	bl	#0x1c
 8000f7c:      	mov	r1, r0
 8000f7e:      	ldr	r0, [sp, #0x4]
 8000f80:      	ldr	r1, [r1]
 8000f82:      	str	r1, [sp]
 8000f84:      	str	r0, [sp, #0x60]
 8000f86:      	str	r1, [sp, #0x64]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000f88:      	bl	#0xa54
 8000f8c:      	ldr	r1, [sp]
 8000f8e:      	bl	#0x85e
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000f92:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17hde7246be81c2a733E+0x96>
;                             }
 8000f94:      	add	sp, #0x68
 8000f96:      	pop	{r7, pc}

08000f98 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h78125906140bb8d0E>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000f98:      	push	{r7, lr}
 8000f9a:      	mov	r7, sp
 8000f9c:      	sub	sp, #0x30
 8000f9e:      	str	r0, [sp, #0x8]
 8000fa0:      	str	r1, [sp, #0xc]
 8000fa2:      	str	r1, [sp, #0x14]
;         OT14_W { w: self }
 8000fa4:      	str	r1, [sp, #0x10]
;     }
 8000fa6:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000fa8:      	str	r0, [sp]
 8000faa:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h78125906140bb8d0E+0x14>
 8000fac:      	ldr	r1, [sp]
 8000fae:      	str	r1, [sp, #0x1c]
 8000fb0:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000fb2:      	strb	r0, [r7, #-21]
 8000fb6:      	ldrb	r0, [r7, #-21]
 8000fba:      	str	r1, [sp, #0x20]
 8000fbc:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 8000fc0:      	bl	#0x232
 8000fc4:      	ldr	r1, [sp]
 8000fc6:      	mov	r2, r0
 8000fc8:      	str	r1, [sp, #0x28]
 8000fca:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
 8000fce:      	ldr	r0, [r1]
 8000fd0:      	bic	r0, r0, #0x4000
 8000fd4:      	orr.w	r0, r0, r2, lsl #14
 8000fd8:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000fda:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h78125906140bb8d0E+0x44>
 8000fdc:      	ldr	r0, [sp]
 8000fde:      	add	sp, #0x30
 8000fe0:      	pop	{r7, pc}

08000fe2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h8680ae250bebe6b4E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000fe2:      	push	{r7, lr}
 8000fe4:      	mov	r7, sp
 8000fe6:      	sub	sp, #0x30
 8000fe8:      	str	r0, [sp, #0x8]
 8000fea:      	str	r1, [sp, #0xc]
 8000fec:      	str	r1, [sp, #0x14]
;         MODER14_W { w: self }
 8000fee:      	str	r1, [sp, #0x10]
;     }
 8000ff0:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000ff2:      	str	r0, [sp]
 8000ff4:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h8680ae250bebe6b4E+0x14>
 8000ff6:      	ldr	r1, [sp]
 8000ff8:      	str	r1, [sp, #0x1c]
 8000ffa:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8000ffc:      	strb	r0, [r7, #-21]
 8001000:      	ldrb	r0, [r7, #-21]
 8001004:      	str	r1, [sp, #0x20]
 8001006:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 800100a:      	bl	#0x264
 800100e:      	ldr	r1, [sp]
 8001010:      	mov	r2, r0
 8001012:      	str	r1, [sp, #0x28]
 8001014:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
 8001018:      	ldr	r0, [r1]
 800101a:      	bic	r0, r0, #0x30000000
 800101e:      	and	r2, r2, #0x3
 8001022:      	orr.w	r0, r0, r2, lsl #28
 8001026:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8001028:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h8680ae250bebe6b4E+0x48>
 800102a:      	ldr	r0, [sp]
 800102c:      	add	sp, #0x30
 800102e:      	pop	{r7, pc}

08001030 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17h258e7867062c92a6E>:
;                             pub fn into_push_pull_output(
 8001030:      	push	{r7, lr}
 8001032:      	mov	r7, sp
 8001034:      	sub	sp, #0x68
 8001036:      	str	r1, [sp, #0xc]
 8001038:      	str	r0, [sp, #0x18]
 800103a:      	str	r1, [sp, #0x1c]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 800103c:      	bl	#0x54e
 8001040:      	str	r0, [sp, #0x10]
 8001042:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17h258e7867062c92a6E+0x14>
 8001044:      	ldr	r0, [sp, #0x10]
 8001046:      	str	r0, [sp, #0x30]
 8001048:      	str	r0, [sp, #0x38]
;         unsafe { ptr::read_volatile(self.value.get()) }
 800104a:      	bl	#0x992
 800104e:      	bl	#0x76a
;         let bits = self.register.get();
 8001052:      	str	r0, [sp, #0x34]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8001054:      	str	r0, [sp, #0x28]
 8001056:      	str	r0, [sp, #0x2c]
 8001058:      	add	r0, sp, #0x28
 800105a:      	str	r0, [sp, #0x20]
 800105c:      	add	r0, sp, #0x2c
 800105e:      	str	r0, [sp, #0x24]
 8001060:      	ldr	r0, [sp, #0x20]
 8001062:      	ldr	r1, [sp, #0x24]
 8001064:      	bl	#0xac
 8001068:      	mov	r1, r0
 800106a:      	ldr	r0, [sp, #0x10]
 800106c:      	ldr	r1, [r1]
 800106e:      	str	r1, [sp, #0x8]
 8001070:      	str	r0, [sp, #0x3c]
 8001072:      	str	r1, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8001074:      	bl	#0x968
 8001078:      	ldr	r1, [sp, #0x8]
 800107a:      	bl	#0x772
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 800107e:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17h258e7867062c92a6E+0x50>
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8001080:      	ldr	r0, [sp, #0xc]
 8001082:      	bl	#0x51a
 8001086:      	str	r0, [sp, #0x4]
 8001088:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17h258e7867062c92a6E+0x5a>
 800108a:      	ldr	r0, [sp, #0x4]
 800108c:      	str	r0, [sp, #0x54]
 800108e:      	str	r0, [sp, #0x5c]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8001090:      	bl	#0x94c
 8001094:      	bl	#0x724
;         let bits = self.register.get();
 8001098:      	str	r0, [sp, #0x58]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 800109a:      	str	r0, [sp, #0x4c]
 800109c:      	str	r0, [sp, #0x50]
 800109e:      	add	r0, sp, #0x4c
 80010a0:      	str	r0, [sp, #0x44]
 80010a2:      	add	r0, sp, #0x50
 80010a4:      	str	r0, [sp, #0x48]
 80010a6:      	ldr	r0, [sp, #0x44]
 80010a8:      	ldr	r1, [sp, #0x48]
 80010aa:      	bl	#0x1c
 80010ae:      	mov	r1, r0
 80010b0:      	ldr	r0, [sp, #0x4]
 80010b2:      	ldr	r1, [r1]
 80010b4:      	str	r1, [sp]
 80010b6:      	str	r0, [sp, #0x60]
 80010b8:      	str	r1, [sp, #0x64]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 80010ba:      	bl	#0x922
 80010be:      	ldr	r1, [sp]
 80010c0:      	bl	#0x72c
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80010c4:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17h258e7867062c92a6E+0x96>
;                             }
 80010c6:      	add	sp, #0x68
 80010c8:      	pop	{r7, pc}

080010ca <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h26d5d17a082c2089E>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80010ca:      	push	{r7, lr}
 80010cc:      	mov	r7, sp
 80010ce:      	sub	sp, #0x30
 80010d0:      	str	r0, [sp, #0x8]
 80010d2:      	str	r1, [sp, #0xc]
 80010d4:      	str	r1, [sp, #0x14]
;         OT15_W { w: self }
 80010d6:      	str	r1, [sp, #0x10]
;     }
 80010d8:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80010da:      	str	r0, [sp]
 80010dc:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h26d5d17a082c2089E+0x14>
 80010de:      	ldr	r1, [sp]
 80010e0:      	str	r1, [sp, #0x1c]
 80010e2:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 80010e4:      	strb	r0, [r7, #-21]
 80010e8:      	ldrb	r0, [r7, #-21]
 80010ec:      	str	r1, [sp, #0x20]
 80010ee:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 80010f2:      	bl	#0x100
 80010f6:      	ldr	r1, [sp]
 80010f8:      	mov	r2, r0
 80010fa:      	str	r1, [sp, #0x28]
 80010fc:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
 8001100:      	ldr	r0, [r1]
 8001102:      	bic	r0, r0, #0x8000
 8001106:      	orr.w	r0, r0, r2, lsl #15
 800110a:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 800110c:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h26d5d17a082c2089E+0x44>
 800110e:      	ldr	r0, [sp]
 8001110:      	add	sp, #0x30
 8001112:      	pop	{r7, pc}

08001114 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h3629e48ba4761645E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8001114:      	push	{r7, lr}
 8001116:      	mov	r7, sp
 8001118:      	sub	sp, #0x30
 800111a:      	str	r0, [sp, #0x8]
 800111c:      	str	r1, [sp, #0xc]
 800111e:      	str	r1, [sp, #0x14]
;         MODER15_W { w: self }
 8001120:      	str	r1, [sp, #0x10]
;     }
 8001122:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8001124:      	str	r0, [sp]
 8001126:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h3629e48ba4761645E+0x14>
 8001128:      	ldr	r1, [sp]
 800112a:      	str	r1, [sp, #0x1c]
 800112c:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 800112e:      	strb	r0, [r7, #-21]
 8001132:      	ldrb	r0, [r7, #-21]
 8001136:      	str	r1, [sp, #0x20]
 8001138:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 800113c:      	bl	#0x132
 8001140:      	ldr	r1, [sp]
 8001142:      	mov	r2, r0
 8001144:      	str	r1, [sp, #0x28]
 8001146:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 30)) | (((value as u32) & 0x03) << 30);
 800114a:      	ldr	r0, [r1]
 800114c:      	bic	r0, r0, #0xc0000000
 8001150:      	orr.w	r0, r0, r2, lsl #30
 8001154:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8001156:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h3629e48ba4761645E+0x44>
 8001158:      	ldr	r0, [sp]
 800115a:      	add	sp, #0x30
 800115c:      	pop	{r7, pc}

0800115e <_ZN13stm32f3xx_hal4gpio5gpioe50PE8$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h1349d41fa7f6666dE>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 800115e:      	sub	sp, #0x8
 8001160:      	movs	r0, #0x8
; gpio!([
 8001162:      	strb.w	r0, [sp, #0x3]
;                             }
 8001166:      	ldrb.w	r0, [sp, #0x3]
 800116a:      	add	sp, #0x8
 800116c:      	bx	lr

0800116e <_ZN13stm32f3xx_hal4gpio5gpioe50PE9$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h99c49010504444edE>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 800116e:      	sub	sp, #0x8
 8001170:      	movs	r0, #0x9
; gpio!([
 8001172:      	strb.w	r0, [sp, #0x3]
;                             }
 8001176:      	ldrb.w	r0, [sp, #0x3]
 800117a:      	add	sp, #0x8
 800117c:      	bx	lr

0800117e <_ZN13stm32f3xx_hal4gpio5gpioe51PE10$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17hbbcc01b3f271bbf0E>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 800117e:      	sub	sp, #0x8
 8001180:      	movs	r0, #0xa
; gpio!([
 8001182:      	strb.w	r0, [sp, #0x3]
;                             }
 8001186:      	ldrb.w	r0, [sp, #0x3]
 800118a:      	add	sp, #0x8
 800118c:      	bx	lr

0800118e <_ZN13stm32f3xx_hal4gpio5gpioe51PE11$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17hadedabd709c4f72fE>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 800118e:      	sub	sp, #0x8
 8001190:      	movs	r0, #0xb
; gpio!([
 8001192:      	strb.w	r0, [sp, #0x3]
;                             }
 8001196:      	ldrb.w	r0, [sp, #0x3]
 800119a:      	add	sp, #0x8
 800119c:      	bx	lr

0800119e <_ZN13stm32f3xx_hal4gpio5gpioe51PE12$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17ha3dba21d66247406E>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 800119e:      	sub	sp, #0x8
 80011a0:      	movs	r0, #0xc
; gpio!([
 80011a2:      	strb.w	r0, [sp, #0x3]
;                             }
 80011a6:      	ldrb.w	r0, [sp, #0x3]
 80011aa:      	add	sp, #0x8
 80011ac:      	bx	lr

080011ae <_ZN13stm32f3xx_hal4gpio5gpioe51PE13$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17he350366546709c62E>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 80011ae:      	sub	sp, #0x8
 80011b0:      	movs	r0, #0xd
; gpio!([
 80011b2:      	strb.w	r0, [sp, #0x3]
;                             }
 80011b6:      	ldrb.w	r0, [sp, #0x3]
 80011ba:      	add	sp, #0x8
 80011bc:      	bx	lr

080011be <_ZN13stm32f3xx_hal4gpio5gpioe51PE14$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h8041c63df2886327E>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 80011be:      	sub	sp, #0x8
 80011c0:      	movs	r0, #0xe
; gpio!([
 80011c2:      	strb.w	r0, [sp, #0x3]
;                             }
 80011c6:      	ldrb.w	r0, [sp, #0x3]
 80011ca:      	add	sp, #0x8
 80011cc:      	bx	lr

080011ce <_ZN13stm32f3xx_hal4gpio5gpioe51PE15$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h7359f01be23b2016E>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 80011ce:      	sub	sp, #0x8
 80011d0:      	movs	r0, #0xf
; gpio!([
 80011d2:      	strb.w	r0, [sp, #0x3]
;                             }
 80011d6:      	ldrb.w	r0, [sp, #0x3]
 80011da:      	add	sp, #0x8
 80011dc:      	bx	lr

080011de <<T as switch_hal::IntoSwitch>::into_switch::h31c1bd74ab6c713a>:
;     fn into_switch<ActiveLevel>(self) -> Switch<Self, ActiveLevel> {
 80011de:      	push	{r7, lr}
 80011e0:      	mov	r7, sp
 80011e2:      	sub	sp, #0x8
 80011e4:      	strb	r0, [r7, #-1]
;         Switch::<Self, ActiveLevel>::new(self)
 80011e8:      	bl	#0x62
 80011ec:      	str	r0, [sp]
 80011ee:      	b	#-0x2 <<T as switch_hal::IntoSwitch>::into_switch::h31c1bd74ab6c713a+0x12>
;     }
 80011f0:      	ldr	r0, [sp]
 80011f2:      	add	sp, #0x8
 80011f4:      	pop	{r7, pc}

080011f6 <<T as core::convert::Into<U>>::into::he73e76454479faa4>:
;     fn into(self) -> U {
 80011f6:      	sub	sp, #0x8
 80011f8:      	mov	r1, r0
 80011fa:      	str	r1, [sp]
 80011fc:      	strb.w	r0, [sp, #0x6]
 8001200:      	strb.w	r0, [sp, #0x7]
;         U::from(self)
 8001204:      	b	#-0x2 <<T as core::convert::Into<U>>::into::he73e76454479faa4+0x10>
;     }
 8001206:      	ldr	r0, [sp]
 8001208:      	and	r0, r0, #0x1
 800120c:      	add	sp, #0x8
 800120e:      	bx	lr

08001210 <cortex_m::peripheral::Peripherals::take::{{closure}}::haa1ef4a4032f7b68>:
;         interrupt::free(|_| match cortex_m_0_7::peripheral::Peripherals::take() {
 8001210:      	push	{r7, lr}
 8001212:      	mov	r7, sp
 8001214:      	sub	sp, #0x10
 8001216:      	str	r0, [sp, #0xc]
 8001218:      	bl	#-0xcde
 800121c:      	strb	r0, [r7, #-9]
 8001220:      	b	#-0x2 <cortex_m::peripheral::Peripherals::take::{{closure}}::haa1ef4a4032f7b68+0x12>
;             Some(_) => { Some(unsafe { Peripherals::steal() }) },
 8001222:      	ldrb	r1, [r7, #-9]
 8001226:      	lsls	r0, r1, #0x1f
 8001228:      	cbz	r0, #0x2
 800122a:      	b	#-0x2 <cortex_m::peripheral::Peripherals::take::{{closure}}::haa1ef4a4032f7b68+0x1c>
 800122c:      	b	#0x8 <cortex_m::peripheral::Peripherals::take::{{closure}}::haa1ef4a4032f7b68+0x28>
 800122e:      	movs	r0, #0x0
;             None    => None,
 8001230:      	strb	r0, [r7, #-10]
;         interrupt::free(|_| match cortex_m_0_7::peripheral::Peripherals::take() {
 8001234:      	b	#0xe <cortex_m::peripheral::Peripherals::take::{{closure}}::haa1ef4a4032f7b68+0x36>
 8001236:      	trap
;             Some(_) => { Some(unsafe { Peripherals::steal() }) },
 8001238:      	bl	#-0xd0c
 800123c:      	b	#-0x2 <cortex_m::peripheral::Peripherals::take::{{closure}}::haa1ef4a4032f7b68+0x2e>
 800123e:      	movs	r0, #0x1
;             Some(_) => { Some(unsafe { Peripherals::steal() }) },
 8001240:      	strb	r0, [r7, #-10]
;         interrupt::free(|_| match cortex_m_0_7::peripheral::Peripherals::take() {
 8001244:      	b	#-0x2 <cortex_m::peripheral::Peripherals::take::{{closure}}::haa1ef4a4032f7b68+0x36>
;         })
 8001246:      	ldrb	r0, [r7, #-10]
 800124a:      	add	sp, #0x10
 800124c:      	pop	{r7, pc}

0800124e <switch_hal::Switch<IoPin,ActiveLevel>::new::h59a1e55a1f0f3bad>:
;     pub fn new(pin: IoPin) -> Self {
 800124e:      	sub	sp, #0x4
 8001250:      	strb.w	r0, [sp, #0x3]
;         Switch {
 8001254:      	strb.w	r0, [sp, #0x2]
;     }
 8001258:      	ldrb.w	r0, [sp, #0x2]
 800125c:      	add	sp, #0x4
 800125e:      	bx	lr

08001260 <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::hf978bc2cf0355470>:
;     fn off(&mut self) -> Result<(), Self::Error> {
 8001260:      	push	{r7, lr}
 8001262:      	mov	r7, sp
 8001264:      	sub	sp, #0x8
 8001266:      	str	r0, [sp, #0x4]
;         self.pin.set_low()
 8001268:      	bl	#-0xb58
 800126c:      	b	#-0x2 <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::hf978bc2cf0355470+0xe>
;     }
 800126e:      	add	sp, #0x8
 8001270:      	pop	{r7, pc}

08001272 <<T as core::convert::Into<U>>::into::h0203e0712c15adcd>:
;     fn into(self) -> U {
 8001272:      	sub	sp, #0x8
 8001274:      	mov	r1, r0
 8001276:      	str	r1, [sp]
 8001278:      	strb.w	r0, [sp, #0x6]
 800127c:      	strb.w	r0, [sp, #0x7]
;         U::from(self)
 8001280:      	b	#-0x2 <<T as core::convert::Into<U>>::into::h0203e0712c15adcd+0x10>
;     }
 8001282:      	ldr	r0, [sp]
 8001284:      	add	sp, #0x8
 8001286:      	bx	lr

08001288 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::hcddeba534c6439d2>:
; #[derive(Clone, Copy, Debug, Eq, PartialEq)]
 8001288:      	sub	sp, #0x14
 800128a:      	str	r0, [sp, #0x4]
 800128c:      	str	r1, [sp, #0x8]
 800128e:      	ldrb	r0, [r0]
 8001290:      	str	r0, [sp, #0xc]
 8001292:      	ldrb	r1, [r1]
 8001294:      	str	r1, [sp, #0x10]
 8001296:      	cmp	r0, r1
 8001298:      	bne	#0x8 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::hcddeba534c6439d2+0x1c>
 800129a:      	b	#-0x2 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::hcddeba534c6439d2+0x14>
 800129c:      	movs	r0, #0x1
; #[derive(Clone, Copy, Debug, Eq, PartialEq)]
 800129e:      	strb.w	r0, [sp, #0x3]
 80012a2:      	b	#0x6 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::hcddeba534c6439d2+0x24>
 80012a4:      	movs	r0, #0x0
; #[derive(Clone, Copy, Debug, Eq, PartialEq)]
 80012a6:      	strb.w	r0, [sp, #0x3]
 80012aa:      	b	#-0x2 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::hcddeba534c6439d2+0x24>
 80012ac:      	ldrb.w	r0, [sp, #0x3]
 80012b0:      	lsls	r0, r0, #0x1f
 80012b2:      	cbz	r0, #0x8
 80012b4:      	b	#-0x2 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::hcddeba534c6439d2+0x2e>
 80012b6:      	movs	r0, #0x1
; #[derive(Clone, Copy, Debug, Eq, PartialEq)]
 80012b8:      	strb.w	r0, [sp, #0x2]
 80012bc:      	b	#0x6 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::hcddeba534c6439d2+0x3e>
 80012be:      	movs	r0, #0x0
; #[derive(Clone, Copy, Debug, Eq, PartialEq)]
 80012c0:      	strb.w	r0, [sp, #0x2]
 80012c4:      	b	#-0x2 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::hcddeba534c6439d2+0x3e>
 80012c6:      	ldrb.w	r0, [sp, #0x2]
 80012ca:      	add	sp, #0x14
 80012cc:      	bx	lr

080012ce <cortex_m::register::primask::read::hc49be7dd45a434ab>:
; pub fn read() -> Primask {
 80012ce:      	push	{r7, lr}
 80012d0:      	mov	r7, sp
 80012d2:      	sub	sp, #0x10
;     let r: u32 = call_asm!(__primask_r() -> u32);
 80012d4:      	bl	#0x7aa
 80012d8:      	mov	r1, r0
 80012da:      	str	r1, [sp, #0x4]
 80012dc:      	str	r0, [sp, #0xc]
 80012de:      	b	#-0x2 <cortex_m::register::primask::read::hc49be7dd45a434ab+0x12>
;     if r & (1 << 0) == (1 << 0) {
 80012e0:      	ldr	r0, [sp, #0x4]
 80012e2:      	lsls	r0, r0, #0x1f
 80012e4:      	cbz	r0, #0x8
 80012e6:      	b	#-0x2 <cortex_m::register::primask::read::hc49be7dd45a434ab+0x1a>
 80012e8:      	movs	r0, #0x1
;         Primask::Inactive
 80012ea:      	strb	r0, [r7, #-5]
;     if r & (1 << 0) == (1 << 0) {
 80012ee:      	b	#0x6 <cortex_m::register::primask::read::hc49be7dd45a434ab+0x2a>
 80012f0:      	movs	r0, #0x0
;         Primask::Active
 80012f2:      	strb	r0, [r7, #-5]
;     if r & (1 << 0) == (1 << 0) {
 80012f6:      	b	#-0x2 <cortex_m::register::primask::read::hc49be7dd45a434ab+0x2a>
; }
 80012f8:      	ldrb	r0, [r7, #-5]
 80012fc:      	add	sp, #0x10
 80012fe:      	pop	{r7, pc}

08001300 <cortex_m::register::primask::Primask::is_active::ha504ffeca3c18ef9>:
;     pub fn is_active(self) -> bool {
 8001300:      	push	{r7, lr}
 8001302:      	mov	r7, sp
 8001304:      	sub	sp, #0x8
 8001306:      	strb	r0, [r7, #-1]
;         self == Primask::Active
 800130a:      	movw	r1, #0x3653
 800130e:      	movt	r1, #0x800
 8001312:      	subs	r0, r7, #0x1
 8001314:      	bl	#-0x90
 8001318:      	str	r0, [sp]
 800131a:      	b	#-0x2 <cortex_m::register::primask::Primask::is_active::ha504ffeca3c18ef9+0x1c>
;     }
 800131c:      	ldr	r0, [sp]
 800131e:      	and	r0, r0, #0x1
 8001322:      	add	sp, #0x8
 8001324:      	pop	{r7, pc}

08001326 <<stm32f3::stm32f303::RCC as stm32f3xx_hal::rcc::RccExt>::constrain::h2d860200befd72a5>:
;     fn constrain(self) -> Rcc {
 8001326:      	push	{r4, r5, r7, lr}
 8001328:      	add	r7, sp, #0x8
 800132a:      	sub	sp, #0x38
;             cfgr: CFGR::default(),
 800132c:      	str	r0, [sp, #0x4]
 800132e:      	add	r0, sp, #0x8
 8001330:      	bl	#0x12e
 8001334:      	b	#-0x2 <<stm32f3::stm32f303::RCC as stm32f3xx_hal::rcc::RccExt>::constrain::h2d860200befd72a5+0x10>
 8001336:      	ldr	r0, [sp, #0x4]
 8001338:      	add	r1, sp, #0x8
;         Rcc {
 800133a:      	ldm.w	r1!, {r2, r3, r4, r12, lr}
 800133e:      	stm.w	r0!, {r2, r3, r4, r12, lr}
 8001342:      	ldm.w	r1, {r2, r3, r4, r5, r12, lr}
 8001346:      	stm.w	r0, {r2, r3, r4, r5, r12, lr}
;     }
 800134a:      	add	sp, #0x38
 800134c:      	pop	{r4, r5, r7, pc}

0800134e <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17h13a2b093c6fd5846E>:
;                         fn split(self, ahb: &mut AHB) -> Parts {
 800134e:      	push	{r7, lr}
 8001350:      	mov	r7, sp
 8001352:      	sub	sp, #0x90
 8001354:      	str	r0, [sp, #0x14]
 8001356:      	str	r0, [sp, #0x20]
;                             ahb.enr().modify(|_, w| w.$iopxenr().set_bit());
 8001358:      	bl	#0xe2
 800135c:      	str	r0, [sp, #0x18]
 800135e:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17h13a2b093c6fd5846E+0x12>
 8001360:      	ldr	r0, [sp, #0x18]
 8001362:      	str	r0, [sp, #0x34]
 8001364:      	str	r0, [sp, #0x3c]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8001366:      	bl	#0x676
 800136a:      	bl	#0x44e
;         let bits = self.register.get();
 800136e:      	str	r0, [sp, #0x38]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8001370:      	str	r0, [sp, #0x2c]
 8001372:      	str	r0, [sp, #0x30]
 8001374:      	add	r0, sp, #0x2c
 8001376:      	str	r0, [sp, #0x24]
 8001378:      	add	r0, sp, #0x30
 800137a:      	str	r0, [sp, #0x28]
 800137c:      	ldr	r0, [sp, #0x24]
 800137e:      	ldr	r1, [sp, #0x28]
 8001380:      	bl	#0x186
 8001384:      	mov	r1, r0
 8001386:      	ldr	r0, [sp, #0x18]
 8001388:      	ldr	r1, [r1]
 800138a:      	str	r1, [sp, #0x10]
 800138c:      	str	r0, [sp, #0x40]
 800138e:      	str	r1, [sp, #0x44]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8001390:      	bl	#0x64c
 8001394:      	ldr	r1, [sp, #0x10]
 8001396:      	bl	#0x456
;                             ahb.enr().modify(|_, w| w.$iopxenr().set_bit());
 800139a:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17h13a2b093c6fd5846E+0x4e>
;                             ahb.rstr().modify(|_, w| w.$iopxrst().set_bit());
 800139c:      	ldr	r0, [sp, #0x14]
 800139e:      	bl	#0xae
 80013a2:      	str	r0, [sp, #0xc]
 80013a4:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17h13a2b093c6fd5846E+0x58>
 80013a6:      	ldr	r0, [sp, #0xc]
 80013a8:      	str	r0, [sp, #0x58]
 80013aa:      	str	r0, [sp, #0x60]
;         unsafe { ptr::read_volatile(self.value.get()) }
 80013ac:      	bl	#0x630
 80013b0:      	bl	#0x408
;         let bits = self.register.get();
 80013b4:      	str	r0, [sp, #0x5c]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 80013b6:      	str	r0, [sp, #0x50]
 80013b8:      	str	r0, [sp, #0x54]
 80013ba:      	add	r0, sp, #0x50
 80013bc:      	str	r0, [sp, #0x48]
 80013be:      	add	r0, sp, #0x54
 80013c0:      	str	r0, [sp, #0x4c]
 80013c2:      	ldr	r0, [sp, #0x48]
 80013c4:      	ldr	r1, [sp, #0x4c]
 80013c6:      	bl	#0x16c
 80013ca:      	mov	r1, r0
 80013cc:      	ldr	r0, [sp, #0xc]
 80013ce:      	ldr	r1, [r1]
 80013d0:      	str	r1, [sp, #0x8]
 80013d2:      	str	r0, [sp, #0x64]
 80013d4:      	str	r1, [sp, #0x68]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 80013d6:      	bl	#0x606
 80013da:      	ldr	r1, [sp, #0x8]
 80013dc:      	bl	#0x410
;                             ahb.rstr().modify(|_, w| w.$iopxrst().set_bit());
 80013e0:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17h13a2b093c6fd5846E+0x94>
;                             ahb.rstr().modify(|_, w| w.$iopxrst().clear_bit());
 80013e2:      	ldr	r0, [sp, #0x14]
 80013e4:      	bl	#0x68
 80013e8:      	str	r0, [sp, #0x4]
 80013ea:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17h13a2b093c6fd5846E+0x9e>
 80013ec:      	ldr	r0, [sp, #0x4]
 80013ee:      	str	r0, [sp, #0x7c]
 80013f0:      	str	r0, [sp, #0x84]
;         unsafe { ptr::read_volatile(self.value.get()) }
 80013f2:      	bl	#0x5ea
 80013f6:      	bl	#0x3c2
;         let bits = self.register.get();
 80013fa:      	str	r0, [sp, #0x80]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 80013fc:      	str	r0, [sp, #0x74]
 80013fe:      	str	r0, [sp, #0x78]
 8001400:      	add	r0, sp, #0x74
 8001402:      	str	r0, [sp, #0x6c]
 8001404:      	add	r0, sp, #0x78
 8001406:      	str	r0, [sp, #0x70]
 8001408:      	ldr	r0, [sp, #0x6c]
 800140a:      	ldr	r1, [sp, #0x70]
 800140c:      	bl	#0x152
 8001410:      	mov	r1, r0
 8001412:      	ldr	r0, [sp, #0x4]
 8001414:      	ldr	r1, [r1]
 8001416:      	str	r1, [sp]
 8001418:      	str	r0, [sp, #0x88]
 800141a:      	str	r1, [sp, #0x8c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 800141c:      	bl	#0x5c0
 8001420:      	ldr	r1, [sp]
 8001422:      	bl	#0x3ca
;                             ahb.rstr().modify(|_, w| w.$iopxrst().clear_bit());
 8001426:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17h13a2b093c6fd5846E+0xda>
;                         }
 8001428:      	add	sp, #0x90
 800142a:      	pop	{r7, pc}

0800142c <<core::option::Option<T> as core::default::Default>::default::hd6e42ead6bee13d6>:
;     fn default() -> Option<T> {
 800142c:      	sub	sp, #0x8
 800142e:      	movs	r0, #0x0
;         None
 8001430:      	str	r0, [sp]
;     }
 8001432:      	ldr	r0, [sp]
 8001434:      	ldr	r1, [sp, #0x4]
 8001436:      	add	sp, #0x8
 8001438:      	bx	lr

0800143a <<bool as core::default::Default>::default::h448c868985adace7>:
;             fn default() -> $t {
 800143a:      	movs	r0, #0x0
;             }
 800143c:      	bx	lr

0800143e <stm32f3xx_hal::rcc::AHB::enr::h2478b7f43548c41c>:
;     pub(crate) fn enr(&mut self) -> &rcc::AHBENR {
 800143e:      	sub	sp, #0x4
 8001440:      	str	r0, [sp]
;         unsafe { &(*RCC::ptr()).ahbenr }
 8001442:      	b	#-0x2 <stm32f3xx_hal::rcc::AHB::enr::h2478b7f43548c41c+0x6>
 8001444:      	movw	r0, #0x1014
 8001448:      	movt	r0, #0x4002
;     }
 800144c:      	add	sp, #0x4
 800144e:      	bx	lr

08001450 <stm32f3xx_hal::rcc::AHB::rstr::h6ca979759c6283d7>:
;     pub(crate) fn rstr(&mut self) -> &rcc::AHBRSTR {
 8001450:      	sub	sp, #0x4
 8001452:      	str	r0, [sp]
;         unsafe { &(*RCC::ptr()).ahbrstr }
 8001454:      	b	#-0x2 <stm32f3xx_hal::rcc::AHB::rstr::h6ca979759c6283d7+0x6>
 8001456:      	movw	r0, #0x1028
 800145a:      	movt	r0, #0x4002
;     }
 800145e:      	add	sp, #0x4
 8001460:      	bx	lr

08001462 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h3ba3e2560911e646>:
; #[derive(Default)]
 8001462:      	push	{r4, r5, r6, r7, lr}
 8001464:      	add	r7, sp, #0xc
 8001466:      	push.w	{r8, r9, r10, r11}
 800146a:      	sub	sp, #0x34
;     hse: Option<u32>,
 800146c:      	str	r0, [sp, #0x28]
 800146e:      	bl	#-0x46
 8001472:      	str	r0, [sp, #0x2c]
 8001474:      	str	r1, [sp, #0x30]
 8001476:      	b	#-0x2 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h3ba3e2560911e646+0x16>
;     hse_bypass: bool,
 8001478:      	bl	#-0x42
 800147c:      	str	r0, [sp, #0x24]
 800147e:      	b	#-0x2 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h3ba3e2560911e646+0x1e>
;     css: bool,
 8001480:      	bl	#-0x4a
 8001484:      	str	r0, [sp, #0x20]
 8001486:      	b	#-0x2 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h3ba3e2560911e646+0x26>
;     hclk: Option<u32>,
 8001488:      	bl	#-0x60
 800148c:      	str	r0, [sp, #0x18]
 800148e:      	str	r1, [sp, #0x1c]
 8001490:      	b	#-0x2 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h3ba3e2560911e646+0x30>
;     pclk1: Option<u32>,
 8001492:      	bl	#-0x6a
 8001496:      	str	r0, [sp, #0x10]
 8001498:      	str	r1, [sp, #0x14]
 800149a:      	b	#-0x2 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h3ba3e2560911e646+0x3a>
;     pclk2: Option<u32>,
 800149c:      	bl	#-0x74
 80014a0:      	str	r0, [sp, #0x8]
 80014a2:      	str	r1, [sp, #0xc]
 80014a4:      	b	#-0x2 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h3ba3e2560911e646+0x44>
;     sysclk: Option<u32>,
 80014a6:      	bl	#-0x7e
 80014aa:      	str	r0, [sp]
 80014ac:      	str	r1, [sp, #0x4]
 80014ae:      	b	#-0x2 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h3ba3e2560911e646+0x4e>
; #[derive(Default)]
 80014b0:      	ldr	r0, [sp, #0x4]
 80014b2:      	ldr	r1, [sp, #0x28]
 80014b4:      	ldr	r2, [sp]
 80014b6:      	ldr	r3, [sp, #0xc]
 80014b8:      	ldr.w	r12, [sp, #0x8]
 80014bc:      	ldr.w	lr, [sp, #0x14]
 80014c0:      	ldr	r4, [sp, #0x10]
 80014c2:      	ldr	r5, [sp, #0x1c]
 80014c4:      	ldr	r6, [sp, #0x18]
 80014c6:      	ldr.w	r8, [sp, #0x20]
 80014ca:      	ldr.w	r9, [sp, #0x24]
 80014ce:      	ldr.w	r10, [sp, #0x30]
 80014d2:      	ldr.w	r11, [sp, #0x2c]
 80014d6:      	str.w	r11, [r1]
 80014da:      	str.w	r10, [r1, #0x4]
 80014de:      	and	r9, r9, #0x1
 80014e2:      	strb.w	r9, [r1, #0x28]
 80014e6:      	and	r8, r8, #0x1
 80014ea:      	strb.w	r8, [r1, #0x29]
 80014ee:      	str	r6, [r1, #0x8]
 80014f0:      	str	r5, [r1, #0xc]
 80014f2:      	str	r4, [r1, #0x10]
 80014f4:      	str.w	lr, [r1, #0x14]
 80014f8:      	str.w	r12, [r1, #0x18]
 80014fc:      	str	r3, [r1, #0x1c]
 80014fe:      	str	r2, [r1, #0x20]
 8001500:      	str	r0, [r1, #0x24]
 8001502:      	add	sp, #0x34
 8001504:      	pop.w	{r8, r9, r10, r11}
 8001508:      	pop	{r4, r5, r6, r7, pc}

0800150a <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h83ec00d3aead1aadE>:
;                             ahb.enr().modify(|_, w| w.$iopxenr().set_bit());
 800150a:      	sub	sp, #0x24
 800150c:      	str	r0, [sp, #0x8]
 800150e:      	str	r1, [sp, #0xc]
 8001510:      	str	r1, [sp, #0x14]
;         IOPEEN_W { w: self }
 8001512:      	str	r1, [sp, #0x10]
;     }
 8001514:      	ldr	r0, [sp, #0x10]
;                             ahb.enr().modify(|_, w| w.$iopxenr().set_bit());
 8001516:      	str	r0, [sp]
 8001518:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h83ec00d3aead1aadE+0x10>
 800151a:      	ldr	r1, [sp]
 800151c:      	str	r1, [sp, #0x18]
 800151e:      	str	r1, [sp, #0x1c]
 8001520:      	movs	r0, #0x1
 8001522:      	strb.w	r0, [sp, #0x23]
;         self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
 8001526:      	ldr	r0, [r1]
 8001528:      	orr	r0, r0, #0x200000
 800152c:      	str	r0, [r1]
;                             ahb.enr().modify(|_, w| w.$iopxenr().set_bit());
 800152e:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h83ec00d3aead1aadE+0x26>
 8001530:      	ldr	r0, [sp]
 8001532:      	add	sp, #0x24
 8001534:      	bx	lr

08001536 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h5301d8d7096c36b4E>:
;                             ahb.rstr().modify(|_, w| w.$iopxrst().set_bit());
 8001536:      	sub	sp, #0x24
 8001538:      	str	r0, [sp, #0x8]
 800153a:      	str	r1, [sp, #0xc]
 800153c:      	str	r1, [sp, #0x14]
;         IOPERST_W { w: self }
 800153e:      	str	r1, [sp, #0x10]
;     }
 8001540:      	ldr	r0, [sp, #0x10]
;                             ahb.rstr().modify(|_, w| w.$iopxrst().set_bit());
 8001542:      	str	r0, [sp]
 8001544:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h5301d8d7096c36b4E+0x10>
 8001546:      	ldr	r1, [sp]
 8001548:      	str	r1, [sp, #0x18]
 800154a:      	str	r1, [sp, #0x1c]
 800154c:      	movs	r0, #0x1
 800154e:      	strb.w	r0, [sp, #0x23]
;         self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
 8001552:      	ldr	r0, [r1]
 8001554:      	orr	r0, r0, #0x200000
 8001558:      	str	r0, [r1]
;                             ahb.rstr().modify(|_, w| w.$iopxrst().set_bit());
 800155a:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h5301d8d7096c36b4E+0x26>
 800155c:      	ldr	r0, [sp]
 800155e:      	add	sp, #0x24
 8001560:      	bx	lr

08001562 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h56558ec8694a5668E>:
;                             ahb.rstr().modify(|_, w| w.$iopxrst().clear_bit());
 8001562:      	sub	sp, #0x24
 8001564:      	str	r0, [sp, #0x8]
 8001566:      	str	r1, [sp, #0xc]
 8001568:      	str	r1, [sp, #0x14]
;         IOPERST_W { w: self }
 800156a:      	str	r1, [sp, #0x10]
;     }
 800156c:      	ldr	r0, [sp, #0x10]
;                             ahb.rstr().modify(|_, w| w.$iopxrst().clear_bit());
 800156e:      	str	r0, [sp]
 8001570:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h56558ec8694a5668E+0x10>
 8001572:      	ldr	r1, [sp]
 8001574:      	str	r1, [sp, #0x18]
 8001576:      	str	r1, [sp, #0x1c]
 8001578:      	movs	r0, #0x0
 800157a:      	strb.w	r0, [sp, #0x23]
;         self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
 800157e:      	ldr	r0, [r1]
 8001580:      	bic	r0, r0, #0x200000
 8001584:      	str	r0, [r1]
;                             ahb.rstr().modify(|_, w| w.$iopxrst().clear_bit());
 8001586:      	b	#-0x2 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h56558ec8694a5668E+0x26>
 8001588:      	ldr	r0, [sp]
 800158a:      	add	sp, #0x24
 800158c:      	bx	lr

0800158e <stm32f3xx_hal::gpio::gpioe::MODER::moder::h918bd9a996e5910e>:
;                         pub(crate) fn moder(&mut self) -> &$gpioy::MODER {
 800158e:      	sub	sp, #0x4
 8001590:      	str	r0, [sp]
; gpio!([
 8001592:      	b	#-0x2 <stm32f3xx_hal::gpio::gpioe::MODER::moder::h918bd9a996e5910e+0x6>
 8001594:      	movw	r0, #0x1000
 8001598:      	movt	r0, #0x4800
;                         }
 800159c:      	add	sp, #0x4
 800159e:      	bx	lr

080015a0 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::ha38a0cb03f0b8d0e>:
;                         pub(crate) fn otyper(&mut self) -> &$gpioy::OTYPER {
 80015a0:      	sub	sp, #0x4
 80015a2:      	str	r0, [sp]
; gpio!([
 80015a4:      	b	#-0x2 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::ha38a0cb03f0b8d0e+0x6>
 80015a6:      	movw	r0, #0x1004
 80015aa:      	movt	r0, #0x4800
;                         }
 80015ae:      	add	sp, #0x4
 80015b0:      	bx	lr

080015b2 <ResetTrampoline>:
;             fn trampoline() -> ! {
 80015b2:      	push	{r7, lr}
 80015b4:      	mov	r7, sp
;                 unsafe { main() }
 80015b6:      	bl	#-0x13ce
 80015ba:      	trap

080015bc <WWDG>:
; pub unsafe extern "C" fn DefaultHandler_() -> ! {
 80015bc:      	push	{r7, lr}
 80015be:      	mov	r7, sp
 80015c0:      	sub	sp, #0x8
 80015c2:      	b	#-0x2 <WWDG+0x8>
 80015c4:      	movs	r0, #0x4
;         atomic::compiler_fence(Ordering::SeqCst);
 80015c6:      	strb	r0, [r7, #-1]
 80015ca:      	ldrb	r0, [r7, #-1]
 80015ce:      	bl	#0x9a
 80015d2:      	b	#-0x2 <WWDG+0x18>
;     loop {
 80015d4:      	b	#-0x14 <WWDG+0x8>

080015d6 <__pre_init>:
; pub unsafe extern "C" fn DefaultPreInit() {}
 80015d6:      	bx	lr

080015d8 <core::ptr::write_volatile::ha9fe3fd1574fe73f>:
; pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
 80015d8:      	sub	sp, #0x8
 80015da:      	str	r0, [sp]
 80015dc:      	str	r1, [sp, #0x4]
;         intrinsics::volatile_store(dst, src);
 80015de:      	str	r1, [r0]
 80015e0:      	b	#-0x2 <core::ptr::write_volatile::ha9fe3fd1574fe73f+0xa>
; }
 80015e2:      	add	sp, #0x8
 80015e4:      	bx	lr

080015e6 <core::ptr::read::hd0f21c071a3ca927>:
; pub const unsafe fn read<T>(src: *const T) -> T {
 80015e6:      	push	{r7, lr}
 80015e8:      	mov	r7, sp
 80015ea:      	sub	sp, #0x20
 80015ec:      	str	r0, [sp, #0x4]
 80015ee:      	str	r0, [sp, #0xc]
;     }
 80015f0:      	ldr	r0, [sp, #0x10]
;     let mut tmp = MaybeUninit::<T>::uninit();
 80015f2:      	str	r0, [sp, #0x8]
 80015f4:      	b	#-0x2 <core::ptr::read::hd0f21c071a3ca927+0x10>
 80015f6:      	add	r0, sp, #0x8
 80015f8:      	str	r0, [sp, #0x1c]
;         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
 80015fa:      	b	#-0x2 <core::ptr::read::hd0f21c071a3ca927+0x16>
 80015fc:      	ldr	r0, [sp, #0x4]
 80015fe:      	add	r1, sp, #0x8
 8001600:      	movs	r2, #0x1
 8001602:      	bl	#0x48
 8001606:      	b	#-0x2 <core::ptr::read::hd0f21c071a3ca927+0x22>
;         tmp.assume_init()
 8001608:      	ldr	r0, [sp, #0x8]
 800160a:      	str	r0, [sp]
 800160c:      	str	r0, [sp, #0x14]
 800160e:      	str	r0, [sp, #0x18]
 8001610:      	b	#-0x2 <core::ptr::read::hd0f21c071a3ca927+0x2c>
; }
 8001612:      	ldr	r0, [sp]
 8001614:      	add	sp, #0x20
 8001616:      	pop	{r7, pc}

08001618 <core::ptr::write::hbe041a09843830d0>:
; pub unsafe fn write<T>(dst: *mut T, src: T) {
 8001618:      	sub	sp, #0xc
 800161a:      	str	r1, [sp]
 800161c:      	mov	r1, r0
 800161e:      	ldr	r0, [sp]
 8001620:      	str	r0, [sp, #0x4]
 8001622:      	str	r1, [sp, #0x8]
;         copy_nonoverlapping(&src as *const T, dst, 1);
 8001624:      	ldr	r0, [sp, #0x4]
 8001626:      	str	r0, [r1]
; }
 8001628:      	add	sp, #0xc
 800162a:      	bx	lr

0800162c <core::intrinsics::write_bytes::hb5f7cbcd8c576bf1>:
; pub unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {
 800162c:      	push	{r7, lr}
 800162e:      	mov	r7, sp
 8001630:      	sub	sp, #0x10
 8001632:      	str	r2, [sp]
 8001634:      	mov	r2, r1
 8001636:      	ldr	r1, [sp]
 8001638:      	str	r0, [sp, #0x4]
 800163a:      	strb	r2, [r7, #-5]
 800163e:      	str	r1, [sp, #0xc]
;     unsafe { write_bytes(dst, val, count) }
 8001640:      	lsls	r1, r1, #0x2
 8001642:      	uxtb	r2, r2
 8001644:      	bl	#0x1e20
 8001648:      	b	#-0x2 <core::intrinsics::write_bytes::hb5f7cbcd8c576bf1+0x1e>
; }
 800164a:      	add	sp, #0x10
 800164c:      	pop	{r7, pc}

0800164e <core::intrinsics::copy_nonoverlapping::h7881edbada67dc32>:
; pub const unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {
 800164e:      	push	{r7, lr}
 8001650:      	mov	r7, sp
 8001652:      	sub	sp, #0x10
 8001654:      	str	r1, [sp]
 8001656:      	mov	r1, r0
 8001658:      	ldr	r0, [sp]
 800165a:      	str	r1, [sp, #0x4]
 800165c:      	str	r0, [sp, #0x8]
 800165e:      	str	r2, [sp, #0xc]
;     unsafe { copy_nonoverlapping(src, dst, count) }
 8001660:      	lsls	r2, r2, #0x2
 8001662:      	bl	#0x1d26
; }
 8001666:      	add	sp, #0x10
 8001668:      	pop	{r7, pc}
 800166a:      	bmi	#-0x58 <core::ptr::read::hd0f21c071a3ca927+0x30>

0800166c <core::sync::atomic::compiler_fence::h74dc9688d08b095b>:
; pub fn compiler_fence(order: Ordering) {
 800166c:      	push	{r7, lr}
 800166e:      	mov	r7, sp
 8001670:      	sub	sp, #0x10
 8001672:      	strb	r0, [r7, #-5]
;             Acquire => intrinsics::atomic_singlethreadfence_acq(),
 8001676:      	ldrb	r0, [r7, #-5]
 800167a:      	str	r0, [sp, #0x4]
 800167c:      	ldr	r1, [sp, #0x4]
 800167e:      	tbb	[pc, r1]

08001682 <$d.1>:
 8001682:	03 11 10 12	.word	0x12101103
 8001686:	13 00		.short	0x0013

08001688 <$t.2>:
;             Relaxed => panic!("there is no such thing as a relaxed compiler fence"),
 8001688:      	movw	r0, #0x3654
 800168c:      	movt	r0, #0x800
 8001690:      	movw	r2, #0x36fc
 8001694:      	movt	r2, #0x800
 8001698:      	movs	r1, #0x32
 800169a:      	bl	#0x4f8
 800169e:      	trap
;         match order {
 80016a0:      	trap
;             Acquire => intrinsics::atomic_singlethreadfence_acq(),
 80016a2:      	b	#0x4 <$t.2+0x22>
;             Release => intrinsics::atomic_singlethreadfence_rel(),
 80016a4:      	b	#0x2 <$t.2+0x22>
;             AcqRel => intrinsics::atomic_singlethreadfence_acqrel(),
 80016a6:      	b	#0x0 <$t.2+0x22>
;             SeqCst => intrinsics::atomic_singlethreadfence(),
 80016a8:      	b	#-0x2 <$t.2+0x22>
; }
 80016aa:      	add	sp, #0x10
 80016ac:      	pop	{r7, pc}

080016ae <r0::zero_bss::hff0b5ce58cda6545>:
; pub unsafe fn zero_bss<T>(mut sbss: *mut T, ebss: *mut T)
 80016ae:      	push	{r7, lr}
 80016b0:      	mov	r7, sp
 80016b2:      	sub	sp, #0x20
 80016b4:      	str	r1, [sp, #0xc]
 80016b6:      	str	r0, [sp, #0x10]
 80016b8:      	str	r1, [sp, #0x14]
 80016ba:      	b	#-0x2 <r0::zero_bss::hff0b5ce58cda6545+0xe>
;     while sbss < ebss {
 80016bc:      	ldr	r1, [sp, #0xc]
 80016be:      	ldr	r0, [sp, #0x10]
 80016c0:      	cmp	r0, r1
 80016c2:      	blo	#0x4 <r0::zero_bss::hff0b5ce58cda6545+0x1c>
 80016c4:      	b	#-0x2 <r0::zero_bss::hff0b5ce58cda6545+0x18>
; }
 80016c6:      	add	sp, #0x20
 80016c8:      	pop	{r7, pc}
;         ptr::write_volatile(sbss, mem::zeroed());
 80016ca:      	ldr	r0, [sp, #0x10]
;         MaybeUninit::zeroed().assume_init()
 80016cc:      	str	r0, [sp, #0x4]
 80016ce:      	bl	#0x7e
 80016d2:      	mov	r1, r0
 80016d4:      	str	r1, [sp, #0x8]
 80016d6:      	str	r0, [sp, #0x18]
 80016d8:      	str	r0, [sp, #0x1c]
;         ptr::write_volatile(sbss, mem::zeroed());
 80016da:      	b	#-0x2 <r0::zero_bss::hff0b5ce58cda6545+0x2e>
 80016dc:      	ldr	r1, [sp, #0x8]
 80016de:      	ldr	r0, [sp, #0x4]
 80016e0:      	bl	#-0x10c
 80016e4:      	b	#-0x2 <r0::zero_bss::hff0b5ce58cda6545+0x38>
;         sbss = sbss.offset(1);
 80016e6:      	ldr	r0, [sp, #0x10]
 80016e8:      	movs	r1, #0x1
 80016ea:      	bl	#0x9e
 80016ee:      	str	r0, [sp]
 80016f0:      	b	#-0x2 <r0::zero_bss::hff0b5ce58cda6545+0x44>
 80016f2:      	ldr	r0, [sp]
 80016f4:      	str	r0, [sp, #0x10]
;     while sbss < ebss {
 80016f6:      	b	#-0x3e <r0::zero_bss::hff0b5ce58cda6545+0xe>

080016f8 <r0::init_data::h3b6e3bb40ba680ce>:
; pub unsafe fn init_data<T>(
 80016f8:      	push	{r7, lr}
 80016fa:      	mov	r7, sp
 80016fc:      	sub	sp, #0x20
 80016fe:      	str	r1, [sp, #0x10]
 8001700:      	str	r0, [sp, #0x14]
 8001702:      	str	r2, [sp, #0x18]
 8001704:      	str	r1, [sp, #0x1c]
 8001706:      	b	#-0x2 <r0::init_data::h3b6e3bb40ba680ce+0x10>
;     while sdata < edata {
 8001708:      	ldr	r1, [sp, #0x10]
 800170a:      	ldr	r0, [sp, #0x14]
 800170c:      	cmp	r0, r1
 800170e:      	blo	#0x4 <r0::init_data::h3b6e3bb40ba680ce+0x1e>
 8001710:      	b	#-0x2 <r0::init_data::h3b6e3bb40ba680ce+0x1a>
; }
 8001712:      	add	sp, #0x20
 8001714:      	pop	{r7, pc}
;         ptr::write(sdata, ptr::read(sidata));
 8001716:      	ldr	r0, [sp, #0x14]
 8001718:      	str	r0, [sp, #0x8]
 800171a:      	ldr	r0, [sp, #0x18]
 800171c:      	bl	#-0x13a
 8001720:      	str	r0, [sp, #0xc]
 8001722:      	b	#-0x2 <r0::init_data::h3b6e3bb40ba680ce+0x2c>
 8001724:      	ldr	r1, [sp, #0xc]
 8001726:      	ldr	r0, [sp, #0x8]
 8001728:      	bl	#-0x114
 800172c:      	b	#-0x2 <r0::init_data::h3b6e3bb40ba680ce+0x36>
;         sdata = sdata.offset(1);
 800172e:      	ldr	r0, [sp, #0x14]
 8001730:      	movs	r1, #0x1
 8001732:      	bl	#0x56
 8001736:      	str	r0, [sp, #0x4]
 8001738:      	b	#-0x2 <r0::init_data::h3b6e3bb40ba680ce+0x42>
 800173a:      	ldr	r0, [sp, #0x4]
 800173c:      	str	r0, [sp, #0x14]
;         sidata = sidata.offset(1);
 800173e:      	ldr	r0, [sp, #0x18]
 8001740:      	movs	r1, #0x1
 8001742:      	bl	#0x5e
 8001746:      	str	r0, [sp]
 8001748:      	b	#-0x2 <r0::init_data::h3b6e3bb40ba680ce+0x52>
 800174a:      	ldr	r0, [sp]
 800174c:      	str	r0, [sp, #0x18]
;     while sdata < edata {
 800174e:      	b	#-0x4a <r0::init_data::h3b6e3bb40ba680ce+0x10>

08001750 <core::mem::maybe_uninit::MaybeUninit<T>::zeroed::h9ce7cfa1fc3d5748>:
;     pub fn zeroed() -> MaybeUninit<T> {
 8001750:      	push	{r7, lr}
 8001752:      	mov	r7, sp
 8001754:      	sub	sp, #0x10
;     }
 8001756:      	ldr	r0, [sp, #0x8]
;         let mut u = MaybeUninit::<T>::uninit();
 8001758:      	str	r0, [sp, #0x4]
 800175a:      	b	#-0x2 <core::mem::maybe_uninit::MaybeUninit<T>::zeroed::h9ce7cfa1fc3d5748+0xc>
 800175c:      	add	r0, sp, #0x4
 800175e:      	str	r0, [sp, #0xc]
;             u.as_mut_ptr().write_bytes(0u8, 1);
 8001760:      	b	#-0x2 <core::mem::maybe_uninit::MaybeUninit<T>::zeroed::h9ce7cfa1fc3d5748+0x12>
 8001762:      	add	r0, sp, #0x4
 8001764:      	movs	r1, #0x0
 8001766:      	movs	r2, #0x1
;             u.as_mut_ptr().write_bytes(0u8, 1);
 8001768:      	bl	#0x8
 800176c:      	b	#-0x2 <core::mem::maybe_uninit::MaybeUninit<T>::zeroed::h9ce7cfa1fc3d5748+0x1e>
;     }
 800176e:      	ldr	r0, [sp, #0x4]
 8001770:      	add	sp, #0x10
 8001772:      	pop	{r7, pc}

08001774 <core::ptr::mut_ptr::<impl *mut T>::write_bytes::h522f3a838d435c7a>:
;     pub unsafe fn write_bytes(self, val: u8, count: usize)
 8001774:      	push	{r7, lr}
 8001776:      	mov	r7, sp
 8001778:      	sub	sp, #0x10
 800177a:      	str	r0, [sp, #0x4]
 800177c:      	strb	r1, [r7, #-5]
 8001780:      	str	r2, [sp, #0xc]
;         unsafe { write_bytes(self, val, count) }
 8001782:      	bl	#-0x15a
 8001786:      	b	#-0x2 <core::ptr::mut_ptr::<impl *mut T>::write_bytes::h522f3a838d435c7a+0x14>
;     }
 8001788:      	add	sp, #0x10
 800178a:      	pop	{r7, pc}

0800178c <core::ptr::mut_ptr::<impl *mut T>::offset::h2eb2b5f65ace1254>:
;     pub const unsafe fn offset(self, count: isize) -> *mut T
 800178c:      	sub	sp, #0x10
 800178e:      	str	r0, [sp, #0x4]
 8001790:      	str	r1, [sp, #0x8]
;         unsafe { intrinsics::offset(self, count) as *mut T }
 8001792:      	add.w	r0, r0, r1, lsl #2
 8001796:      	str	r0, [sp, #0xc]
 8001798:      	ldr	r0, [sp, #0xc]
 800179a:      	str	r0, [sp]
 800179c:      	b	#-0x2 <core::ptr::mut_ptr::<impl *mut T>::offset::h2eb2b5f65ace1254+0x12>
;     }
 800179e:      	ldr	r0, [sp]
 80017a0:      	add	sp, #0x10
 80017a2:      	bx	lr

080017a4 <core::ptr::const_ptr::<impl *const T>::offset::h5475f87183fe8ef6>:
;     pub const unsafe fn offset(self, count: isize) -> *const T
 80017a4:      	sub	sp, #0x10
 80017a6:      	str	r0, [sp, #0x4]
 80017a8:      	str	r1, [sp, #0x8]
;         unsafe { intrinsics::offset(self, count) }
 80017aa:      	add.w	r0, r0, r1, lsl #2
 80017ae:      	str	r0, [sp, #0xc]
 80017b0:      	ldr	r0, [sp, #0xc]
 80017b2:      	str	r0, [sp]
 80017b4:      	b	#-0x2 <core::ptr::const_ptr::<impl *const T>::offset::h5475f87183fe8ef6+0x12>
;     }
 80017b6:      	ldr	r0, [sp]
 80017b8:      	add	sp, #0x10
 80017ba:      	bx	lr

080017bc <core::ptr::read_volatile::h3abb44de8eb5ea5d>:
; pub unsafe fn read_volatile<T>(src: *const T) -> T {
 80017bc:      	sub	sp, #0xc
 80017be:      	str	r0, [sp, #0x4]
;     unsafe { intrinsics::volatile_load(src) }
 80017c0:      	ldr	r0, [r0]
 80017c2:      	str	r0, [sp, #0x8]
 80017c4:      	ldr	r0, [sp, #0x8]
 80017c6:      	str	r0, [sp]
 80017c8:      	b	#-0x2 <core::ptr::read_volatile::h3abb44de8eb5ea5d+0xe>
; }
 80017ca:      	ldr	r0, [sp]
 80017cc:      	add	sp, #0xc
 80017ce:      	bx	lr

080017d0 <core::ptr::write_volatile::h6a8dec6bfbcce56a>:
; pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
 80017d0:      	sub	sp, #0x8
 80017d2:      	str	r0, [sp]
 80017d4:      	strh.w	r1, [sp, #0x6]
;         intrinsics::volatile_store(dst, src);
 80017d8:      	strh	r1, [r0]
 80017da:      	b	#-0x2 <core::ptr::write_volatile::h6a8dec6bfbcce56a+0xc>
; }
 80017dc:      	add	sp, #0x8
 80017de:      	bx	lr

080017e0 <core::ptr::write_volatile::hcc973ab6ca623127>:
; pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
 80017e0:      	sub	sp, #0x8
 80017e2:      	str	r0, [sp]
 80017e4:      	strb.w	r1, [sp, #0x7]
;         intrinsics::volatile_store(dst, src);
 80017e8:      	strb	r1, [r0]
 80017ea:      	b	#-0x2 <core::ptr::write_volatile::hcc973ab6ca623127+0xc>
; }
 80017ec:      	add	sp, #0x8
 80017ee:      	bx	lr

080017f0 <core::ptr::write_volatile::he397b02227bafe4e>:
; pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
 80017f0:      	sub	sp, #0x8
 80017f2:      	str	r0, [sp]
 80017f4:      	str	r1, [sp, #0x4]
;         intrinsics::volatile_store(dst, src);
 80017f6:      	str	r1, [r0]
 80017f8:      	b	#-0x2 <core::ptr::write_volatile::he397b02227bafe4e+0xa>
; }
 80017fa:      	add	sp, #0x8
 80017fc:      	bx	lr

080017fe <core::ptr::slice_from_raw_parts::h8ccf014210f2e22f>:
; pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
 80017fe:      	push	{r7, lr}
 8001800:      	mov	r7, sp
 8001802:      	sub	sp, #0x18
 8001804:      	str	r1, [sp, #0x8]
 8001806:      	str	r0, [sp, #0x10]
 8001808:      	str	r1, [sp, #0x14]
;     from_raw_parts(data.cast(), len)
 800180a:      	bl	#0x12e
 800180e:      	str	r0, [sp, #0xc]
 8001810:      	b	#-0x2 <core::ptr::slice_from_raw_parts::h8ccf014210f2e22f+0x14>
 8001812:      	ldr	r1, [sp, #0x8]
 8001814:      	ldr	r0, [sp, #0xc]
 8001816:      	bl	#0x17c
 800181a:      	str	r0, [sp]
 800181c:      	str	r1, [sp, #0x4]
 800181e:      	b	#-0x2 <core::ptr::slice_from_raw_parts::h8ccf014210f2e22f+0x22>
; }
 8001820:      	ldr	r1, [sp, #0x4]
 8001822:      	ldr	r0, [sp]
 8001824:      	add	sp, #0x18
 8001826:      	pop	{r7, pc}

08001828 <core::ptr::slice_from_raw_parts::hb42d3547b7656cc1>:
; pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
 8001828:      	push	{r7, lr}
 800182a:      	mov	r7, sp
 800182c:      	sub	sp, #0x18
 800182e:      	str	r1, [sp, #0x8]
 8001830:      	str	r0, [sp, #0x10]
 8001832:      	str	r1, [sp, #0x14]
;     from_raw_parts(data.cast(), len)
 8001834:      	bl	#0x10c
 8001838:      	str	r0, [sp, #0xc]
 800183a:      	b	#-0x2 <core::ptr::slice_from_raw_parts::hb42d3547b7656cc1+0x14>
 800183c:      	ldr	r1, [sp, #0x8]
 800183e:      	ldr	r0, [sp, #0xc]
 8001840:      	bl	#0x16c
 8001844:      	str	r0, [sp]
 8001846:      	str	r1, [sp, #0x4]
 8001848:      	b	#-0x2 <core::ptr::slice_from_raw_parts::hb42d3547b7656cc1+0x22>
; }
 800184a:      	ldr	r1, [sp, #0x4]
 800184c:      	ldr	r0, [sp]
 800184e:      	add	sp, #0x18
 8001850:      	pop	{r7, pc}

08001852 <core::ptr::read::h08e60ae607a6f417>:
; pub const unsafe fn read<T>(src: *const T) -> T {
 8001852:      	push	{r7, lr}
 8001854:      	mov	r7, sp
 8001856:      	sub	sp, #0x20
 8001858:      	str	r0, [sp, #0x4]
 800185a:      	str	r0, [sp, #0xc]
;     }
 800185c:      	ldr	r0, [sp, #0x10]
;     let mut tmp = MaybeUninit::<T>::uninit();
 800185e:      	str	r0, [sp, #0x8]
 8001860:      	b	#-0x2 <core::ptr::read::h08e60ae607a6f417+0x10>
 8001862:      	add	r0, sp, #0x8
 8001864:      	str	r0, [sp, #0x1c]
;         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
 8001866:      	b	#-0x2 <core::ptr::read::h08e60ae607a6f417+0x16>
 8001868:      	ldr	r0, [sp, #0x4]
 800186a:      	add	r1, sp, #0x8
 800186c:      	movs	r2, #0x1
 800186e:      	bl	#0x1d0
 8001872:      	b	#-0x2 <core::ptr::read::h08e60ae607a6f417+0x22>
;         tmp.assume_init()
 8001874:      	ldr	r0, [sp, #0x8]
 8001876:      	str	r0, [sp]
 8001878:      	str	r0, [sp, #0x14]
 800187a:      	str	r0, [sp, #0x18]
 800187c:      	b	#-0x2 <core::ptr::read::h08e60ae607a6f417+0x2c>
; }
 800187e:      	ldr	r0, [sp]
 8001880:      	add	sp, #0x20
 8001882:      	pop	{r7, pc}

08001884 <core::ptr::read::h9ed6632aa82fd104>:
; pub const unsafe fn read<T>(src: *const T) -> T {
 8001884:      	push	{r7, lr}
 8001886:      	mov	r7, sp
 8001888:      	sub	sp, #0x20
 800188a:      	str	r0, [sp, #0x4]
 800188c:      	str	r0, [sp, #0xc]
;     }
 800188e:      	ldr	r0, [sp, #0x10]
;     let mut tmp = MaybeUninit::<T>::uninit();
 8001890:      	str	r0, [sp, #0x8]
 8001892:      	b	#-0x2 <core::ptr::read::h9ed6632aa82fd104+0x10>
 8001894:      	add	r0, sp, #0x8
 8001896:      	str	r0, [sp, #0x1c]
;         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
 8001898:      	b	#-0x2 <core::ptr::read::h9ed6632aa82fd104+0x16>
 800189a:      	ldr	r0, [sp, #0x4]
 800189c:      	add	r1, sp, #0x8
 800189e:      	movs	r2, #0x1
 80018a0:      	bl	#0x182
 80018a4:      	b	#-0x2 <core::ptr::read::h9ed6632aa82fd104+0x22>
;         tmp.assume_init()
 80018a6:      	ldr	r0, [sp, #0x8]
 80018a8:      	str	r0, [sp]
 80018aa:      	str	r0, [sp, #0x14]
 80018ac:      	str	r0, [sp, #0x18]
 80018ae:      	b	#-0x2 <core::ptr::read::h9ed6632aa82fd104+0x2c>
; }
 80018b0:      	ldr	r0, [sp]
 80018b2:      	add	sp, #0x20
 80018b4:      	pop	{r7, pc}

080018b6 <core::ptr::read::hed458592d520c012>:
; pub const unsafe fn read<T>(src: *const T) -> T {
 80018b6:      	push	{r7, lr}
 80018b8:      	mov	r7, sp
 80018ba:      	sub	sp, #0x20
 80018bc:      	str	r0, [sp, #0x8]
 80018be:      	str	r0, [sp, #0x10]
;     }
 80018c0:      	ldrh	r0, [r7, #-10]
;     let mut tmp = MaybeUninit::<T>::uninit();
 80018c4:      	strh	r0, [r7, #-18]
 80018c8:      	b	#-0x2 <core::ptr::read::hed458592d520c012+0x14>
 80018ca:      	sub.w	r0, r7, #0x12
 80018ce:      	str	r0, [sp, #0x1c]
;         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
 80018d0:      	b	#-0x2 <core::ptr::read::hed458592d520c012+0x1c>
 80018d2:      	ldr	r0, [sp, #0x8]
 80018d4:      	sub.w	r1, r7, #0x12
 80018d8:      	movs	r2, #0x1
 80018da:      	bl	#0x180
 80018de:      	b	#-0x2 <core::ptr::read::hed458592d520c012+0x2a>
;         tmp.assume_init()
 80018e0:      	ldrh	r0, [r7, #-18]
 80018e4:      	mov	r1, r0
 80018e6:      	str	r1, [sp, #0x4]
 80018e8:      	strh.w	r0, [sp, #0x18]
 80018ec:      	strh	r0, [r7, #-6]
 80018f0:      	b	#-0x2 <core::ptr::read::hed458592d520c012+0x3c>
; }
 80018f2:      	ldr	r0, [sp, #0x4]
 80018f4:      	add	sp, #0x20
 80018f6:      	pop	{r7, pc}

080018f8 <core::ptr::write::h9a94c446c7f9dc92>:
; pub unsafe fn write<T>(dst: *mut T, src: T) {
 80018f8:      	sub	sp, #0xc
 80018fa:      	str	r1, [sp]
 80018fc:      	mov	r1, r0
 80018fe:      	ldr	r0, [sp]
 8001900:      	str	r0, [sp, #0x4]
 8001902:      	str	r1, [sp, #0x8]
;         copy_nonoverlapping(&src as *const T, dst, 1);
 8001904:      	ldr	r0, [sp, #0x4]
 8001906:      	str	r0, [r1]
; }
 8001908:      	add	sp, #0xc
 800190a:      	bx	lr

0800190c <<usize as core::iter::range::Step>::forward_unchecked::h415caa33acdccc34>:
;         unsafe fn forward_unchecked(start: Self, n: usize) -> Self {
 800190c:      	push	{r7, lr}
 800190e:      	mov	r7, sp
 8001910:      	sub	sp, #0x10
 8001912:      	str	r0, [sp, #0x8]
 8001914:      	str	r1, [sp, #0xc]
;             unsafe { start.unchecked_add(n as Self) }
 8001916:      	bl	#0xb0
 800191a:      	str	r0, [sp, #0x4]
 800191c:      	b	#-0x2 <<usize as core::iter::range::Step>::forward_unchecked::h415caa33acdccc34+0x12>
;         }
 800191e:      	ldr	r0, [sp, #0x4]
 8001920:      	add	sp, #0x10
 8001922:      	pop	{r7, pc}

08001924 <core::ptr::const_ptr::<impl *const T>::add::h205809340162fe6d>:
;     pub const unsafe fn add(self, count: usize) -> Self
 8001924:      	push	{r7, lr}
 8001926:      	mov	r7, sp
 8001928:      	sub	sp, #0x10
 800192a:      	str	r0, [sp, #0x8]
 800192c:      	str	r1, [sp, #0xc]
;         unsafe { self.offset(count as isize) }
 800192e:      	bl	#0x1a
 8001932:      	str	r0, [sp, #0x4]
 8001934:      	b	#-0x2 <core::ptr::const_ptr::<impl *const T>::add::h205809340162fe6d+0x12>
;     }
 8001936:      	ldr	r0, [sp, #0x4]
 8001938:      	add	sp, #0x10
 800193a:      	pop	{r7, pc}

0800193c <core::ptr::const_ptr::<impl *const T>::cast::h2a575a50915e6b69>:
;     pub const fn cast<U>(self) -> *const U {
 800193c:      	sub	sp, #0x4
 800193e:      	str	r0, [sp]
;     }
 8001940:      	add	sp, #0x4
 8001942:      	bx	lr

08001944 <core::ptr::const_ptr::<impl *const T>::cast::h5d709d6ed8089bed>:
;     pub const fn cast<U>(self) -> *const U {
 8001944:      	sub	sp, #0x4
 8001946:      	str	r0, [sp]
;     }
 8001948:      	add	sp, #0x4
 800194a:      	bx	lr

0800194c <core::ptr::const_ptr::<impl *const T>::offset::h7da44f917b9052f4>:
;     pub const unsafe fn offset(self, count: isize) -> *const T
 800194c:      	sub	sp, #0x10
 800194e:      	str	r0, [sp, #0x4]
 8001950:      	str	r1, [sp, #0x8]
;         unsafe { intrinsics::offset(self, count) }
 8001952:      	add	r0, r1
 8001954:      	str	r0, [sp, #0xc]
 8001956:      	ldr	r0, [sp, #0xc]
 8001958:      	str	r0, [sp]
 800195a:      	b	#-0x2 <core::ptr::const_ptr::<impl *const T>::offset::h7da44f917b9052f4+0x10>
;     }
 800195c:      	ldr	r0, [sp]
 800195e:      	add	sp, #0x10
 8001960:      	bx	lr

08001962 <core::ptr::const_ptr::<impl *const T>::offset::hfa59aa119dbaa4a6>:
;     pub const unsafe fn offset(self, count: isize) -> *const T
 8001962:      	sub	sp, #0x10
 8001964:      	str	r0, [sp, #0x4]
 8001966:      	str	r1, [sp, #0x8]
;         unsafe { intrinsics::offset(self, count) }
 8001968:      	add.w	r0, r0, r1, lsl #2
 800196c:      	str	r0, [sp, #0xc]
 800196e:      	ldr	r0, [sp, #0xc]
 8001970:      	str	r0, [sp]
 8001972:      	b	#-0x2 <core::ptr::const_ptr::<impl *const T>::offset::hfa59aa119dbaa4a6+0x12>
;     }
 8001974:      	ldr	r0, [sp]
 8001976:      	add	sp, #0x10
 8001978:      	bx	lr

0800197a <core::cmp::impls::<impl core::cmp::PartialOrd for usize>::lt::haacc7ea9d3a2d3c9>:
;                 fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
 800197a:      	sub	sp, #0xc
 800197c:      	str	r1, [sp]
 800197e:      	mov	r1, r0
 8001980:      	ldr	r0, [sp]
 8001982:      	str	r1, [sp, #0x4]
 8001984:      	str	r0, [sp, #0x8]
 8001986:      	ldr	r1, [r1]
 8001988:      	ldr	r2, [r0]
 800198a:      	movs	r0, #0x0
 800198c:      	cmp	r1, r2
 800198e:      	it	lo
 8001990:      	movlo	r0, #0x1
 8001992:      	add	sp, #0xc
 8001994:      	bx	lr

08001996 <core::ptr::metadata::from_raw_parts::h321d5263a7fe7a2b>:
; pub const fn from_raw_parts<T: ?Sized>(
 8001996:      	sub	sp, #0x18
 8001998:      	str	r0, [sp, #0x10]
 800199a:      	str	r1, [sp, #0x14]
;     unsafe { PtrRepr { components: PtrComponents { data_address, metadata } }.const_ptr }
 800199c:      	str	r0, [sp, #0x8]
 800199e:      	str	r1, [sp, #0xc]
 80019a0:      	ldr	r1, [sp, #0x8]
 80019a2:      	ldr	r0, [sp, #0xc]
 80019a4:      	str	r1, [sp]
 80019a6:      	str	r0, [sp, #0x4]
 80019a8:      	ldr	r0, [sp]
 80019aa:      	ldr	r1, [sp, #0x4]
; }
 80019ac:      	add	sp, #0x18
 80019ae:      	bx	lr

080019b0 <core::ptr::metadata::from_raw_parts::hdc303c4f01ec2a1f>:
; pub const fn from_raw_parts<T: ?Sized>(
 80019b0:      	sub	sp, #0x18
 80019b2:      	str	r0, [sp, #0x10]
 80019b4:      	str	r1, [sp, #0x14]
;     unsafe { PtrRepr { components: PtrComponents { data_address, metadata } }.const_ptr }
 80019b6:      	str	r0, [sp, #0x8]
 80019b8:      	str	r1, [sp, #0xc]
 80019ba:      	ldr	r1, [sp, #0x8]
 80019bc:      	ldr	r0, [sp, #0xc]
 80019be:      	str	r1, [sp]
 80019c0:      	str	r0, [sp, #0x4]
 80019c2:      	ldr	r0, [sp]
 80019c4:      	ldr	r1, [sp, #0x4]
; }
 80019c6:      	add	sp, #0x18
 80019c8:      	bx	lr

080019ca <core::num::<impl usize>::unchecked_add::h65a947bb24517338>:
;         pub unsafe fn unchecked_add(self, rhs: Self) -> Self {
 80019ca:      	sub	sp, #0x10
 80019cc:      	str	r0, [sp, #0x4]
 80019ce:      	str	r1, [sp, #0x8]
;             unsafe { intrinsics::unchecked_add(self, rhs) }
 80019d0:      	add	r0, r1
 80019d2:      	str	r0, [sp, #0xc]
 80019d4:      	ldr	r0, [sp, #0xc]
 80019d6:      	str	r0, [sp]
 80019d8:      	b	#-0x2 <core::num::<impl usize>::unchecked_add::h65a947bb24517338+0x10>
;         }
 80019da:      	ldr	r0, [sp]
 80019dc:      	add	sp, #0x10
 80019de:      	bx	lr

080019e0 <core::cell::UnsafeCell<T>::get::h0bce73ae21a002b3>:
;     pub const fn get(&self) -> *mut T {
 80019e0:      	sub	sp, #0x4
 80019e2:      	str	r0, [sp]
;     }
 80019e4:      	add	sp, #0x4
 80019e6:      	bx	lr

080019e8 <core::clone::impls::<impl core::clone::Clone for usize>::clone::hf015ff62873b6bf2>:
;                     fn clone(&self) -> Self {
 80019e8:      	sub	sp, #0x4
 80019ea:      	str	r0, [sp]
;                         *self
 80019ec:      	ldr	r0, [r0]
;                     }
 80019ee:      	add	sp, #0x4
 80019f0:      	bx	lr

080019f2 <core::slice::<impl [T]>::len::h3a764a946730f9a4>:
;     pub const fn len(&self) -> usize {
 80019f2:      	sub	sp, #0x10
 80019f4:      	str	r0, [sp, #0x8]
 80019f6:      	str	r1, [sp, #0xc]
;             unsafe { crate::ptr::PtrRepr { const_ptr: self }.components.metadata }
 80019f8:      	str	r0, [sp]
 80019fa:      	str	r1, [sp, #0x4]
 80019fc:      	ldr	r0, [sp, #0x4]
;     }
 80019fe:      	add	sp, #0x10
 8001a00:      	bx	lr

08001a02 <core::slice::<impl [T]>::len::hdd2ce08f579979ce>:
;     pub const fn len(&self) -> usize {
 8001a02:      	sub	sp, #0x10
 8001a04:      	str	r0, [sp, #0x8]
 8001a06:      	str	r1, [sp, #0xc]
;             unsafe { crate::ptr::PtrRepr { const_ptr: self }.components.metadata }
 8001a08:      	str	r0, [sp]
 8001a0a:      	str	r1, [sp, #0x4]
 8001a0c:      	ldr	r0, [sp, #0x4]
;     }
 8001a0e:      	add	sp, #0x10
 8001a10:      	bx	lr

08001a12 <core::slice::<impl [T]>::as_ptr::h59abcc80220d3147>:
;     pub const fn as_ptr(&self) -> *const T {
 8001a12:      	sub	sp, #0x8
 8001a14:      	str	r0, [sp]
 8001a16:      	str	r1, [sp, #0x4]
;     }
 8001a18:      	add	sp, #0x8
 8001a1a:      	bx	lr

08001a1c <core::slice::<impl [T]>::as_ptr::hbdefc91aff45ba8d>:
;     pub const fn as_ptr(&self) -> *const T {
 8001a1c:      	sub	sp, #0x8
 8001a1e:      	str	r0, [sp]
 8001a20:      	str	r1, [sp, #0x4]
;     }
 8001a22:      	add	sp, #0x8
 8001a24:      	bx	lr

08001a26 <core::intrinsics::copy_nonoverlapping::h086f054741a4c07b>:
; pub const unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {
 8001a26:      	push	{r7, lr}
 8001a28:      	mov	r7, sp
 8001a2a:      	sub	sp, #0x10
 8001a2c:      	str	r1, [sp]
 8001a2e:      	mov	r1, r0
 8001a30:      	ldr	r0, [sp]
 8001a32:      	str	r1, [sp, #0x4]
 8001a34:      	str	r0, [sp, #0x8]
 8001a36:      	str	r2, [sp, #0xc]
;     unsafe { copy_nonoverlapping(src, dst, count) }
 8001a38:      	lsls	r2, r2, #0x2
 8001a3a:      	bl	#0x194e
; }
 8001a3e:      	add	sp, #0x10
 8001a40:      	pop	{r7, pc}

08001a42 <core::intrinsics::copy_nonoverlapping::h64b47b1304d54bf8>:
; pub const unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {
 8001a42:      	push	{r7, lr}
 8001a44:      	mov	r7, sp
 8001a46:      	sub	sp, #0x10
 8001a48:      	str	r1, [sp]
 8001a4a:      	mov	r1, r0
 8001a4c:      	ldr	r0, [sp]
 8001a4e:      	str	r1, [sp, #0x4]
 8001a50:      	str	r0, [sp, #0x8]
 8001a52:      	str	r2, [sp, #0xc]
;     unsafe { copy_nonoverlapping(src, dst, count) }
 8001a54:      	lsls	r2, r2, #0x2
 8001a56:      	bl	#0x1932
; }
 8001a5a:      	add	sp, #0x10
 8001a5c:      	pop	{r7, pc}

08001a5e <core::intrinsics::copy_nonoverlapping::h95a93262954f66ef>:
; pub const unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {
 8001a5e:      	push	{r7, lr}
 8001a60:      	mov	r7, sp
 8001a62:      	sub	sp, #0x10
 8001a64:      	str	r1, [sp]
 8001a66:      	mov	r1, r0
 8001a68:      	ldr	r0, [sp]
 8001a6a:      	str	r1, [sp, #0x4]
 8001a6c:      	str	r0, [sp, #0x8]
 8001a6e:      	str	r2, [sp, #0xc]
;     unsafe { copy_nonoverlapping(src, dst, count) }
 8001a70:      	lsls	r2, r2, #0x1
 8001a72:      	bl	#0x1898
; }
 8001a76:      	add	sp, #0x10
 8001a78:      	pop	{r7, pc}

08001a7a <__cpsid>:
 8001a7a:      	cpsid i
 8001a7c:      	bx	lr

08001a7e <__cpsie>:
 8001a7e:      	cpsie i
 8001a80:      	bx	lr

08001a82 <__primask_r>:
 8001a82:      	mrs	r0, primask
 8001a86:      	bx	lr

08001a88 <bare_metal::CriticalSection::new::h46a93c702e48ea7b>:
;     }
 8001a88:      	bx	lr

08001a8a <core::ops::function::FnOnce::call_once::h3363aa5e17cbe6b9>:
 8001a8a:      	ldr	r0, [r0]
 8001a8c:      	b	#-0x4 <core::ops::function::FnOnce::call_once::h3363aa5e17cbe6b9+0x2>

08001a8e <core::ptr::drop_in_place<&core::iter::adapters::copied::Copied<core::slice::iter::Iter<u8>>>::heba01143f6196fd9>:
 8001a8e:      	bx	lr

08001a90 <<T as core::any::Any>::type_id::h52ca50932200b386>:
 8001a90:      	movw	r0, #0x99f5
 8001a94:      	movw	r1, #0x5bb7
 8001a98:      	movt	r0, #0x29c3
 8001a9c:      	movt	r1, #0x5ff1
 8001aa0:      	bx	lr

08001aa2 <<core::panic::PanicInfo as core::fmt::Display>::fmt::hb2e955bf0946ee04>:
 8001aa2:      	push	{r4, r5, r6, r7, lr}
 8001aa4:      	add	r7, sp, #0xc
 8001aa6:      	str	r11, [sp, #-4]!
 8001aaa:      	sub	sp, #0x38
 8001aac:      	mov	r4, r1
 8001aae:      	mov	r5, r0
 8001ab0:      	ldrd	r0, r1, [r1, #24]
 8001ab4:      	movs	r2, #0xc
 8001ab6:      	ldr	r3, [r1, #0xc]
 8001ab8:      	movw	r1, #0x372c
 8001abc:      	movt	r1, #0x800
 8001ac0:      	blx	r3
 8001ac2:      	cbz	r0, #0xa
 8001ac4:      	movs	r6, #0x1
 8001ac6:      	mov	r0, r6
 8001ac8:      	add	sp, #0x38
 8001aca:      	ldr	r11, [sp], #4
 8001ace:      	pop	{r4, r5, r6, r7, pc}
 8001ad0:      	ldr	r0, [r5, #0x8]
 8001ad2:      	cbz	r0, #0xe
 8001ad4:      	movw	r2, #0x26dd
 8001ad8:      	str	r0, [sp, #0x4]
 8001ada:      	ldrd	r0, r1, [r4, #24]
 8001ade:      	movt	r2, #0x800
 8001ae2:      	b	#0x2e <<core::panic::PanicInfo as core::fmt::Display>::fmt::hb2e955bf0946ee04+0x72>
 8001ae4:      	ldrd	r6, r0, [r5]
 8001ae8:      	ldr	r1, [r0, #0xc]
 8001aea:      	mov	r0, r6
 8001aec:      	blx	r1
 8001aee:      	movw	r2, #0xa91e
 8001af2:      	movt	r2, #0x7ef2
 8001af6:      	eors	r1, r2
 8001af8:      	movw	r2, #0xbcf4
 8001afc:      	movt	r2, #0xecc7
 8001b00:      	eors	r0, r2
 8001b02:      	orrs	r0, r1
 8001b04:      	bne	#0x38 <<core::panic::PanicInfo as core::fmt::Display>::fmt::hb2e955bf0946ee04+0x9e>
 8001b06:      	ldrd	r0, r1, [r4, #24]
 8001b0a:      	movw	r2, #0x26cf
 8001b0e:      	movt	r2, #0x800
 8001b12:      	str	r6, [sp, #0x4]
 8001b14:      	str	r2, [sp, #0xc]
 8001b16:      	add	r2, sp, #0x4
 8001b18:      	str	r2, [sp, #0x8]
 8001b1a:      	add	r2, sp, #0x8
 8001b1c:      	str	r2, [sp, #0x30]
 8001b1e:      	movs	r2, #0x0
 8001b20:      	str	r2, [sp, #0x2c]
 8001b22:      	movs	r6, #0x1
 8001b24:      	str	r2, [sp, #0x28]
 8001b26:      	movs	r2, #0x2
 8001b28:      	str	r2, [sp, #0x24]
 8001b2a:      	movw	r2, #0x373c
 8001b2e:      	movt	r2, #0x800
 8001b32:      	str	r6, [sp, #0x34]
 8001b34:      	str	r2, [sp, #0x20]
 8001b36:      	add	r2, sp, #0x20
 8001b38:      	bl	#0xb0
 8001b3c:      	cmp	r0, #0x0
 8001b3e:      	bne	#-0x7c <<core::panic::PanicInfo as core::fmt::Display>::fmt::hb2e955bf0946ee04+0x24>
 8001b40:      	ldr	r2, [r5, #0xc]
 8001b42:      	movw	r3, #0x25dd
 8001b46:      	movt	r3, #0x800
 8001b4a:      	ldrd	r0, r1, [r4, #24]
 8001b4e:      	add.w	r6, r2, #0xc
 8001b52:      	str	r3, [sp, #0x1c]
 8001b54:      	strd	r3, r6, [sp, #20]
 8001b58:      	add.w	r3, r2, #0x8
 8001b5c:      	str	r3, [sp, #0x10]
 8001b5e:      	movw	r3, #0x2709
 8001b62:      	movt	r3, #0x800
 8001b66:      	strd	r2, r3, [sp, #8]
 8001b6a:      	add	r3, sp, #0x8
 8001b6c:      	movs	r2, #0x3
 8001b6e:      	str	r3, [sp, #0x30]
 8001b70:      	movs	r3, #0x0
 8001b72:      	str	r2, [sp, #0x34]
 8001b74:      	strd	r2, r3, [sp, #36]
 8001b78:      	movw	r2, #0x3750
 8001b7c:      	movt	r2, #0x800
 8001b80:      	str	r3, [sp, #0x2c]
 8001b82:      	str	r2, [sp, #0x20]
 8001b84:      	add	r2, sp, #0x20
 8001b86:      	bl	#0x62
 8001b8a:      	mov	r6, r0
 8001b8c:      	mov	r0, r6
 8001b8e:      	add	sp, #0x38
 8001b90:      	ldr	r11, [sp], #4
 8001b94:      	pop	{r4, r5, r6, r7, pc}

08001b96 <core::panicking::panic::h2fdeef68765307fb>:
 8001b96:      	push	{r7, lr}
 8001b98:      	mov	r7, sp
 8001b9a:      	sub	sp, #0x20
 8001b9c:      	mov	r12, r2
 8001b9e:      	movw	r2, #0x370c
 8001ba2:      	movt	r2, #0x800
 8001ba6:      	movs	r3, #0x0
 8001ba8:      	strd	r0, r1, [sp, #24]
 8001bac:      	mov	r0, sp
 8001bae:      	str	r2, [sp, #0x10]
 8001bb0:      	movs	r2, #0x1
 8001bb2:      	mov	r1, r12
 8001bb4:      	str	r2, [sp, #0x4]
 8001bb6:      	add	r2, sp, #0x18
 8001bb8:      	str	r3, [sp, #0x14]
 8001bba:      	strd	r3, r3, [sp, #8]
 8001bbe:      	str	r2, [sp]
 8001bc0:      	bl	#0x2
 8001bc4:      	trap

08001bc6 <core::panicking::panic_fmt::hcfbe8e2ea475d73b>:
 8001bc6:      	push	{r7, lr}
 8001bc8:      	mov	r7, sp
 8001bca:      	sub	sp, #0x10
 8001bcc:      	strd	r0, r1, [sp, #8]
 8001bd0:      	movw	r0, #0x371c
 8001bd4:      	movt	r0, #0x800
 8001bd8:      	str	r0, [sp, #0x4]
 8001bda:      	movw	r0, #0x370c
 8001bde:      	movt	r0, #0x800
 8001be2:      	str	r0, [sp]
 8001be4:      	mov	r0, sp
 8001be6:      	bl	#0xb2a
 8001bea:      	trap

08001bec <core::fmt::write::h0488a56c64cf2c37>:
 8001bec:      	push	{r4, r5, r6, r7, lr}
 8001bee:      	add	r7, sp, #0xc
 8001bf0:      	push.w	{r8, r9, r10, r11}
 8001bf4:      	sub	sp, #0x34
 8001bf6:      	mov	r4, r2
 8001bf8:      	movs	r2, #0x3
 8001bfa:      	ldr.w	r11, [r4, #0x8]
 8001bfe:      	strb.w	r2, [sp, #0x30]
 8001c02:      	movs	r2, #0x20
 8001c04:      	str	r2, [sp, #0x14]
 8001c06:      	movs	r2, #0x0
 8001c08:      	cmp.w	r11, #0x0
 8001c0c:      	str	r2, [sp, #0x10]
 8001c0e:      	str	r1, [sp, #0x2c]
 8001c10:      	str	r0, [sp, #0x28]
 8001c12:      	str	r2, [sp, #0x20]
 8001c14:      	str	r2, [sp, #0x18]
 8001c16:      	beq	#0xe2 <core::fmt::write::h0488a56c64cf2c37+0x110>
 8001c18:      	ldr	r2, [r4, #0xc]
 8001c1a:      	ldrd	r6, r10, [r4]
 8001c1e:      	cmp	r2, r10
 8001c20:      	it	hi
 8001c22:      	movhi	r2, r10
 8001c24:      	cmp	r2, #0x0
 8001c26:      	str	r6, [sp, #0xc]
 8001c28:      	beq.w	#0x12c <core::fmt::write::h0488a56c64cf2c37+0x16c>
 8001c2c:      	strd	r10, r2, [sp, #4]
 8001c30:      	ldrd	r3, r2, [r6]
 8001c34:      	ldr	r6, [r1, #0xc]
 8001c36:      	mov	r1, r3
 8001c38:      	blx	r6
 8001c3a:      	cmp	r0, #0x0
 8001c3c:      	bne.w	#0x144 <core::fmt::write::h0488a56c64cf2c37+0x198>
 8001c40:      	ldr	r0, [sp, #0x8]
 8001c42:      	movs	r5, #0x0
 8001c44:      	ldr.w	r9, [r4, #0x10]
 8001c48:      	mov.w	r8, #0x10
 8001c4c:      	sub.w	r10, r0, #0x1
 8001c50:      	add.w	r0, r11, r5, lsl #2
 8001c54:      	ldrd	r1, r2, [r0, #20]
 8001c58:      	ldrd	r3, r4, [r0, #4]
 8001c5c:      	ldrb	r6, [r0, #0x1c]
 8001c5e:      	str	r3, [sp, #0x14]
 8001c60:      	strb.w	r6, [sp, #0x30]
 8001c64:      	str	r4, [sp, #0x10]
 8001c66:      	cbz	r1, #0x1e
 8001c68:      	cmp	r1, #0x2
 8001c6a:      	beq	#0x10 <core::fmt::write::h0488a56c64cf2c37+0x92>
 8001c6c:      	add.w	r1, r9, r2, lsl #3
 8001c70:      	movw	r3, #0x1a8b
 8001c74:      	movt	r3, #0x800
 8001c78:      	ldr	r1, [r1, #0x4]
 8001c7a:      	cmp	r1, r3
 8001c7c:      	beq	#0x2 <core::fmt::write::h0488a56c64cf2c37+0x96>
 8001c7e:      	movs	r3, #0x0
 8001c80:      	b	#0x6 <core::fmt::write::h0488a56c64cf2c37+0x9e>
 8001c82:      	ldr.w	r1, [r9, r2, lsl #3]
 8001c86:      	ldr	r2, [r1]
 8001c88:      	movs	r3, #0x1
 8001c8a:      	ldr.w	r1, [r11, r8]
 8001c8e:      	strd	r3, r2, [sp, #24]
 8001c92:      	ldr	r0, [r0, #0xc]
 8001c94:      	cbz	r0, #0x1e
 8001c96:      	cmp	r0, #0x2
 8001c98:      	beq	#0x10 <core::fmt::write::h0488a56c64cf2c37+0xc0>
 8001c9a:      	add.w	r0, r9, r1, lsl #3
 8001c9e:      	movw	r2, #0x1a8b
 8001ca2:      	movt	r2, #0x800
 8001ca6:      	ldr	r0, [r0, #0x4]
 8001ca8:      	cmp	r0, r2
 8001caa:      	beq	#0x2 <core::fmt::write::h0488a56c64cf2c37+0xc4>
 8001cac:      	movs	r2, #0x0
 8001cae:      	b	#0x6 <core::fmt::write::h0488a56c64cf2c37+0xcc>
 8001cb0:      	ldr.w	r0, [r9, r1, lsl #3]
 8001cb4:      	ldr	r1, [r0]
 8001cb6:      	movs	r2, #0x1
 8001cb8:      	add.w	r0, r11, r8
 8001cbc:      	ldr	r3, [r0, #-16]
 8001cc0:      	str	r1, [sp, #0x24]
 8001cc2:      	add.w	r1, r9, r3, lsl #3
 8001cc6:      	ldr.w	r0, [r9, r3, lsl #3]
 8001cca:      	ldr	r3, [r1, #0x4]
 8001ccc:      	add	r1, sp, #0x10
 8001cce:      	str	r2, [sp, #0x20]
 8001cd0:      	blx	r3
 8001cd2:      	cmp	r0, #0x0
 8001cd4:      	bne	#0xac <core::fmt::write::h0488a56c64cf2c37+0x198>
 8001cd6:      	cmp.w	r10, #0x0
 8001cda:      	beq	#0xb0 <core::fmt::write::h0488a56c64cf2c37+0x1a2>
 8001cdc:      	ldr	r1, [sp, #0xc]
 8001cde:      	ldrd	r0, r3, [sp, #40]
 8001ce2:      	adds	r2, r1, r5
 8001ce4:      	ldr	r3, [r3, #0xc]
 8001ce6:      	ldrd	r1, r2, [r2, #8]
 8001cea:      	blx	r3
 8001cec:      	sub.w	r10, r10, #0x1
 8001cf0:      	add.w	r8, r8, #0x20
 8001cf4:      	adds	r5, #0x8
 8001cf6:      	cmp	r0, #0x0
 8001cf8:      	beq	#-0xac <core::fmt::write::h0488a56c64cf2c37+0x64>
 8001cfa:      	b	#0x86 <core::fmt::write::h0488a56c64cf2c37+0x198>
 8001cfc:      	ldr.w	r9, [r4, #0x14]
 8001d00:      	ldrd	r6, r10, [r4]
 8001d04:      	cmp	r9, r10
 8001d06:      	it	hi
 8001d08:      	movhi	r9, r10
 8001d0a:      	cmp.w	r9, #0x0
 8001d0e:      	str	r6, [sp, #0xc]
 8001d10:      	beq	#0x4e <core::fmt::write::h0488a56c64cf2c37+0x176>
 8001d12:      	ldrd	r3, r2, [r6]
 8001d16:      	ldr	r6, [r1, #0xc]
 8001d18:      	ldr	r5, [r4, #0x10]
 8001d1a:      	mov	r1, r3
 8001d1c:      	blx	r6
 8001d1e:      	cbnz	r0, #0x62
 8001d20:      	sub.w	r6, r9, #0x1
 8001d24:      	add.w	r8, sp, #0x10
 8001d28:      	movs	r4, #0x0
 8001d2a:      	add.w	r1, r5, r4, lsl #3
 8001d2e:      	ldr.w	r0, [r5, r4, lsl #3]
 8001d32:      	ldr	r2, [r1, #0x4]
 8001d34:      	mov	r1, r8
 8001d36:      	blx	r2
 8001d38:      	cbnz	r0, #0x48
 8001d3a:      	cmp	r6, r4
 8001d3c:      	beq	#0x26 <core::fmt::write::h0488a56c64cf2c37+0x17a>
 8001d3e:      	ldr	r1, [sp, #0xc]
 8001d40:      	ldrd	r0, r3, [sp, #40]
 8001d44:      	add.w	r2, r1, r4, lsl #3
 8001d48:      	ldr	r3, [r3, #0xc]
 8001d4a:      	ldrd	r1, r2, [r2, #8]
 8001d4e:      	blx	r3
 8001d50:      	adds	r4, #0x1
 8001d52:      	cmp	r0, #0x0
 8001d54:      	beq	#-0x2e <core::fmt::write::h0488a56c64cf2c37+0x13e>
 8001d56:      	b	#0x2a <core::fmt::write::h0488a56c64cf2c37+0x198>
 8001d58:      	mov.w	r9, #0x0
 8001d5c:      	cmp	r10, r9
 8001d5e:      	bhi	#0x8 <core::fmt::write::h0488a56c64cf2c37+0x17e>
 8001d60:      	b	#0x32 <core::fmt::write::h0488a56c64cf2c37+0x1aa>
 8001d62:      	mov.w	r9, #0x0
 8001d66:      	cmp	r10, r9
 8001d68:      	bls	#0x2a <core::fmt::write::h0488a56c64cf2c37+0x1aa>
 8001d6a:      	ldr	r2, [sp, #0xc]
 8001d6c:      	mov	r1, r9
 8001d6e:      	ldrd	r0, r3, [sp, #40]
 8001d72:      	mov	r6, r9
 8001d74:      	ldr	r3, [r3, #0xc]
 8001d76:      	ldr.w	r1, [r2, r1, lsl #3]
 8001d7a:      	add.w	r2, r2, r9, lsl #3
 8001d7e:      	ldr	r2, [r2, #0x4]
 8001d80:      	blx	r3
 8001d82:      	cbz	r0, #0x10
 8001d84:      	movs	r0, #0x1
 8001d86:      	add	sp, #0x34
 8001d88:      	pop.w	{r8, r9, r10, r11}
 8001d8c:      	pop	{r4, r5, r6, r7, pc}
 8001d8e:      	ldrd	r10, r9, [sp, #4]
 8001d92:      	cmp	r10, r9
 8001d94:      	bhi	#-0x2e <core::fmt::write::h0488a56c64cf2c37+0x17e>
 8001d96:      	movs	r0, #0x0
 8001d98:      	add	sp, #0x34
 8001d9a:      	pop.w	{r8, r9, r10, r11}
 8001d9e:      	pop	{r4, r5, r6, r7, pc}

08001da0 <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46>:
 8001da0:      	push	{r4, r5, r6, r7, lr}
 8001da2:      	add	r7, sp, #0xc
 8001da4:      	push.w	{r8, r9, r10, r11}
 8001da8:      	sub	sp, #0x14
 8001daa:      	ldr	r4, [r7, #0xc]
 8001dac:      	mov	r10, r3
 8001dae:      	mov	r11, r0
 8001db0:      	cbz	r1, #0x3a
 8001db2:      	ldr.w	lr, [r11]
 8001db6:      	movs	r1, #0x2b
 8001db8:      	ands	r0, lr, #0x1
 8001dbc:      	it	eq
 8001dbe:      	moveq.w	r1, #0x110000
 8001dc2:      	add.w	r8, r0, r4
 8001dc6:      	ldr	r6, [r7, #0x8]
 8001dc8:      	lsls.w	r0, lr, #0x1d
 8001dcc:      	bpl	#0x30 <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46+0x60>
 8001dce:      	cmp.w	r10, #0x0
 8001dd2:      	beq	#0x48 <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46+0x7e>
 8001dd4:      	sub.w	r0, r10, #0x1
 8001dd8:      	and	r12, r10, #0x3
 8001ddc:      	cmp	r0, #0x3
 8001dde:      	bhs	#0x42 <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46+0x84>
 8001de0:      	mov.w	r9, #0x0
 8001de4:      	mov	r3, r2
 8001de6:      	cmp.w	r12, #0x0
 8001dea:      	bne	#0x9c <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46+0xea>
 8001dec:      	b	#0xd0 <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46+0x120>
 8001dee:      	ldr.w	lr, [r11]
 8001df2:      	add.w	r8, r4, #0x1
 8001df6:      	movs	r1, #0x2d
 8001df8:      	ldr	r6, [r7, #0x8]
 8001dfa:      	lsls.w	r0, lr, #0x1d
 8001dfe:      	bmi	#-0x34 <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46+0x2e>
 8001e00:      	movs	r2, #0x0
 8001e02:      	mov.w	r10, #0x0
 8001e06:      	ldr.w	r0, [r11, #0x8]
 8001e0a:      	cmp	r0, #0x1
 8001e0c:      	beq	#0xba <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46+0x12a>
 8001e0e:      	mov	r0, r11
 8001e10:      	mov	r3, r10
 8001e12:      	bl	#0x248
 8001e16:      	cmp	r0, #0x0
 8001e18:      	beq	#0xec <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46+0x168>
 8001e1a:      	movs	r5, #0x1
 8001e1c:      	b	#0x124 <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46+0x1a4>
 8001e1e:      	mov.w	r9, #0x0
 8001e22:      	b	#0x9a <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46+0x120>
 8001e24:      	str	r1, [sp, #0x10]
 8001e26:      	bic	r1, r10, #0x3
 8001e2a:      	rsbs	r5, r1, #0
 8001e2c:      	mov	r3, r2
 8001e2e:      	mov.w	r9, #0x0
 8001e32:      	mov	r1, r2
 8001e34:      	strd	r4, r6, [sp, #8]
 8001e38:      	ldrb	r2, [r3], #4
 8001e3c:      	ldrb	r6, [r3, #-3]
 8001e40:      	and	r2, r2, #0xc0
 8001e44:      	ldrb	r0, [r3, #-2]
 8001e48:      	cmp	r2, #0x80
 8001e4a:      	ldrb	r4, [r3, #-1]
 8001e4e:      	and	r2, r6, #0xc0
 8001e52:      	it	ne
 8001e54:      	addne.w	r9, r9, #0x1
 8001e58:      	cmp	r2, #0x80
 8001e5a:      	and	r0, r0, #0xc0
 8001e5e:      	it	ne
 8001e60:      	addne.w	r9, r9, #0x1
 8001e64:      	cmp	r0, #0x80
 8001e66:      	and	r0, r4, #0xc0
 8001e6a:      	it	ne
 8001e6c:      	addne.w	r9, r9, #0x1
 8001e70:      	cmp	r0, #0x80
 8001e72:      	it	ne
 8001e74:      	addne.w	r9, r9, #0x1
 8001e78:      	adds	r5, #0x4
 8001e7a:      	bne	#-0x46 <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46+0x98>
 8001e7c:      	mov	r2, r1
 8001e7e:      	ldrd	r4, r6, [sp, #8]
 8001e82:      	ldr	r1, [sp, #0x10]
 8001e84:      	cmp.w	r12, #0x0
 8001e88:      	beq	#0x34 <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46+0x120>
 8001e8a:      	ldrb	r0, [r3]
 8001e8c:      	and	r0, r0, #0xc0
 8001e90:      	cmp	r0, #0x80
 8001e92:      	it	ne
 8001e94:      	addne.w	r9, r9, #0x1
 8001e98:      	cmp.w	r12, #0x1
 8001e9c:      	beq	#0x20 <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46+0x120>
 8001e9e:      	ldrb	r0, [r3, #0x1]
 8001ea0:      	and	r0, r0, #0xc0
 8001ea4:      	cmp	r0, #0x80
 8001ea6:      	it	ne
 8001ea8:      	addne.w	r9, r9, #0x1
 8001eac:      	cmp.w	r12, #0x2
 8001eb0:      	beq	#0xc <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46+0x120>
 8001eb2:      	ldrb	r0, [r3, #0x2]
 8001eb4:      	and	r0, r0, #0xc0
 8001eb8:      	cmp	r0, #0x80
 8001eba:      	it	ne
 8001ebc:      	addne.w	r9, r9, #0x1
 8001ec0:      	add	r8, r9
 8001ec2:      	ldr.w	r0, [r11, #0x8]
 8001ec6:      	cmp	r0, #0x1
 8001ec8:      	bne	#-0xbe <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46+0x6e>
 8001eca:      	ldr.w	r9, [r11, #0xc]
 8001ece:      	cmp	r9, r8
 8001ed0:      	bls	#0x26 <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46+0x15a>
 8001ed2:      	lsls.w	r0, lr, #0x1c
 8001ed6:      	bmi	#0x48 <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46+0x182>
 8001ed8:      	ldrb.w	r5, [r11, #0x20]
 8001edc:      	sub.w	r0, r9, r8
 8001ee0:      	cmp	r5, #0x3
 8001ee2:      	it	eq
 8001ee4:      	moveq	r5, #0x1
 8001ee6:      	lsls	r3, r5, #0x1e
 8001ee8:      	strd	r2, r1, [sp, #12]
 8001eec:      	beq	#0x7c <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46+0x1cc>
 8001eee:      	cmp	r5, #0x1
 8001ef0:      	bne	#0x7e <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46+0x1d2>
 8001ef2:      	mov.w	r8, #0x0
 8001ef6:      	mov	r1, r0
 8001ef8:      	b	#0x7e <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46+0x1da>
 8001efa:      	mov	r0, r11
 8001efc:      	mov	r3, r10
 8001efe:      	bl	#0x15c
 8001f02:      	cmp	r0, #0x0
 8001f04:      	bne.w	#0x11e <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46+0x286>
 8001f08:      	ldr.w	r1, [r11, #0x1c]
 8001f0c:      	mov	r2, r4
 8001f0e:      	ldr.w	r0, [r11, #0x18]
 8001f12:      	ldr	r3, [r1, #0xc]
 8001f14:      	mov	r1, r6
 8001f16:      	add	sp, #0x14
 8001f18:      	pop.w	{r8, r9, r10, r11}
 8001f1c:      	pop.w	{r4, r5, r6, r7, lr}
 8001f20:      	bx	r3
 8001f22:      	ldr.w	r0, [r11, #0x4]
 8001f26:      	movs	r5, #0x1
 8001f28:      	str	r0, [sp, #0x8]
 8001f2a:      	movs	r0, #0x30
 8001f2c:      	ldrb.w	r3, [r11, #0x20]
 8001f30:      	str	r3, [sp, #0x4]
 8001f32:      	mov	r3, r10
 8001f34:      	str.w	r0, [r11, #0x4]
 8001f38:      	mov	r0, r11
 8001f3a:      	strb.w	r5, [r11, #0x20]
 8001f3e:      	bl	#0x11c
 8001f42:      	cbz	r0, #0x8
 8001f44:      	mov	r0, r5
 8001f46:      	add	sp, #0x14
 8001f48:      	pop.w	{r8, r9, r10, r11}
 8001f4c:      	pop	{r4, r5, r6, r7, pc}
 8001f4e:      	ldrb.w	r1, [r11, #0x20]
 8001f52:      	sub.w	r0, r9, r8
 8001f56:      	cmp	r1, #0x3
 8001f58:      	it	eq
 8001f5a:      	moveq	r1, #0x1
 8001f5c:      	lsls	r2, r1, #0x1e
 8001f5e:      	beq	#0x6e <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46+0x230>
 8001f60:      	cmp	r1, #0x1
 8001f62:      	bne	#0x70 <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46+0x236>
 8001f64:      	mov.w	r8, #0x0
 8001f68:      	mov	r1, r0
 8001f6a:      	b	#0x70 <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46+0x23e>
 8001f6c:      	movs	r1, #0x0
 8001f6e:      	mov	r8, r0
 8001f70:      	b	#0x6 <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46+0x1da>
 8001f72:      	lsrs	r1, r0, #0x1
 8001f74:      	adds	r0, #0x1
 8001f76:      	lsr.w	r8, r0, #0x1
 8001f7a:      	adds	r5, r1, #0x1
 8001f7c:      	subs	r5, #0x1
 8001f7e:      	beq	#0x10 <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46+0x1f2>
 8001f80:      	ldrd	r0, r2, [r11, #24]
 8001f84:      	ldr.w	r1, [r11, #0x4]
 8001f88:      	ldr	r2, [r2, #0x10]
 8001f8a:      	blx	r2
 8001f8c:      	cmp	r0, #0x0
 8001f8e:      	beq	#-0x16 <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46+0x1dc>
 8001f90:      	b	#0x92 <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46+0x286>
 8001f92:      	ldrd	r2, r1, [sp, #12]
 8001f96:      	mov	r0, r11
 8001f98:      	mov	r3, r10
 8001f9a:      	ldr.w	r9, [r11, #0x4]
 8001f9e:      	bl	#0xbc
 8001fa2:      	cmp	r0, #0x0
 8001fa4:      	bne	#0x7e <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46+0x286>
 8001fa6:      	ldrd	r0, r1, [r11, #24]
 8001faa:      	mov	r2, r4
 8001fac:      	ldr	r3, [r1, #0xc]
 8001fae:      	mov	r1, r6
 8001fb0:      	blx	r3
 8001fb2:      	cbnz	r0, #0x70
 8001fb4:      	ldrd	r6, r5, [r11, #24]
 8001fb8:      	movs	r4, #0x0
 8001fba:      	cmp	r8, r4
 8001fbc:      	beq	#0x8a <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46+0x2aa>
 8001fbe:      	ldr	r2, [r5, #0x10]
 8001fc0:      	mov	r0, r6
 8001fc2:      	mov	r1, r9
 8001fc4:      	blx	r2
 8001fc6:      	adds	r4, #0x1
 8001fc8:      	cmp	r0, #0x0
 8001fca:      	beq	#-0x14 <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46+0x21a>
 8001fcc:      	subs	r0, r4, #0x1
 8001fce:      	b	#0x7a <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46+0x2ac>
 8001fd0:      	movs	r1, #0x0
 8001fd2:      	mov	r8, r0
 8001fd4:      	b	#0x6 <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46+0x23e>
 8001fd6:      	lsrs	r1, r0, #0x1
 8001fd8:      	adds	r0, #0x1
 8001fda:      	lsr.w	r8, r0, #0x1
 8001fde:      	adds	r5, r1, #0x1
 8001fe0:      	subs	r5, #0x1
 8001fe2:      	beq	#0x10 <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46+0x256>
 8001fe4:      	ldrd	r0, r2, [r11, #24]
 8001fe8:      	ldr.w	r1, [r11, #0x4]
 8001fec:      	ldr	r2, [r2, #0x10]
 8001fee:      	blx	r2
 8001ff0:      	cmp	r0, #0x0
 8001ff2:      	beq	#-0x16 <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46+0x240>
 8001ff4:      	b	#0x2e <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46+0x286>
 8001ff6:      	ldrd	r0, r1, [r11, #24]
 8001ffa:      	mov	r2, r4
 8001ffc:      	ldr	r3, [r1, #0xc]
 8001ffe:      	mov	r1, r6
 8002000:      	ldr.w	r9, [r11, #0x4]
 8002004:      	blx	r3
 8002006:      	cbnz	r0, #0x1c
 8002008:      	ldrd	r10, r6, [r11, #24]
 800200c:      	movs	r5, #0x0
 800200e:      	cmp	r8, r5
 8002010:      	beq	#0x1e <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46+0x292>
 8002012:      	ldr	r2, [r6, #0x10]
 8002014:      	mov	r0, r10
 8002016:      	mov	r1, r9
 8002018:      	blx	r2
 800201a:      	adds	r5, #0x1
 800201c:      	cmp	r0, #0x0
 800201e:      	beq	#-0x14 <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46+0x26e>
 8002020:      	subs	r0, r5, #0x1
 8002022:      	cmp	r0, r8
 8002024:      	bhs	#0xa <core::fmt::Formatter::pad_integral::h30f5a874ceb67a46+0x292>
 8002026:      	movs	r5, #0x1
 8002028:      	mov	r0, r5
 800202a:      	add	sp, #0x14
 800202c:      	pop.w	{r8, r9, r10, r11}
 8002030:      	pop	{r4, r5, r6, r7, pc}
 8002032:      	ldr	r0, [sp, #0x4]
 8002034:      	movs	r5, #0x0
 8002036:      	strb.w	r0, [r11, #0x20]
 800203a:      	ldr	r0, [sp, #0x8]
 800203c:      	str.w	r0, [r11, #0x4]
 8002040:      	mov	r0, r5
 8002042:      	add	sp, #0x14
 8002044:      	pop.w	{r8, r9, r10, r11}
 8002048:      	pop	{r4, r5, r6, r7, pc}
 800204a:      	mov	r0, r8
 800204c:      	movs	r5, #0x0
 800204e:      	cmp	r0, r8
 8002050:      	it	lo
 8002052:      	movlo	r5, #0x1
 8002054:      	mov	r0, r5
 8002056:      	add	sp, #0x14
 8002058:      	pop.w	{r8, r9, r10, r11}
 800205c:      	pop	{r4, r5, r6, r7, pc}

0800205e <core::fmt::Formatter::pad_integral::write_prefix::hf7eb1714b1ce80e8>:
 800205e:      	push	{r4, r5, r6, r7, lr}
 8002060:      	add	r7, sp, #0xc
 8002062:      	str	r11, [sp, #-4]!
 8002066:      	mov	r4, r3
 8002068:      	mov	r5, r2
 800206a:      	mov	r6, r0
 800206c:      	cmp.w	r1, #0x110000
 8002070:      	beq	#0x10 <core::fmt::Formatter::pad_integral::write_prefix::hf7eb1714b1ce80e8+0x26>
 8002072:      	ldrd	r0, r2, [r6, #24]
 8002076:      	ldr	r2, [r2, #0x10]
 8002078:      	blx	r2
 800207a:      	cbz	r0, #0x6
 800207c:      	movs	r0, #0x1
 800207e:      	ldr	r11, [sp], #4
 8002082:      	pop	{r4, r5, r6, r7, pc}
 8002084:      	cbz	r5, #0x12
 8002086:      	ldrd	r0, r1, [r6, #24]
 800208a:      	mov	r2, r4
 800208c:      	ldr	r3, [r1, #0xc]
 800208e:      	mov	r1, r5
 8002090:      	ldr	r11, [sp], #4
 8002094:      	pop.w	{r4, r5, r6, r7, lr}
 8002098:      	bx	r3
 800209a:      	movs	r0, #0x0
 800209c:      	ldr	r11, [sp], #4
 80020a0:      	pop	{r4, r5, r6, r7, pc}

080020a2 <core::fmt::Formatter::pad::hb5d3a89dfc81b052>:
 80020a2:      	push	{r4, r5, r6, r7, lr}
 80020a4:      	add	r7, sp, #0xc
 80020a6:      	push.w	{r8, r9, r10, r11}
 80020aa:      	sub	sp, #0xc
 80020ac:      	ldr.w	lr, [r0, #0x8]
 80020b0:      	mov	r11, r0
 80020b2:      	ldr	r0, [r0, #0x10]
 80020b4:      	mov	r9, r2
 80020b6:      	cmp.w	lr, #0x1
 80020ba:      	bne	#0x26 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x42>
 80020bc:      	cmp	r0, #0x1
 80020be:      	beq	#0x28 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x48>
 80020c0:      	cmp.w	r9, #0x0
 80020c4:      	beq.w	#0x260 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x286>
 80020c8:      	sub.w	lr, r9, #0x1
 80020cc:      	and	r12, r9, #0x3
 80020d0:      	cmp.w	lr, #0x3
 80020d4:      	bhs	#0xec <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x122>
 80020d6:      	movs	r3, #0x0
 80020d8:      	mov	r2, r1
 80020da:      	cmp.w	r12, #0x0
 80020de:      	bne.w	#0x132 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x172>
 80020e2:      	b	#0x15e <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x1a2>
 80020e4:      	cmp	r0, #0x1
 80020e6:      	bne.w	#0x26a <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x2b2>
 80020ea:      	ldr.w	r3, [r11, #0x14]
 80020ee:      	add.w	r5, r1, r9
 80020f2:      	movs	r2, #0x0
 80020f4:      	str	r1, [sp, #0x8]
 80020f6:      	cmp	r3, #0x0
 80020f8:      	beq	#0x98 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0xf2>
 80020fa:      	mov	r4, r1
 80020fc:      	str.w	lr, [sp, #0x4]
 8002100:      	cmp	r4, r5
 8002102:      	beq	#0xb0 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x114>
 8002104:      	mov	r6, r4
 8002106:      	mov	r1, r4
 8002108:      	ldrsb	r0, [r6], #1
 800210c:      	cmp.w	r0, #0xffffffff
 8002110:      	ble	#0xc <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x7e>
 8002112:      	mov	r4, r6
 8002114:      	subs	r0, r2, r1
 8002116:      	subs	r3, #0x1
 8002118:      	add.w	r2, r0, r4
 800211c:      	bne	#-0x20 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x5e>
 800211e:      	b	#0x74 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0xf4>
 8002120:      	cmp	r6, r5
 8002122:      	beq	#0xe <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x92>
 8002124:      	ldrb	r4, [r1, #0x1]
 8002126:      	adds	r6, r1, #0x2
 8002128:      	and	r10, r4, #0x3f
 800212c:      	uxtb	r0, r0
 800212e:      	cmp	r0, #0xe0
 8002130:      	blo	#-0x22 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x70>
 8002132:      	b	#0xa <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x9e>
 8002134:      	mov.w	r10, #0x0
 8002138:      	mov	r6, r5
 800213a:      	uxtb	r0, r0
 800213c:      	cmp	r0, #0xe0
 800213e:      	blo	#-0x30 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x70>
 8002140:      	cmp	r6, r5
 8002142:      	beq	#0xc <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0xb0>
 8002144:      	ldrb	r4, [r6], #1
 8002148:      	and	r12, r4, #0x3f
 800214c:      	cmp	r0, #0xf0
 800214e:      	blo	#-0x40 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x70>
 8002150:      	b	#0x8 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0xba>
 8002152:      	mov.w	r12, #0x0
 8002156:      	mov	r6, r5
 8002158:      	cmp	r0, #0xf0
 800215a:      	blo	#-0x4c <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x70>
 800215c:      	mov	lr, r9
 800215e:      	cmp	r6, r5
 8002160:      	beq	#0xa <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0xcc>
 8002162:      	ldrb	r4, [r6], #1
 8002166:      	and	r8, r4, #0x3f
 800216a:      	mov	r4, r6
 800216c:      	b	#0x4 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0xd2>
 800216e:      	mov.w	r8, #0x0
 8002172:      	mov	r4, r5
 8002174:      	mov.w	r9, #0x1c0000
 8002178:      	and.w	r0, r9, r0, lsl #18
 800217c:      	orr.w	r0, r0, r10, lsl #12
 8002180:      	mov	r9, lr
 8002182:      	orr.w	r0, r0, r12, lsl #6
 8002186:      	ldr.w	lr, [sp, #0x4]
 800218a:      	add	r0, r8
 800218c:      	cmp.w	r0, #0x110000
 8002190:      	bne	#-0x80 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x72>
 8002192:      	b	#0x20 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x114>
 8002194:      	mov	r6, r1
 8002196:      	cmp	r6, r5
 8002198:      	beq	#0x1a <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x114>
 800219a:      	mov	r0, r6
 800219c:      	ldr	r1, [sp, #0x8]
 800219e:      	ldrsb	r3, [r0], #1
 80021a2:      	cmp.w	r3, #0xffffffff
 80021a6:      	ble	#0xb6 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x1be>
 80021a8:      	cmp	r2, #0x0
 80021aa:      	it	ne
 80021ac:      	cmpne	r2, r9
 80021ae:      	bne.w	#0x14a <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x25a>
 80021b2:      	mov	r0, r1
 80021b4:      	b	#0x156 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x26c>
 80021b6:      	mov	r2, r9
 80021b8:      	ldr	r1, [sp, #0x8]
 80021ba:      	cmp.w	lr, #0x1
 80021be:      	bne.w	#0x270 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x390>
 80021c2:      	b	#0x158 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x27c>
 80021c4:      	bic	r0, r9, #0x3
 80021c8:      	movs	r3, #0x0
 80021ca:      	rsbs	r6, r0, #0
 80021cc:      	mov	r8, r1
 80021ce:      	mov	r2, r1
 80021d0:      	ldrb	r5, [r2], #4
 80021d4:      	ldrb	r4, [r2, #-3]
 80021d8:      	and	r5, r5, #0xc0
 80021dc:      	ldrb	r0, [r2, #-2]
 80021e0:      	cmp	r5, #0x80
 80021e2:      	ldrb	r1, [r2, #-1]
 80021e6:      	and	r4, r4, #0xc0
 80021ea:      	it	ne
 80021ec:      	addne	r3, #0x1
 80021ee:      	cmp	r4, #0x80
 80021f0:      	and	r0, r0, #0xc0
 80021f4:      	it	ne
 80021f6:      	addne	r3, #0x1
 80021f8:      	cmp	r0, #0x80
 80021fa:      	and	r0, r1, #0xc0
 80021fe:      	it	ne
 8002200:      	addne	r3, #0x1
 8002202:      	cmp	r0, #0x80
 8002204:      	it	ne
 8002206:      	addne	r3, #0x1
 8002208:      	adds	r6, #0x4
 800220a:      	bne	#-0x3e <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x12e>
 800220c:      	mov	r1, r8
 800220e:      	cmp.w	r12, #0x0
 8002212:      	beq	#0x2e <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x1a2>
 8002214:      	ldrb	r0, [r2]
 8002216:      	and	r0, r0, #0xc0
 800221a:      	cmp	r0, #0x80
 800221c:      	it	ne
 800221e:      	addne	r3, #0x1
 8002220:      	cmp.w	r12, #0x1
 8002224:      	beq	#0x1c <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x1a2>
 8002226:      	ldrb	r0, [r2, #0x1]
 8002228:      	and	r0, r0, #0xc0
 800222c:      	cmp	r0, #0x80
 800222e:      	it	ne
 8002230:      	addne	r3, #0x1
 8002232:      	cmp.w	r12, #0x2
 8002236:      	beq	#0xa <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x1a2>
 8002238:      	ldrb	r0, [r2, #0x2]
 800223a:      	and	r0, r0, #0xc0
 800223e:      	cmp	r0, #0x80
 8002240:      	it	ne
 8002242:      	addne	r3, #0x1
 8002244:      	ldr.w	r8, [r11, #0xc]
 8002248:      	cmp	r3, r8
 800224a:      	bhs.w	#0x106 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x2b2>
 800224e:      	cmp.w	lr, #0x3
 8002252:      	bhs	#0x24 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x1d8>
 8002254:      	movs	r2, #0x0
 8002256:      	mov	r3, r1
 8002258:      	cmp.w	r12, #0x0
 800225c:      	bne	#0x6a <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x228>
 800225e:      	b	#0xd2 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x292>
 8002260:      	uxtb	r4, r3
 8002262:      	cmp	r0, r5
 8002264:      	beq.w	#0x174 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x33a>
 8002268:      	ldrb	r3, [r6, #0x1]
 800226a:      	adds	r0, r6, #0x2
 800226c:      	and	r3, r3, #0x3f
 8002270:      	lsls	r3, r3, #0x6
 8002272:      	cmp	r4, #0xe0
 8002274:      	bhs.w	#0x16e <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x344>
 8002278:      	b	#-0xd4 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x106>
 800227a:      	bic	r0, r9, #0x3
 800227e:      	movs	r2, #0x0
 8002280:      	rsbs	r6, r0, #0
 8002282:      	mov	lr, r1
 8002284:      	mov	r3, r1
 8002286:      	ldrb	r0, [r3], #4
 800228a:      	ldrb	r5, [r3, #-3]
 800228e:      	and	r0, r0, #0xc0
 8002292:      	ldrb	r4, [r3, #-2]
 8002296:      	cmp	r0, #0x80
 8002298:      	ldrb	r1, [r3, #-1]
 800229c:      	and	r0, r5, #0xc0
 80022a0:      	it	ne
 80022a2:      	addne	r2, #0x1
 80022a4:      	cmp	r0, #0x80
 80022a6:      	and	r0, r4, #0xc0
 80022aa:      	it	ne
 80022ac:      	addne	r2, #0x1
 80022ae:      	cmp	r0, #0x80
 80022b0:      	and	r0, r1, #0xc0
 80022b4:      	it	ne
 80022b6:      	addne	r2, #0x1
 80022b8:      	cmp	r0, #0x80
 80022ba:      	it	ne
 80022bc:      	addne	r2, #0x1
 80022be:      	adds	r6, #0x4
 80022c0:      	bne	#-0x3e <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x1e4>
 80022c2:      	mov	r1, lr
 80022c4:      	cmp.w	r12, #0x0
 80022c8:      	beq	#0x68 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x292>
 80022ca:      	ldrb	r0, [r3]
 80022cc:      	and	r0, r0, #0xc0
 80022d0:      	cmp	r0, #0x80
 80022d2:      	it	ne
 80022d4:      	addne	r2, #0x1
 80022d6:      	cmp.w	r12, #0x1
 80022da:      	beq	#0x56 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x292>
 80022dc:      	ldrb	r0, [r3, #0x1]
 80022de:      	and	r0, r0, #0xc0
 80022e2:      	cmp	r0, #0x80
 80022e4:      	it	ne
 80022e6:      	addne	r2, #0x1
 80022e8:      	cmp.w	r12, #0x2
 80022ec:      	beq	#0x44 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x292>
 80022ee:      	ldrb	r0, [r3, #0x2]
 80022f0:      	and	r0, r0, #0xc0
 80022f4:      	cmp	r0, #0x80
 80022f6:      	it	ne
 80022f8:      	addne	r2, #0x1
 80022fa:      	b	#0x36 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x292>
 80022fc:      	cmp	r2, r9
 80022fe:      	bhs	#0x8 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x268>
 8002300:      	ldrsb	r0, [r1, r2]
 8002302:      	cmn.w	r0, #0x40
 8002306:      	bge.w	#-0x158 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x110>
 800230a:      	movs	r0, #0x0
 800230c:      	movs	r2, #0x0
 800230e:      	cmp	r0, #0x0
 8002310:      	ite	eq
 8002312:      	moveq	r2, r9
 8002314:      	movne	r1, r0
 8002316:      	cmp.w	lr, #0x1
 800231a:      	bne.w	#0x114 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x390>
 800231e:      	mov	r9, r2
 8002320:      	cmp.w	r9, #0x0
 8002324:      	bne.w	#-0x260 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x26>
 8002328:      	ldr.w	r8, [r11, #0xc]
 800232c:      	cmp.w	r8, #0x0
 8002330:      	beq	#0x20 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x2b2>
 8002332:      	movs	r2, #0x0
 8002334:      	ldrb.w	r0, [r11, #0x20]
 8002338:      	mov	r5, r1
 800233a:      	subs	r3, r0, #0x3
 800233c:      	it	ne
 800233e:      	movne	r3, r0
 8002340:      	lsls	r0, r3, #0x1e
 8002342:      	sub.w	r0, r8, r2
 8002346:      	beq	#0x22 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x2ca>
 8002348:      	cmp	r3, #0x1
 800234a:      	bne	#0x24 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x2d0>
 800234c:      	mov.w	r10, #0x0
 8002350:      	mov	r1, r0
 8002352:      	b	#0x24 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x2d8>
 8002354:      	ldr.w	r2, [r11, #0x1c]
 8002358:      	ldr.w	r0, [r11, #0x18]
 800235c:      	ldr	r3, [r2, #0xc]
 800235e:      	mov	r2, r9
 8002360:      	add	sp, #0xc
 8002362:      	pop.w	{r8, r9, r10, r11}
 8002366:      	pop.w	{r4, r5, r6, r7, lr}
 800236a:      	bx	r3
 800236c:      	movs	r1, #0x0
 800236e:      	mov	r10, r0
 8002370:      	b	#0x6 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x2d8>
 8002372:      	lsrs	r1, r0, #0x1
 8002374:      	adds	r0, #0x1
 8002376:      	lsr.w	r10, r0, #0x1
 800237a:      	adds	r4, r1, #0x1
 800237c:      	subs	r4, #0x1
 800237e:      	beq	#0x10 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x2f0>
 8002380:      	ldrd	r0, r2, [r11, #24]
 8002384:      	ldr.w	r1, [r11, #0x4]
 8002388:      	ldr	r2, [r2, #0x10]
 800238a:      	blx	r2
 800238c:      	cmp	r0, #0x0
 800238e:      	beq	#-0x16 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x2da>
 8002390:      	b	#0x10 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x302>
 8002392:      	ldrd	r0, r1, [r11, #24]
 8002396:      	mov	r2, r9
 8002398:      	ldr	r3, [r1, #0xc]
 800239a:      	mov	r1, r5
 800239c:      	ldr.w	r8, [r11, #0x4]
 80023a0:      	blx	r3
 80023a2:      	cbz	r0, #0x8
 80023a4:      	movs	r0, #0x1
 80023a6:      	add	sp, #0xc
 80023a8:      	pop.w	{r8, r9, r10, r11}
 80023ac:      	pop	{r4, r5, r6, r7, pc}
 80023ae:      	ldrd	r6, r4, [r11, #24]
 80023b2:      	movs	r5, #0x0
 80023b4:      	cmp	r10, r5
 80023b6:      	beq	#0x10 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x328>
 80023b8:      	ldr	r2, [r4, #0x10]
 80023ba:      	mov	r0, r6
 80023bc:      	mov	r1, r8
 80023be:      	blx	r2
 80023c0:      	adds	r5, #0x1
 80023c2:      	cmp	r0, #0x0
 80023c4:      	beq	#-0x14 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x312>
 80023c6:      	subs	r1, r5, #0x1
 80023c8:      	b	#0x0 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x32a>
 80023ca:      	mov	r1, r10
 80023cc:      	movs	r0, #0x0
 80023ce:      	cmp	r1, r10
 80023d0:      	it	lo
 80023d2:      	movlo	r0, #0x1
 80023d4:      	add	sp, #0xc
 80023d6:      	pop.w	{r8, r9, r10, r11}
 80023da:      	pop	{r4, r5, r6, r7, pc}
 80023dc:      	movs	r3, #0x0
 80023de:      	mov	r0, r5
 80023e0:      	cmp	r4, #0xe0
 80023e2:      	blo.w	#-0x23e <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x106>
 80023e6:      	cmp	r0, r5
 80023e8:      	beq	#0xe <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x358>
 80023ea:      	ldrb	r6, [r0], #1
 80023ee:      	and	r6, r6, #0x3f
 80023f2:      	cmp	r4, #0xf0
 80023f4:      	blo.w	#-0x250 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x106>
 80023f8:      	b	#0x8 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x362>
 80023fa:      	movs	r6, #0x0
 80023fc:      	mov	r0, r5
 80023fe:      	cmp	r4, #0xf0
 8002400:      	blo.w	#-0x25c <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x106>
 8002404:      	orrs	r3, r6
 8002406:      	mov.w	r6, #0x1c0000
 800240a:      	and.w	r6, r6, r4, lsl #18
 800240e:      	cmp	r0, r5
 8002410:      	itte	ne
 8002412:      	ldrbne	r0, [r0]
 8002414:      	andne	r0, r0, #0x3f
 8002418:      	moveq	r0, #0x0
 800241a:      	orr.w	r3, r6, r3, lsl #6
 800241e:      	add	r0, r3
 8002420:      	cmp.w	r0, #0x110000
 8002424:      	bne.w	#-0x280 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x106>
 8002428:      	mov	r2, r9
 800242a:      	cmp.w	lr, #0x1
 800242e:      	beq.w	#-0x114 <core::fmt::Formatter::pad::hb5d3a89dfc81b052+0x27c>
 8002432:      	ldrd	r0, r3, [r11, #24]
 8002436:      	ldr	r3, [r3, #0xc]
 8002438:      	add	sp, #0xc
 800243a:      	pop.w	{r8, r9, r10, r11}
 800243e:      	pop.w	{r4, r5, r6, r7, lr}
 8002442:      	bx	r3

08002444 <core::slice::index::slice_start_index_len_fail::h6da6a18547969df2>:
 8002444:      	push	{r7, lr}
 8002446:      	mov	r7, sp
 8002448:      	sub	sp, #0x30
 800244a:      	strd	r0, r1, [sp]
 800244e:      	add	r1, sp, #0x20
 8002450:      	movs	r0, #0x2
 8002452:      	str	r1, [sp, #0x18]
 8002454:      	movs	r1, #0x0
 8002456:      	str	r0, [sp, #0x1c]
 8002458:      	strd	r0, r1, [sp, #12]
 800245c:      	movw	r0, #0x3894
 8002460:      	movt	r0, #0x800
 8002464:      	str	r1, [sp, #0x14]
 8002466:      	str	r0, [sp, #0x8]
 8002468:      	movw	r0, #0x25dd
 800246c:      	add	r1, sp, #0x4
 800246e:      	movt	r0, #0x800
 8002472:      	str	r0, [sp, #0x2c]
 8002474:      	strd	r0, r1, [sp, #36]
 8002478:      	mov	r0, sp
 800247a:      	str	r0, [sp, #0x20]
 800247c:      	add	r0, sp, #0x8
 800247e:      	mov	r1, r2
 8002480:      	bl	#-0x8be
 8002484:      	trap

08002486 <core::slice::index::slice_end_index_len_fail::hd75572cac784a5fb>:
 8002486:      	push	{r7, lr}
 8002488:      	mov	r7, sp
 800248a:      	sub	sp, #0x30
 800248c:      	strd	r0, r1, [sp]
 8002490:      	add	r1, sp, #0x20
 8002492:      	movs	r0, #0x2
 8002494:      	str	r1, [sp, #0x18]
 8002496:      	movs	r1, #0x0
 8002498:      	str	r0, [sp, #0x1c]
 800249a:      	strd	r0, r1, [sp, #12]
 800249e:      	movw	r0, #0x38a4
 80024a2:      	movt	r0, #0x800
 80024a6:      	str	r1, [sp, #0x14]
 80024a8:      	str	r0, [sp, #0x8]
 80024aa:      	movw	r0, #0x25dd
 80024ae:      	add	r1, sp, #0x4
 80024b0:      	movt	r0, #0x800
 80024b4:      	str	r0, [sp, #0x2c]
 80024b6:      	strd	r0, r1, [sp, #36]
 80024ba:      	mov	r0, sp
 80024bc:      	str	r0, [sp, #0x20]
 80024be:      	add	r0, sp, #0x8
 80024c0:      	mov	r1, r2
 80024c2:      	bl	#-0x900
 80024c6:      	trap

080024c8 <core::slice::index::slice_index_order_fail::haadb91a830d09ae2>:
 80024c8:      	push	{r7, lr}
 80024ca:      	mov	r7, sp
 80024cc:      	sub	sp, #0x30
 80024ce:      	strd	r0, r1, [sp]
 80024d2:      	add	r1, sp, #0x20
 80024d4:      	movs	r0, #0x2
 80024d6:      	str	r1, [sp, #0x18]
 80024d8:      	movs	r1, #0x0
 80024da:      	str	r0, [sp, #0x1c]
 80024dc:      	strd	r0, r1, [sp, #12]
 80024e0:      	movw	r0, #0x38d8
 80024e4:      	movt	r0, #0x800
 80024e8:      	str	r1, [sp, #0x14]
 80024ea:      	str	r0, [sp, #0x8]
 80024ec:      	movw	r0, #0x25dd
 80024f0:      	add	r1, sp, #0x4
 80024f2:      	movt	r0, #0x800
 80024f6:      	str	r0, [sp, #0x2c]
 80024f8:      	strd	r0, r1, [sp, #36]
 80024fc:      	mov	r0, sp
 80024fe:      	str	r0, [sp, #0x20]
 8002500:      	add	r0, sp, #0x8
 8002502:      	mov	r1, r2
 8002504:      	bl	#-0x942
 8002508:      	trap

0800250a <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::h95ea76252a2cc6bd>:
 800250a:      	push	{r4, r5, r7, lr}
 800250c:      	add	r7, sp, #0x8
 800250e:      	sub	sp, #0x88
 8002510:      	ldr	r0, [r0]
 8002512:      	add.w	r12, sp, #0x8
 8002516:      	movs	r2, #0x81
 8002518:      	mov.w	lr, #0x0
 800251c:      	and	r3, r0, #0xf
 8002520:      	add.w	r4, r3, #0x37
 8002524:      	cmp	r3, #0xa
 8002526:      	it	lo
 8002528:      	addlo.w	r4, r3, #0x30
 800252c:      	add.w	r3, r12, r2
 8002530:      	cmp.w	lr, r0, lsr #4
 8002534:      	strb	r4, [r3, #-2]
 8002538:      	beq	#0x5c <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::h95ea76252a2cc6bd+0x8e>
 800253a:      	lsrs	r4, r0, #0x4
 800253c:      	and	r4, r4, #0xf
 8002540:      	add.w	r5, r4, #0x37
 8002544:      	cmp	r4, #0xa
 8002546:      	it	lo
 8002548:      	addlo.w	r5, r4, #0x30
 800254c:      	cmp.w	lr, r0, lsr #8
 8002550:      	strb	r5, [r3, #-3]
 8002554:      	beq	#0x46 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::h95ea76252a2cc6bd+0x94>
 8002556:      	lsrs	r4, r0, #0x8
 8002558:      	and	r4, r4, #0xf
 800255c:      	add.w	r5, r4, #0x37
 8002560:      	cmp	r4, #0xa
 8002562:      	it	lo
 8002564:      	addlo.w	r5, r4, #0x30
 8002568:      	cmp.w	lr, r0, lsr #12
 800256c:      	strb	r5, [r3, #-4]
 8002570:      	beq	#0x30 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::h95ea76252a2cc6bd+0x9a>
 8002572:      	lsrs	r4, r0, #0xc
 8002574:      	subs	r2, #0x4
 8002576:      	and	r4, r4, #0xf
 800257a:      	add.w	r5, r4, #0x37
 800257e:      	cmp	r4, #0xa
 8002580:      	it	lo
 8002582:      	addlo.w	r5, r4, #0x30
 8002586:      	strb	r5, [r3, #-5]
 800258a:      	lsrs	r3, r0, #0x10
 800258c:      	cmp.w	lr, r0, lsr #16
 8002590:      	mov	r0, r3
 8002592:      	bne	#-0x7a <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::h95ea76252a2cc6bd+0x12>
 8002594:      	subs	r0, r2, #0x1
 8002596:      	b	#0xe <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::h95ea76252a2cc6bd+0x9e>
 8002598:      	subs	r0, r2, #0x2
 800259a:      	subs	r2, #0x1
 800259c:      	b	#0x8 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::h95ea76252a2cc6bd+0x9e>
 800259e:      	subs	r0, r2, #0x3
 80025a0:      	subs	r2, #0x2
 80025a2:      	b	#0x2 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::h95ea76252a2cc6bd+0x9e>
 80025a4:      	subs	r0, r2, #0x4
 80025a6:      	subs	r2, #0x3
 80025a8:      	cmp	r0, #0x81
 80025aa:      	bhs	#0x1e <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::h95ea76252a2cc6bd+0xc2>
 80025ac:      	rsb.w	r2, r2, #0x81
 80025b0:      	add	r0, r12
 80025b2:      	movs	r3, #0x2
 80025b4:      	strd	r0, r2, [sp]
 80025b8:      	movw	r2, #0x3794
 80025bc:      	mov	r0, r1
 80025be:      	movt	r2, #0x800
 80025c2:      	movs	r1, #0x1
 80025c4:      	bl	#-0x828
 80025c8:      	add	sp, #0x88
 80025ca:      	pop	{r4, r5, r7, pc}
 80025cc:      	movw	r2, #0x3784
 80025d0:      	movs	r1, #0x80
 80025d2:      	movt	r2, #0x800
 80025d6:      	bl	#-0x196
 80025da:      	trap

080025dc <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::h76e23d81c62d5e26>:
 80025dc:      	push	{r4, r5, r6, r7, lr}
 80025de:      	add	r7, sp, #0xc
 80025e0:      	push.w	{r8, r9, r10, r11}
 80025e4:      	sub	sp, #0x34
 80025e6:      	ldr	r4, [r0]
 80025e8:      	movw	r0, #0x851f
 80025ec:      	movw	r8, #0x3796
 80025f0:      	mov	r5, r1
 80025f2:      	movw	r1, #0x2710
 80025f6:      	cmp	r4, r1
 80025f8:      	movt	r0, #0x51eb
 80025fc:      	movt	r8, #0x800
 8002600:      	blo	#0x76 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::h76e23d81c62d5e26+0x9e>
 8002602:      	movw	r9, #0x1759
 8002606:      	movw	lr, #0xe0ff
 800260a:      	add.w	r11, sp, #0xc
 800260e:      	movs	r3, #0x0
 8002610:      	movt	r9, #0xd1b7
 8002614:      	mov.w	r10, #0x64
 8002618:      	movt	lr, #0x5f5
 800261c:      	str	r5, [sp, #0x8]
 800261e:      	umull	r2, r5, r4, r9
 8002622:      	cmp	r4, lr
 8002624:      	lsr.w	r2, r5, #0xd
 8002628:      	mls	r5, r2, r1, r4
 800262c:      	add.w	r1, r11, r3
 8002630:      	sub.w	r3, r3, #0x4
 8002634:      	mov	r4, r2
 8002636:      	uxth	r6, r5
 8002638:      	umull	r6, r12, r6, r0
 800263c:      	lsr.w	r6, r12, #0x5
 8002640:      	mls	r5, r6, r10, r5
 8002644:      	ldrh.w	r6, [r8, r6, lsl #1]
 8002648:      	strh.w	r6, [r1, #0x23]
 800264c:      	uxth	r5, r5
 800264e:      	ldrh.w	r5, [r8, r5, lsl #1]
 8002652:      	strh.w	r5, [r1, #0x25]
 8002656:      	movw	r1, #0x2710
 800265a:      	bhi	#-0x40 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::h76e23d81c62d5e26+0x42>
 800265c:      	ldr	r5, [sp, #0x8]
 800265e:      	add.w	r1, r3, #0x27
 8002662:      	mov	r4, r2
 8002664:      	cmp	r4, #0x63
 8002666:      	bgt	#0x16 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::h76e23d81c62d5e26+0xa4>
 8002668:      	mov	r3, r4
 800266a:      	cmp	r3, #0x9
 800266c:      	ble	#0x2e <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::h76e23d81c62d5e26+0xc2>
 800266e:      	subs	r1, #0x2
 8002670:      	ldrh.w	r0, [r8, r3, lsl #1]
 8002674:      	add	r2, sp, #0xc
 8002676:      	strh	r0, [r2, r1]
 8002678:      	b	#0x2c <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::h76e23d81c62d5e26+0xcc>
 800267a:      	movs	r1, #0x27
 800267c:      	cmp	r4, #0x63
 800267e:      	ble	#-0x1a <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::h76e23d81c62d5e26+0x8c>
 8002680:      	uxth	r2, r4
 8002682:      	subs	r1, #0x2
 8002684:      	umull	r2, r3, r2, r0
 8002688:      	add	r6, sp, #0xc
 800268a:      	movs	r2, #0x64
 800268c:      	lsrs	r3, r3, #0x5
 800268e:      	mls	r2, r3, r2, r4
 8002692:      	uxth	r2, r2
 8002694:      	ldrh.w	r2, [r8, r2, lsl #1]
 8002698:      	strh	r2, [r6, r1]
 800269a:      	cmp	r3, #0x9
 800269c:      	bgt	#-0x32 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::h76e23d81c62d5e26+0x92>
 800269e:      	subs	r1, #0x1
 80026a0:      	add	r2, sp, #0xc
 80026a2:      	add.w	r0, r3, #0x30
 80026a6:      	strb	r0, [r2, r1]
 80026a8:      	rsb.w	r0, r1, #0x27
 80026ac:      	add	r2, sp, #0xc
 80026ae:      	add	r1, r2
 80026b0:      	movw	r2, #0x370c
 80026b4:      	strd	r1, r0, [sp]
 80026b8:      	movt	r2, #0x800
 80026bc:      	mov	r0, r5
 80026be:      	movs	r1, #0x1
 80026c0:      	movs	r3, #0x0
 80026c2:      	bl	#-0x926
 80026c6:      	add	sp, #0x34
 80026c8:      	pop.w	{r8, r9, r10, r11}
 80026cc:      	pop	{r4, r5, r6, r7, pc}

080026ce <<&T as core::fmt::Display>::fmt::h35a9cbe2805c7895>:
 80026ce:      	ldr	r0, [r0]
 80026d0:      	mov	r3, r1
 80026d2:      	ldrd	r1, r2, [r0]
 80026d6:      	mov	r0, r3
 80026d8:      	b.w	#-0x63a <core::fmt::Formatter::pad::hb5d3a89dfc81b052>

080026dc <<&T as core::fmt::Display>::fmt::hd70482cf9f441bd5>:
 80026dc:      	push	{r4, r5, r6, r7, lr}
 80026de:      	add	r7, sp, #0xc
 80026e0:      	push.w	{r8, r9, r11}
 80026e4:      	sub	sp, #0x18
 80026e6:      	ldr.w	lr, [r0]
 80026ea:      	mov	r2, sp
 80026ec:      	ldrd	r12, r1, [r1, #24]
 80026f0:      	mov	r3, r2
 80026f2:      	ldm.w	lr, {r0, r4, r5, r6, r8, r9}
 80026f6:      	stm.w	r3, {r0, r4, r5, r6, r8, r9}
 80026fa:      	mov	r0, r12
 80026fc:      	bl	#-0xb14
 8002700:      	add	sp, #0x18
 8002702:      	pop.w	{r8, r9, r11}
 8002706:      	pop	{r4, r5, r6, r7, pc}

08002708 <<&T as core::fmt::Display>::fmt::hf1a1709f270b8653>:
 8002708:      	mov	r3, r1
 800270a:      	ldrd	r1, r2, [r0]
 800270e:      	mov	r0, r3
 8002710:      	b.w	#-0x672 <core::fmt::Formatter::pad::hb5d3a89dfc81b052>

08002714 <rust_begin_unwind>:
; fn panic(info: &PanicInfo) -> ! {
 8002714:      	push	{r7, lr}
 8002716:      	mov	r7, sp
 8002718:      	sub	sp, #0x48
 800271a:      	str	r0, [sp, #0x10]
;     interrupt::disable();
 800271c:      	bl	#0xbe2
 8002720:      	b	#-0x2 <rust_begin_unwind+0xe>
;     let itm = unsafe { &mut *ITM::ptr() };
 8002722:      	b	#-0x2 <rust_begin_unwind+0x10>
 8002724:      	mov.w	r0, #0xe0000000
;     let itm = unsafe { &mut *ITM::ptr() };
 8002728:      	str	r0, [sp, #0x3c]
;     let stim = &mut itm.stim[0];
 800272a:      	mov	r1, r0
 800272c:      	str	r1, [sp, #0x4]
 800272e:      	str	r0, [sp, #0x40]
 8002730:      	add	r0, sp, #0x10
;     iprintln!(stim, "{}", info);
 8002732:      	str	r0, [sp, #0x34]
 8002734:      	ldr	r0, [sp, #0x34]
 8002736:      	str	r0, [sp, #0x44]
 8002738:      	movw	r1, #0x2789
 800273c:      	movt	r1, #0x800
 8002740:      	bl	#0x8c
 8002744:      	str	r0, [sp, #0x8]
 8002746:      	str	r1, [sp, #0xc]
 8002748:      	b	#-0x2 <rust_begin_unwind+0x36>
 800274a:      	ldr	r0, [sp, #0xc]
 800274c:      	ldr	r1, [sp, #0x8]
 800274e:      	str	r1, [sp, #0x2c]
 8002750:      	str	r0, [sp, #0x30]
 8002752:      	mov	r1, sp
 8002754:      	movs	r0, #0x1
 8002756:      	str	r0, [r1]
 8002758:      	movw	r1, #0x38ec
 800275c:      	movt	r1, #0x800
 8002760:      	add	r0, sp, #0x14
 8002762:      	movs	r2, #0x2
 8002764:      	add	r3, sp, #0x2c
 8002766:      	bl	#0xba
 800276a:      	b	#-0x2 <rust_begin_unwind+0x58>
 800276c:      	ldr	r0, [sp, #0x4]
 800276e:      	add	r1, sp, #0x14
 8002770:      	bl	#0x252
 8002774:      	b	#-0x2 <rust_begin_unwind+0x62>
 8002776:      	movs	r0, #0x4
;         atomic::compiler_fence(Ordering::SeqCst);
 8002778:      	strb	r0, [r7, #-13]
 800277c:      	ldrb	r0, [r7, #-13]
 8002780:      	bl	#0xe0
 8002784:      	b	#-0x2 <rust_begin_unwind+0x72>
;     loop {
 8002786:      	b	#-0x14 <rust_begin_unwind+0x62>

08002788 <<&T as core::fmt::Display>::fmt::hd50d74f9e93bd808>:
;             fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
 8002788:      	push	{r7, lr}
 800278a:      	mov	r7, sp
 800278c:      	sub	sp, #0x10
 800278e:      	str	r0, [sp, #0x8]
 8002790:      	str	r1, [sp, #0xc]
 8002792:      	ldr	r0, [r0]
 8002794:      	bl	#-0xcf6
 8002798:      	str	r0, [sp, #0x4]
 800279a:      	b	#-0x2 <<&T as core::fmt::Display>::fmt::hd50d74f9e93bd808+0x14>
 800279c:      	ldr	r0, [sp, #0x4]
 800279e:      	and	r0, r0, #0x1
 80027a2:      	add	sp, #0x10
 80027a4:      	pop	{r7, pc}

080027a6 <core::fmt::ArgumentV1::new::h36e2e408603772c0>:
;     pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
 80027a6:      	sub	sp, #0x24
 80027a8:      	str	r0, [sp, #0x4]
 80027aa:      	str	r0, [sp, #0x14]
 80027ac:      	str	r1, [sp, #0x18]
;         unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
 80027ae:      	str	r1, [sp, #0x1c]
 80027b0:      	ldr	r0, [sp, #0x1c]
 80027b2:      	str	r0, [sp, #0x8]
 80027b4:      	b	#-0x2 <core::fmt::ArgumentV1::new::h36e2e408603772c0+0x10>
 80027b6:      	ldr	r0, [sp, #0x4]
 80027b8:      	str	r0, [sp, #0x20]
 80027ba:      	ldr	r0, [sp, #0x20]
 80027bc:      	str	r0, [sp]
 80027be:      	b	#-0x2 <core::fmt::ArgumentV1::new::h36e2e408603772c0+0x1a>
 80027c0:      	ldr	r0, [sp, #0x8]
 80027c2:      	ldr	r1, [sp]
 80027c4:      	str	r1, [sp, #0xc]
 80027c6:      	str	r0, [sp, #0x10]
;     }
 80027c8:      	ldr	r0, [sp, #0xc]
 80027ca:      	ldr	r1, [sp, #0x10]
 80027cc:      	add	sp, #0x24
 80027ce:      	bx	lr

080027d0 <core::fmt::ArgumentV1::new::h444c6964bb24abe2>:
;     pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
 80027d0:      	sub	sp, #0x24
 80027d2:      	str	r0, [sp, #0x4]
 80027d4:      	str	r0, [sp, #0x14]
 80027d6:      	str	r1, [sp, #0x18]
;         unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
 80027d8:      	str	r1, [sp, #0x1c]
 80027da:      	ldr	r0, [sp, #0x1c]
 80027dc:      	str	r0, [sp, #0x8]
 80027de:      	b	#-0x2 <core::fmt::ArgumentV1::new::h444c6964bb24abe2+0x10>
 80027e0:      	ldr	r0, [sp, #0x4]
 80027e2:      	str	r0, [sp, #0x20]
 80027e4:      	ldr	r0, [sp, #0x20]
 80027e6:      	str	r0, [sp]
 80027e8:      	b	#-0x2 <core::fmt::ArgumentV1::new::h444c6964bb24abe2+0x1a>
 80027ea:      	ldr	r0, [sp, #0x8]
 80027ec:      	ldr	r1, [sp]
 80027ee:      	str	r1, [sp, #0xc]
 80027f0:      	str	r0, [sp, #0x10]
;     }
 80027f2:      	ldr	r0, [sp, #0xc]
 80027f4:      	ldr	r1, [sp, #0x10]
 80027f6:      	add	sp, #0x24
 80027f8:      	bx	lr

080027fa <core::fmt::ArgumentV1::new::h8a297f516c1a438a>:
;     pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
 80027fa:      	sub	sp, #0x24
 80027fc:      	str	r0, [sp, #0x4]
 80027fe:      	str	r0, [sp, #0x14]
 8002800:      	str	r1, [sp, #0x18]
;         unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
 8002802:      	str	r1, [sp, #0x1c]
 8002804:      	ldr	r0, [sp, #0x1c]
 8002806:      	str	r0, [sp, #0x8]
 8002808:      	b	#-0x2 <core::fmt::ArgumentV1::new::h8a297f516c1a438a+0x10>
 800280a:      	ldr	r0, [sp, #0x4]
 800280c:      	str	r0, [sp, #0x20]
 800280e:      	ldr	r0, [sp, #0x20]
 8002810:      	str	r0, [sp]
 8002812:      	b	#-0x2 <core::fmt::ArgumentV1::new::h8a297f516c1a438a+0x1a>
 8002814:      	ldr	r0, [sp, #0x8]
 8002816:      	ldr	r1, [sp]
 8002818:      	str	r1, [sp, #0xc]
 800281a:      	str	r0, [sp, #0x10]
;     }
 800281c:      	ldr	r0, [sp, #0xc]
 800281e:      	ldr	r1, [sp, #0x10]
 8002820:      	add	sp, #0x24
 8002822:      	bx	lr

08002824 <core::fmt::Arguments::new_v1::ha609c8f2fbea57dd>:
;     pub fn new_v1(pieces: &'a [&'static str], args: &'a [ArgumentV1<'a>]) -> Arguments<'a> {
 8002824:      	push	{r7, lr}
 8002826:      	mov	r7, sp
 8002828:      	sub	sp, #0x18
 800282a:      	mov	r12, r1
 800282c:      	mov	r1, r0
 800282e:      	ldr	r0, [r7, #0x8]
 8002830:      	str.w	r12, [sp, #0x8]
 8002834:      	str	r2, [sp, #0xc]
 8002836:      	str	r3, [sp, #0x10]
 8002838:      	str	r0, [sp, #0x14]
 800283a:      	mov.w	lr, #0x0
;         Arguments { pieces, fmt: None, args }
 800283e:      	str.w	lr, [sp, #0x4]
 8002842:      	str.w	lr, [sp]
 8002846:      	str.w	lr, [sp]
 800284a:      	str.w	r12, [r1]
 800284e:      	str	r2, [r1, #0x4]
 8002850:      	ldr.w	r12, [sp]
 8002854:      	ldr	r2, [sp, #0x4]
 8002856:      	str.w	r12, [r1, #0x8]
 800285a:      	str	r2, [r1, #0xc]
 800285c:      	str	r3, [r1, #0x10]
 800285e:      	str	r0, [r1, #0x14]
;     }
 8002860:      	add	sp, #0x18
 8002862:      	pop	{r7, pc}

08002864 <core::sync::atomic::compiler_fence::h562a2436bb398f88>:
; pub fn compiler_fence(order: Ordering) {
 8002864:      	push	{r7, lr}
 8002866:      	mov	r7, sp
 8002868:      	sub	sp, #0x10
 800286a:      	strb	r0, [r7, #-5]
;             Acquire => intrinsics::atomic_singlethreadfence_acq(),
 800286e:      	ldrb	r0, [r7, #-5]
 8002872:      	str	r0, [sp, #0x4]
 8002874:      	ldr	r1, [sp, #0x4]
 8002876:      	tbb	[pc, r1]

0800287a <$d.1>:
 800287a:	03 11 10 12	.word	0x12101103
 800287e:	13 00		.short	0x0013

08002880 <$t.2>:
;             Relaxed => panic!("there is no such thing as a relaxed compiler fence"),
 8002880:      	movw	r0, #0x38fc
 8002884:      	movt	r0, #0x800
 8002888:      	movw	r2, #0x39a4
 800288c:      	movt	r2, #0x800
 8002890:      	movs	r1, #0x32
 8002892:      	bl	#-0xd00
 8002896:      	trap
;         match order {
 8002898:      	trap
;             Acquire => intrinsics::atomic_singlethreadfence_acq(),
 800289a:      	b	#0x4 <$t.2+0x22>
;             Release => intrinsics::atomic_singlethreadfence_rel(),
 800289c:      	b	#0x2 <$t.2+0x22>
;             AcqRel => intrinsics::atomic_singlethreadfence_acqrel(),
 800289e:      	b	#0x0 <$t.2+0x22>
;             SeqCst => intrinsics::atomic_singlethreadfence(),
 80028a0:      	b	#-0x2 <$t.2+0x22>
; }
 80028a2:      	add	sp, #0x10
 80028a4:      	pop	{r7, pc}

080028a6 <core::fmt::Write::write_char::hf801d5405efc4485>:
;     fn write_char(&mut self, c: char) -> Result {
 80028a6:      	push	{r7, lr}
 80028a8:      	mov	r7, sp
 80028aa:      	sub	sp, #0x20
 80028ac:      	str	r1, [sp, #0x4]
 80028ae:      	mov	r1, r0
 80028b0:      	ldr	r0, [sp, #0x4]
 80028b2:      	str	r1, [sp, #0x8]
 80028b4:      	str	r1, [sp, #0x18]
 80028b6:      	str	r0, [sp, #0x1c]
 80028b8:      	movs	r1, #0x0
;         self.write_str(c.encode_utf8(&mut [0; 4]))
 80028ba:      	str	r1, [sp, #0x14]
 80028bc:      	add	r1, sp, #0x14
 80028be:      	movs	r2, #0x4
 80028c0:      	bl	#0x336
 80028c4:      	str	r0, [sp, #0xc]
 80028c6:      	str	r1, [sp, #0x10]
 80028c8:      	b	#-0x2 <core::fmt::Write::write_char::hf801d5405efc4485+0x24>
 80028ca:      	ldr	r2, [sp, #0x10]
 80028cc:      	ldr	r1, [sp, #0xc]
 80028ce:      	ldr	r0, [sp, #0x8]
 80028d0:      	bl	#0xb6
 80028d4:      	str	r0, [sp]
 80028d6:      	b	#-0x2 <core::fmt::Write::write_char::hf801d5405efc4485+0x32>
;     }
 80028d8:      	ldr	r0, [sp]
 80028da:      	and	r0, r0, #0x1
 80028de:      	add	sp, #0x20
 80028e0:      	pop	{r7, pc}

080028e2 <core::fmt::Write::write_fmt::h0067a6a0efcd653c>:
;     fn write_fmt(mut self: &mut Self, args: Arguments<'_>) -> Result {
 80028e2:      	push	{r4, r5, r6, r7, lr}
 80028e4:      	add	r7, sp, #0xc
 80028e6:      	str	r11, [sp, #-4]!
 80028ea:      	sub	sp, #0x20
 80028ec:      	str	r0, [sp, #0x4]
 80028ee:      	add	r2, sp, #0x8
;         write(&mut self, args)
 80028f0:      	mov	r0, r2
 80028f2:      	ldm.w	r1, {r3, r4, r5, r6, r12, lr}
 80028f6:      	stm.w	r0, {r3, r4, r5, r6, r12, lr}
 80028fa:      	movw	r1, #0x39b4
 80028fe:      	movt	r1, #0x800
 8002902:      	add	r0, sp, #0x4
 8002904:      	bl	#-0xd1c
 8002908:      	str	r0, [sp]
 800290a:      	b	#-0x2 <core::fmt::Write::write_fmt::h0067a6a0efcd653c+0x2a>
;     }
 800290c:      	ldr	r0, [sp]
 800290e:      	and	r0, r0, #0x1
 8002912:      	add	sp, #0x20
 8002914:      	ldr	r11, [sp], #4
 8002918:      	pop	{r4, r5, r6, r7, pc}

0800291a <<&mut W as core::fmt::Write>::write_char::h95d22bb6a4d4eecc>:
;     fn write_char(&mut self, c: char) -> Result {
 800291a:      	push	{r7, lr}
 800291c:      	mov	r7, sp
 800291e:      	sub	sp, #0x10
 8002920:      	str	r0, [sp, #0x8]
 8002922:      	str	r1, [sp, #0xc]
;         (**self).write_char(c)
 8002924:      	ldr	r0, [r0]
 8002926:      	bl	#-0x84
 800292a:      	str	r0, [sp, #0x4]
 800292c:      	b	#-0x2 <<&mut W as core::fmt::Write>::write_char::h95d22bb6a4d4eecc+0x14>
;     }
 800292e:      	ldr	r0, [sp, #0x4]
 8002930:      	and	r0, r0, #0x1
 8002934:      	add	sp, #0x10
 8002936:      	pop	{r7, pc}

08002938 <<&mut W as core::fmt::Write>::write_fmt::h5eab6951952810c9>:
;     fn write_fmt(&mut self, args: Arguments<'_>) -> Result {
 8002938:      	push	{r4, r5, r6, r7, lr}
 800293a:      	add	r7, sp, #0xc
 800293c:      	str	r8, [sp, #-4]!
 8002940:      	sub	sp, #0x20
 8002942:      	mov	r3, r1
 8002944:      	str	r0, [sp, #0x1c]
;         (**self).write_fmt(args)
 8002946:      	ldr	r0, [r0]
 8002948:      	add	r1, sp, #0x4
 800294a:      	mov	r2, r1
 800294c:      	ldm.w	r3, {r4, r5, r6, r8, r12, lr}
 8002950:      	stm.w	r2, {r4, r5, r6, r8, r12, lr}
 8002954:      	bl	#-0x76
 8002958:      	str	r0, [sp]
 800295a:      	b	#-0x2 <<&mut W as core::fmt::Write>::write_fmt::h5eab6951952810c9+0x24>
;     }
 800295c:      	ldr	r0, [sp]
 800295e:      	and	r0, r0, #0x1
 8002962:      	add	sp, #0x20
 8002964:      	ldr	r8, [sp], #4
 8002968:      	pop	{r4, r5, r6, r7, pc}

0800296a <<&mut W as core::fmt::Write>::write_str::h9f3a0c65d1d98255>:
;     fn write_str(&mut self, s: &str) -> Result {
 800296a:      	push	{r7, lr}
 800296c:      	mov	r7, sp
 800296e:      	sub	sp, #0x10
 8002970:      	str	r0, [sp, #0x4]
 8002972:      	str	r1, [sp, #0x8]
 8002974:      	str	r2, [sp, #0xc]
;         (**self).write_str(s)
 8002976:      	ldr	r0, [r0]
 8002978:      	bl	#0xe
 800297c:      	str	r0, [sp]
 800297e:      	b	#-0x2 <<&mut W as core::fmt::Write>::write_str::h9f3a0c65d1d98255+0x16>
;     }
 8002980:      	ldr	r0, [sp]
 8002982:      	and	r0, r0, #0x1
 8002986:      	add	sp, #0x10
 8002988:      	pop	{r7, pc}

0800298a <<cortex_m::itm::Port as core::fmt::Write>::write_str::ha07f7e0449fdbe4d>:
;     fn write_str(&mut self, s: &str) -> fmt::Result {
 800298a:      	push	{r7, lr}
 800298c:      	mov	r7, sp
 800298e:      	sub	sp, #0x30
 8002990:      	str	r0, [sp, #0x14]
 8002992:      	str	r1, [sp, #0x18]
 8002994:      	str	r2, [sp, #0x1c]
;         write_all(self.0, s.as_bytes());
 8002996:      	ldr	r0, [r0]
 8002998:      	str	r0, [sp, #0x4]
 800299a:      	str	r1, [sp, #0x20]
 800299c:      	str	r2, [sp, #0x24]
;         unsafe { mem::transmute(self) }
 800299e:      	str	r1, [sp, #0x28]
 80029a0:      	str	r2, [sp, #0x2c]
 80029a2:      	ldr	r0, [sp, #0x28]
 80029a4:      	str	r0, [sp, #0x8]
 80029a6:      	ldr	r0, [sp, #0x2c]
;         write_all(self.0, s.as_bytes());
 80029a8:      	str	r0, [sp, #0xc]
 80029aa:      	b	#-0x2 <<cortex_m::itm::Port as core::fmt::Write>::write_str::ha07f7e0449fdbe4d+0x22>
 80029ac:      	ldr	r2, [sp, #0xc]
 80029ae:      	ldr	r1, [sp, #0x8]
 80029b0:      	ldr	r0, [sp, #0x4]
 80029b2:      	bl	#0x692
 80029b6:      	b	#-0x2 <<cortex_m::itm::Port as core::fmt::Write>::write_str::ha07f7e0449fdbe4d+0x2e>
 80029b8:      	movs	r0, #0x0
;         Ok(())
 80029ba:      	strb	r0, [r7, #-29]
;     }
 80029be:      	ldrb	r0, [r7, #-29]
 80029c2:      	add	sp, #0x30
 80029c4:      	pop	{r7, pc}

080029c6 <cortex_m::itm::write_fmt::h5cd656c6b746d86a>:
; pub fn write_fmt(port: &mut Stim, args: fmt::Arguments) {
 80029c6:      	push	{r4, r5, r6, r7, lr}
 80029c8:      	add	r7, sp, #0xc
 80029ca:      	str	r11, [sp, #-4]!
 80029ce:      	sub	sp, #0x28
 80029d0:      	mov	r2, r1
 80029d2:      	str	r0, [sp, #0x24]
;     Port(port).write_fmt(args).ok();
 80029d4:      	str	r0, [sp, #0x8]
 80029d6:      	add	r1, sp, #0xc
 80029d8:      	mov	r0, r1
 80029da:      	ldm.w	r2, {r3, r4, r5, r6, r12, lr}
 80029de:      	stm.w	r0, {r3, r4, r5, r6, r12, lr}
 80029e2:      	add	r0, sp, #0x8
 80029e4:      	bl	#-0x106
 80029e8:      	str	r0, [sp, #0x4]
 80029ea:      	b	#-0x2 <cortex_m::itm::write_fmt::h5cd656c6b746d86a+0x26>
 80029ec:      	ldr	r0, [sp, #0x4]
 80029ee:      	and	r0, r0, #0x1
 80029f2:      	bl	#0x448
 80029f6:      	b	#-0x2 <cortex_m::itm::write_fmt::h5cd656c6b746d86a+0x32>
; }
 80029f8:      	add	sp, #0x28
 80029fa:      	ldr	r11, [sp], #4
 80029fe:      	pop	{r4, r5, r6, r7, pc}

08002a00 <core::ptr::drop_in_place<&mut cortex_m::itm::Port>::h1cf5d5a349e78cb3>:
; pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
 8002a00:      	sub	sp, #0x4
 8002a02:      	str	r0, [sp]
 8002a04:      	add	sp, #0x4
 8002a06:      	bx	lr

08002a08 <core::char::methods::encode_utf8_raw::h98d68af12c2d57af>:
; pub fn encode_utf8_raw(code: u32, dst: &mut [u8]) -> &mut [u8] {
 8002a08:      	push	{r7, lr}
 8002a0a:      	mov	r7, sp
 8002a0c:      	sub	sp, #0xd8
 8002a0e:      	str	r2, [sp, #0x3c]
 8002a10:      	str	r1, [sp, #0x40]
 8002a12:      	str	r0, [sp, #0x44]
 8002a14:      	str	r1, [sp, #0x9c]
 8002a16:      	str	r2, [sp, #0xa0]
;     let len = len_utf8(code);
 8002a18:      	ldr	r0, [sp, #0x44]
 8002a1a:      	bl	#0x208
 8002a1e:      	str	r0, [sp, #0x48]
 8002a20:      	b	#-0x2 <core::char::methods::encode_utf8_raw::h98d68af12c2d57af+0x1a>
;     match (len, &mut dst[..]) {
 8002a22:      	ldr	r1, [sp, #0x3c]
 8002a24:      	ldr	r0, [sp, #0x40]
 8002a26:      	ldr	r2, [sp, #0x48]
 8002a28:      	str	r2, [sp, #0x30]
 8002a2a:      	movw	r2, #0x3a44
 8002a2e:      	movt	r2, #0x800
 8002a32:      	bl	#0x266
 8002a36:      	str	r0, [sp, #0x34]
 8002a38:      	str	r1, [sp, #0x38]
 8002a3a:      	b	#-0x2 <core::char::methods::encode_utf8_raw::h98d68af12c2d57af+0x34>
 8002a3c:      	ldr	r0, [sp, #0x38]
 8002a3e:      	ldr	r1, [sp, #0x34]
 8002a40:      	ldr	r2, [sp, #0x30]
 8002a42:      	str	r2, [sp, #0x4c]
 8002a44:      	str	r1, [sp, #0x50]
 8002a46:      	str	r0, [sp, #0x54]
;         (1, [a, ..]) => {
 8002a48:      	ldr	r0, [sp, #0x4c]
 8002a4a:      	subs	r0, #0x1
 8002a4c:      	mov	r1, r0
 8002a4e:      	str	r1, [sp, #0x2c]
 8002a50:      	cmp	r0, #0x3
 8002a52:      	bhi	#0xe <$t.2+0x6>
 8002a54:      	ldr	r1, [sp, #0x2c]
 8002a56:      	tbb	[pc, r1]

08002a5a <$d.1>:
 8002a5a:	02 0b 0f 13	.word	0x130f0b02

08002a5e <$t.2>:
;         (1, [a, ..]) => {
 8002a5e:      	ldr	r0, [sp, #0x54]
 8002a60:      	cbnz	r0, #0x24
 8002a62:      	b	#-0x2 <$t.2+0x6>
;             dst.len(),
 8002a64:      	ldr	r1, [sp, #0x3c]
 8002a66:      	ldr	r0, [sp, #0x40]
 8002a68:      	bl	#-0x106a
 8002a6c:      	str	r0, [sp, #0x94]
 8002a6e:      	b	#0xc6 <$t.2+0xda>
;         (2, [a, b, ..]) => {
 8002a70:      	ldr	r0, [sp, #0x54]
 8002a72:      	cmp	r0, #0x1
 8002a74:      	bhi	#0x1a <$t.2+0x34>
 8002a76:      	b	#-0x16 <$t.2+0x6>
;         (3, [a, b, c, ..]) => {
 8002a78:      	ldr	r0, [sp, #0x54]
 8002a7a:      	cmp	r0, #0x2
 8002a7c:      	bhi	#0x36 <$t.2+0x58>
 8002a7e:      	b	#-0x1e <$t.2+0x6>
;         (4, [a, b, c, d, ..]) => {
 8002a80:      	ldr	r0, [sp, #0x54]
 8002a82:      	cmp	r0, #0x3
 8002a84:      	bhi	#0x64 <$t.2+0x8e>
 8002a86:      	b	#-0x26 <$t.2+0x6>
;         (1, [a, ..]) => {
 8002a88:      	ldr	r1, [sp, #0x50]
 8002a8a:      	str	r1, [sp, #0xc8]
;             *a = code as u8;
 8002a8c:      	ldr	r0, [sp, #0x44]
 8002a8e:      	strb	r0, [r1]
;     match (len, &mut dst[..]) {
 8002a90:      	b	#0x142 <$t.2+0x178>
;         (2, [a, b, ..]) => {
 8002a92:      	ldr	r2, [sp, #0x50]
 8002a94:      	str	r2, [sp, #0xc0]
 8002a96:      	ldr	r1, [sp, #0x50]
 8002a98:      	adds	r0, r1, #0x1
 8002a9a:      	str	r0, [sp, #0xc4]
;             *a = (code >> 6 & 0x1F) as u8 | TAG_TWO_B;
 8002a9c:      	ldr	r0, [sp, #0x44]
 8002a9e:      	lsrs	r0, r0, #0x6
 8002aa0:      	movs	r3, #0x6
 8002aa2:      	bfi	r0, r3, #5, #27
 8002aa6:      	strb	r0, [r2]
;             *b = (code & 0x3F) as u8 | TAG_CONT;
 8002aa8:      	ldrb.w	r0, [sp, #0x44]
 8002aac:      	movs	r2, #0x2
 8002aae:      	bfi	r0, r2, #6, #26
 8002ab2:      	strb	r0, [r1, #0x1]
;     match (len, &mut dst[..]) {
 8002ab4:      	b	#0x11e <$t.2+0x178>
;         (3, [a, b, c, ..]) => {
 8002ab6:      	ldr	r2, [sp, #0x50]
 8002ab8:      	str	r2, [sp, #0xb4]
 8002aba:      	ldr	r3, [sp, #0x50]
 8002abc:      	adds	r0, r3, #0x1
 8002abe:      	str	r0, [sp, #0xb8]
 8002ac0:      	ldr	r1, [sp, #0x50]
 8002ac2:      	adds	r0, r1, #0x2
 8002ac4:      	str	r0, [sp, #0xbc]
;             *a = (code >> 12 & 0x0F) as u8 | TAG_THREE_B;
 8002ac6:      	ldr	r0, [sp, #0x44]
 8002ac8:      	lsrs	r0, r0, #0xc
 8002aca:      	mov.w	r12, #0xe
 8002ace:      	bfi	r0, r12, #4, #28
 8002ad2:      	strb	r0, [r2]
;             *b = (code >> 6 & 0x3F) as u8 | TAG_CONT;
 8002ad4:      	ldr	r0, [sp, #0x44]
 8002ad6:      	lsrs	r0, r0, #0x6
 8002ad8:      	movs	r2, #0x2
 8002ada:      	bfi	r0, r2, #6, #26
 8002ade:      	strb	r0, [r3, #0x1]
;             *c = (code & 0x3F) as u8 | TAG_CONT;
 8002ae0:      	ldrb.w	r0, [sp, #0x44]
 8002ae4:      	bfi	r0, r2, #6, #26
 8002ae8:      	strb	r0, [r1, #0x2]
;     match (len, &mut dst[..]) {
 8002aea:      	b	#0xe8 <$t.2+0x178>
;         (4, [a, b, c, d, ..]) => {
 8002aec:      	ldr	r2, [sp, #0x50]
 8002aee:      	str	r2, [sp, #0xa4]
 8002af0:      	ldr.w	r12, [sp, #0x50]
 8002af4:      	add.w	r0, r12, #0x1
 8002af8:      	str	r0, [sp, #0xa8]
 8002afa:      	ldr	r3, [sp, #0x50]
 8002afc:      	adds	r0, r3, #0x2
 8002afe:      	str	r0, [sp, #0xac]
 8002b00:      	ldr	r1, [sp, #0x50]
 8002b02:      	adds	r0, r1, #0x3
 8002b04:      	str	r0, [sp, #0xb0]
;             *a = (code >> 18 & 0x07) as u8 | TAG_FOUR_B;
 8002b06:      	ldr	r0, [sp, #0x44]
 8002b08:      	lsrs	r0, r0, #0x12
 8002b0a:      	mov.w	lr, #0x1e
 8002b0e:      	bfi	r0, lr, #3, #29
 8002b12:      	strb	r0, [r2]
;             *b = (code >> 12 & 0x3F) as u8 | TAG_CONT;
 8002b14:      	ldr	r0, [sp, #0x44]
 8002b16:      	lsrs	r0, r0, #0xc
 8002b18:      	movs	r2, #0x2
 8002b1a:      	bfi	r0, r2, #6, #26
 8002b1e:      	strb.w	r0, [r12, #0x1]
;             *c = (code >> 6 & 0x3F) as u8 | TAG_CONT;
 8002b22:      	ldr	r0, [sp, #0x44]
 8002b24:      	lsrs	r0, r0, #0x6
 8002b26:      	bfi	r0, r2, #6, #26
 8002b2a:      	strb	r0, [r3, #0x2]
;             *d = (code & 0x3F) as u8 | TAG_CONT;
 8002b2c:      	ldrb.w	r0, [sp, #0x44]
 8002b30:      	bfi	r0, r2, #6, #26
 8002b34:      	strb	r0, [r1, #0x3]
;     match (len, &mut dst[..]) {
 8002b36:      	b	#0x9c <$t.2+0x178>
 8002b38:      	add	r0, sp, #0x48
;         _ => panic!(
 8002b3a:      	str	r0, [sp, #0x88]
 8002b3c:      	add	r0, sp, #0x44
 8002b3e:      	str	r0, [sp, #0x8c]
 8002b40:      	add	r0, sp, #0x94
 8002b42:      	str	r0, [sp, #0x90]
 8002b44:      	ldr	r0, [sp, #0x88]
 8002b46:      	str	r0, [sp, #0xcc]
 8002b48:      	ldr	r1, [sp, #0x8c]
 8002b4a:      	str	r1, [sp, #0x1c]
 8002b4c:      	str	r1, [sp, #0xd0]
 8002b4e:      	ldr	r1, [sp, #0x90]
 8002b50:      	str	r1, [sp, #0x20]
 8002b52:      	str	r1, [sp, #0xd4]
 8002b54:      	movw	r1, #0x25dd
 8002b58:      	movt	r1, #0x800
 8002b5c:      	bl	#-0x3ba
 8002b60:      	str	r0, [sp, #0x24]
 8002b62:      	str	r1, [sp, #0x28]
 8002b64:      	b	#-0x2 <$t.2+0x108>
 8002b66:      	ldr	r0, [sp, #0x1c]
 8002b68:      	movw	r1, #0x250b
 8002b6c:      	movt	r1, #0x800
 8002b70:      	bl	#-0x37a
 8002b74:      	str	r0, [sp, #0x14]
 8002b76:      	str	r1, [sp, #0x18]
 8002b78:      	b	#-0x2 <$t.2+0x11c>
 8002b7a:      	ldr	r0, [sp, #0x20]
 8002b7c:      	movw	r1, #0x25dd
 8002b80:      	movt	r1, #0x800
 8002b84:      	bl	#-0x3e2
 8002b88:      	str	r0, [sp, #0xc]
 8002b8a:      	str	r1, [sp, #0x10]
 8002b8c:      	b	#-0x2 <$t.2+0x130>
 8002b8e:      	ldr	r0, [sp, #0x10]
 8002b90:      	ldr	r1, [sp, #0xc]
 8002b92:      	ldr	r2, [sp, #0x18]
 8002b94:      	ldr	r3, [sp, #0x14]
 8002b96:      	ldr.w	r12, [sp, #0x28]
 8002b9a:      	ldr.w	lr, [sp, #0x24]
 8002b9e:      	str.w	lr, [sp, #0x70]
 8002ba2:      	str.w	r12, [sp, #0x74]
 8002ba6:      	str	r3, [sp, #0x78]
 8002ba8:      	str	r2, [sp, #0x7c]
 8002baa:      	str	r1, [sp, #0x80]
 8002bac:      	str	r0, [sp, #0x84]
 8002bae:      	mov	r0, sp
 8002bb0:      	movs	r2, #0x3
 8002bb2:      	str	r2, [r0]
 8002bb4:      	movw	r1, #0x3aa0
 8002bb8:      	movt	r1, #0x800
 8002bbc:      	add	r0, sp, #0x58
 8002bbe:      	add	r3, sp, #0x70
 8002bc0:      	bl	#-0x3a0
 8002bc4:      	b	#-0x2 <$t.2+0x168>
 8002bc6:      	movw	r1, #0x3ab8
 8002bca:      	movt	r1, #0x800
 8002bce:      	add	r0, sp, #0x58
 8002bd0:      	bl	#-0x100e
 8002bd4:      	trap
;     &mut dst[..len]
 8002bd6:      	ldr	r1, [sp, #0x3c]
 8002bd8:      	ldr	r0, [sp, #0x40]
 8002bda:      	ldr	r2, [sp, #0x48]
 8002bdc:      	str	r2, [sp, #0x98]
 8002bde:      	ldr	r2, [sp, #0x98]
 8002be0:      	movw	r3, #0x3a54
 8002be4:      	movt	r3, #0x800
 8002be8:      	bl	#0x8a
 8002bec:      	str	r0, [sp, #0x4]
 8002bee:      	str	r1, [sp, #0x8]
 8002bf0:      	b	#-0x2 <$t.2+0x194>
; }
 8002bf2:      	ldr	r1, [sp, #0x8]
 8002bf4:      	ldr	r0, [sp, #0x4]
 8002bf6:      	add	sp, #0xd8
 8002bf8:      	pop	{r7, pc}

08002bfa <core::char::methods::<impl char>::encode_utf8::ha83dd46e1deee5e2>:
;     pub fn encode_utf8(self, dst: &mut [u8]) -> &mut str {
 8002bfa:      	push	{r7, lr}
 8002bfc:      	mov	r7, sp
 8002bfe:      	sub	sp, #0x20
 8002c00:      	str	r0, [sp, #0x14]
 8002c02:      	str	r1, [sp, #0x18]
 8002c04:      	str	r2, [sp, #0x1c]
;         unsafe { from_utf8_unchecked_mut(encode_utf8_raw(self as u32, dst)) }
 8002c06:      	bl	#-0x202
 8002c0a:      	str	r0, [sp, #0xc]
 8002c0c:      	str	r1, [sp, #0x10]
 8002c0e:      	b	#-0x2 <core::char::methods::<impl char>::encode_utf8::ha83dd46e1deee5e2+0x16>
 8002c10:      	ldr	r1, [sp, #0x10]
 8002c12:      	ldr	r0, [sp, #0xc]
 8002c14:      	bl	#0x54
 8002c18:      	str	r0, [sp, #0x4]
 8002c1a:      	str	r1, [sp, #0x8]
 8002c1c:      	b	#-0x2 <core::char::methods::<impl char>::encode_utf8::ha83dd46e1deee5e2+0x24>
;     }
 8002c1e:      	ldr	r1, [sp, #0x8]
 8002c20:      	ldr	r0, [sp, #0x4]
 8002c22:      	add	sp, #0x20
 8002c24:      	pop	{r7, pc}

08002c26 <core::char::methods::len_utf8::h2dc293c1692be152>:
; const fn len_utf8(code: u32) -> usize {
 8002c26:      	sub	sp, #0xc
 8002c28:      	str	r0, [sp]
 8002c2a:      	str	r0, [sp, #0x8]
;     if code < MAX_ONE_B {
 8002c2c:      	cmp	r0, #0x7f
 8002c2e:      	bhi	#0x6 <core::char::methods::len_utf8::h2dc293c1692be152+0x12>
 8002c30:      	b	#-0x2 <core::char::methods::len_utf8::h2dc293c1692be152+0xc>
 8002c32:      	movs	r0, #0x1
;         1
 8002c34:      	str	r0, [sp, #0x4]
;     if code < MAX_ONE_B {
 8002c36:      	b	#0x2c <core::char::methods::len_utf8::h2dc293c1692be152+0x40>
 8002c38:      	ldr	r1, [sp]
 8002c3a:      	movs	r0, #0x0
;     } else if code < MAX_TWO_B {
 8002c3c:      	cmp.w	r0, r1, lsr #11
 8002c40:      	bne	#0x6 <core::char::methods::len_utf8::h2dc293c1692be152+0x24>
 8002c42:      	b	#-0x2 <core::char::methods::len_utf8::h2dc293c1692be152+0x1e>
 8002c44:      	movs	r0, #0x2
;         2
 8002c46:      	str	r0, [sp, #0x4]
;     } else if code < MAX_TWO_B {
 8002c48:      	b	#0x18 <core::char::methods::len_utf8::h2dc293c1692be152+0x3e>
 8002c4a:      	ldr	r1, [sp]
 8002c4c:      	movs	r0, #0x0
;     } else if code < MAX_THREE_B {
 8002c4e:      	cmp.w	r0, r1, lsr #16
 8002c52:      	bne	#0x6 <core::char::methods::len_utf8::h2dc293c1692be152+0x36>
 8002c54:      	b	#-0x2 <core::char::methods::len_utf8::h2dc293c1692be152+0x30>
 8002c56:      	movs	r0, #0x3
;         3
 8002c58:      	str	r0, [sp, #0x4]
;     } else if code < MAX_THREE_B {
 8002c5a:      	b	#0x4 <core::char::methods::len_utf8::h2dc293c1692be152+0x3c>
 8002c5c:      	movs	r0, #0x4
;         4
 8002c5e:      	str	r0, [sp, #0x4]
;     } else if code < MAX_THREE_B {
 8002c60:      	b	#-0x2 <core::char::methods::len_utf8::h2dc293c1692be152+0x3c>
;     } else if code < MAX_TWO_B {
 8002c62:      	b	#-0x2 <core::char::methods::len_utf8::h2dc293c1692be152+0x3e>
;     if code < MAX_ONE_B {
 8002c64:      	b	#-0x2 <core::char::methods::len_utf8::h2dc293c1692be152+0x40>
; }
 8002c66:      	ldr	r0, [sp, #0x4]
 8002c68:      	add	sp, #0xc
 8002c6a:      	bx	lr

08002c6c <core::str::converts::from_utf8_unchecked_mut::h7439a7a0d455393f>:
; pub unsafe fn from_utf8_unchecked_mut(v: &mut [u8]) -> &mut str {
 8002c6c:      	sub	sp, #0x8
 8002c6e:      	str	r0, [sp]
 8002c70:      	str	r1, [sp, #0x4]
; }
 8002c72:      	add	sp, #0x8
 8002c74:      	bx	lr

08002c76 <core::slice::index::<impl core::ops::index::IndexMut<I> for [T]>::index_mut::h0576145b16bb35cb>:
;     fn index_mut(&mut self, index: I) -> &mut I::Output {
 8002c76:      	push	{r7, lr}
 8002c78:      	mov	r7, sp
 8002c7a:      	sub	sp, #0x18
 8002c7c:      	str	r2, [sp]
 8002c7e:      	mov	r2, r1
 8002c80:      	mov	r1, r0
 8002c82:      	ldr	r0, [sp]
 8002c84:      	str	r1, [sp, #0xc]
 8002c86:      	str	r2, [sp, #0x10]
 8002c88:      	str	r0, [sp, #0x14]
;         index.index_mut(self)
 8002c8a:      	bl	#0xee
 8002c8e:      	str	r0, [sp, #0x4]
 8002c90:      	str	r1, [sp, #0x8]
 8002c92:      	b	#-0x2 <core::slice::index::<impl core::ops::index::IndexMut<I> for [T]>::index_mut::h0576145b16bb35cb+0x1e>
;     }
 8002c94:      	ldr	r1, [sp, #0x8]
 8002c96:      	ldr	r0, [sp, #0x4]
 8002c98:      	add	sp, #0x18
 8002c9a:      	pop	{r7, pc}

08002c9c <core::slice::index::<impl core::ops::index::IndexMut<I> for [T]>::index_mut::h35e90f301dc52414>:
;     fn index_mut(&mut self, index: I) -> &mut I::Output {
 8002c9c:      	push	{r7, lr}
 8002c9e:      	mov	r7, sp
 8002ca0:      	sub	sp, #0x18
 8002ca2:      	str	r0, [sp, #0xc]
 8002ca4:      	str	r1, [sp, #0x10]
;         index.index_mut(self)
 8002ca6:      	bl	#0x106
 8002caa:      	str	r0, [sp, #0x4]
 8002cac:      	str	r1, [sp, #0x8]
 8002cae:      	b	#-0x2 <core::slice::index::<impl core::ops::index::IndexMut<I> for [T]>::index_mut::h35e90f301dc52414+0x14>
;     }
 8002cb0:      	ldr	r1, [sp, #0x8]
 8002cb2:      	ldr	r0, [sp, #0x4]
 8002cb4:      	add	sp, #0x18
 8002cb6:      	pop	{r7, pc}

08002cb8 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked_mut::h21d7eae3cdd30f61>:
;     unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut [T] {
 8002cb8:      	push	{r7, lr}
 8002cba:      	mov	r7, sp
 8002cbc:      	sub	sp, #0x30
 8002cbe:      	str	r3, [sp, #0xc]
 8002cc0:      	str	r2, [sp, #0x14]
 8002cc2:      	mov	r2, r1
 8002cc4:      	ldr	r1, [sp, #0xc]
 8002cc6:      	str	r2, [sp, #0x10]
 8002cc8:      	mov	r3, r0
 8002cca:      	ldr	r0, [sp, #0x14]
 8002ccc:      	str	r3, [sp, #0x18]
 8002cce:      	str	r3, [sp, #0x20]
 8002cd0:      	str	r2, [sp, #0x24]
 8002cd2:      	str	r0, [sp, #0x28]
 8002cd4:      	str	r1, [sp, #0x2c]
;             ptr::slice_from_raw_parts_mut(slice.as_mut_ptr().add(self.start), self.end - self.start)
 8002cd6:      	bl	#0x140
 8002cda:      	str	r0, [sp, #0x1c]
 8002cdc:      	b	#-0x2 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked_mut::h21d7eae3cdd30f61+0x26>
 8002cde:      	ldr	r1, [sp, #0x18]
 8002ce0:      	ldr	r0, [sp, #0x1c]
 8002ce2:      	bl	#0xfe
 8002ce6:      	str	r0, [sp, #0x8]
 8002ce8:      	b	#-0x2 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked_mut::h21d7eae3cdd30f61+0x32>
 8002cea:      	ldr	r0, [sp, #0x8]
 8002cec:      	ldr	r1, [sp, #0x10]
 8002cee:      	ldr	r2, [sp, #0x18]
 8002cf0:      	subs	r1, r1, r2
 8002cf2:      	bl	#0xc4
 8002cf6:      	str	r0, [sp]
 8002cf8:      	str	r1, [sp, #0x4]
 8002cfa:      	b	#-0x2 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked_mut::h21d7eae3cdd30f61+0x44>
;     }
 8002cfc:      	ldr	r1, [sp, #0x4]
 8002cfe:      	ldr	r0, [sp]
 8002d00:      	add	sp, #0x30
 8002d02:      	pop	{r7, pc}

08002d04 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h4bfa3c19d90c9ae8>:
;     fn index_mut(self, slice: &mut [T]) -> &mut [T] {
 8002d04:      	push	{r7, lr}
 8002d06:      	mov	r7, sp
 8002d08:      	sub	sp, #0x38
 8002d0a:      	str	r3, [sp, #0x14]
 8002d0c:      	str	r2, [sp, #0x18]
 8002d0e:      	str	r1, [sp, #0x1c]
 8002d10:      	str	r0, [sp, #0x20]
 8002d12:      	ldr.w	r12, [r7, #0x8]
 8002d16:      	str.w	r12, [sp, #0x24]
 8002d1a:      	str	r0, [sp, #0x28]
 8002d1c:      	str	r1, [sp, #0x2c]
 8002d1e:      	str	r2, [sp, #0x30]
 8002d20:      	str	r3, [sp, #0x34]
;         if self.start > self.end {
 8002d22:      	cmp	r0, r1
 8002d24:      	bls	#0xc <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h4bfa3c19d90c9ae8+0x30>
 8002d26:      	b	#-0x2 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h4bfa3c19d90c9ae8+0x24>
;             slice_index_order_fail(self.start, self.end);
 8002d28:      	ldr	r2, [sp, #0x24]
 8002d2a:      	ldr	r1, [sp, #0x1c]
 8002d2c:      	ldr	r0, [sp, #0x20]
 8002d2e:      	bl	#-0x86a
 8002d32:      	trap
;         } else if self.end > slice.len() {
 8002d34:      	ldr	r1, [sp, #0x14]
 8002d36:      	ldr	r0, [sp, #0x18]
 8002d38:      	bl	#-0x133a
 8002d3c:      	str	r0, [sp, #0x10]
 8002d3e:      	b	#-0x2 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h4bfa3c19d90c9ae8+0x3c>
 8002d40:      	ldr	r0, [sp, #0x1c]
 8002d42:      	ldr	r1, [sp, #0x10]
 8002d44:      	cmp	r0, r1
 8002d46:      	bls	#0xc <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h4bfa3c19d90c9ae8+0x52>
 8002d48:      	b	#-0x2 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h4bfa3c19d90c9ae8+0x46>
;             slice_end_index_len_fail(self.end, slice.len());
 8002d4a:      	ldr	r1, [sp, #0x14]
 8002d4c:      	ldr	r0, [sp, #0x18]
 8002d4e:      	bl	#-0x1350
 8002d52:      	str	r0, [sp, #0xc]
 8002d54:      	b	#0x10 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h4bfa3c19d90c9ae8+0x64>
;         unsafe { &mut *self.get_unchecked_mut(slice) }
 8002d56:      	ldr	r3, [sp, #0x14]
 8002d58:      	ldr	r2, [sp, #0x18]
 8002d5a:      	ldr	r1, [sp, #0x1c]
 8002d5c:      	ldr	r0, [sp, #0x20]
 8002d5e:      	bl	#-0xaa
 8002d62:      	str	r0, [sp, #0x4]
 8002d64:      	str	r1, [sp, #0x8]
 8002d66:      	b	#0xa <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h4bfa3c19d90c9ae8+0x70>
;             slice_end_index_len_fail(self.end, slice.len());
 8002d68:      	ldr	r2, [sp, #0x24]
 8002d6a:      	ldr	r1, [sp, #0xc]
 8002d6c:      	ldr	r0, [sp, #0x1c]
 8002d6e:      	bl	#-0x8ec
 8002d72:      	trap
;     }
 8002d74:      	ldr	r1, [sp, #0x8]
 8002d76:      	ldr	r0, [sp, #0x4]
 8002d78:      	add	sp, #0x38
 8002d7a:      	pop	{r7, pc}

08002d7c <<core::ops::range::RangeTo<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::hfdb13c0c35e80261>:
;     fn index_mut(self, slice: &mut [T]) -> &mut [T] {
 8002d7c:      	push	{r7, lr}
 8002d7e:      	mov	r7, sp
 8002d80:      	sub	sp, #0x20
 8002d82:      	mov	r12, r3
 8002d84:      	mov	r3, r2
 8002d86:      	mov	r2, r1
 8002d88:      	str	r0, [sp, #0x14]
 8002d8a:      	str	r2, [sp, #0x18]
 8002d8c:      	str	r3, [sp, #0x1c]
 8002d8e:      	movs	r1, #0x0
;         (0..self.end).index_mut(slice)
 8002d90:      	str	r1, [sp, #0xc]
 8002d92:      	str	r0, [sp, #0x10]
 8002d94:      	ldr	r0, [sp, #0xc]
 8002d96:      	ldr	r1, [sp, #0x10]
 8002d98:      	mov	lr, sp
 8002d9a:      	str.w	r12, [lr]
 8002d9e:      	bl	#-0x9e
 8002da2:      	str	r0, [sp, #0x4]
 8002da4:      	str	r1, [sp, #0x8]
 8002da6:      	b	#-0x2 <<core::ops::range::RangeTo<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::hfdb13c0c35e80261+0x2c>
;     }
 8002da8:      	ldr	r1, [sp, #0x8]
 8002daa:      	ldr	r0, [sp, #0x4]
 8002dac:      	add	sp, #0x20
 8002dae:      	pop	{r7, pc}

08002db0 <<core::ops::range::RangeFull as core::slice::index::SliceIndex<[T]>>::index_mut::h882173c164964d17>:
;     fn index_mut(self, slice: &mut [T]) -> &mut [T] {
 8002db0:      	sub	sp, #0xc
 8002db2:      	str	r0, [sp, #0x4]
 8002db4:      	str	r1, [sp, #0x8]
;     }
 8002db6:      	add	sp, #0xc
 8002db8:      	bx	lr

08002dba <core::ptr::slice_from_raw_parts_mut::h341d018f77e3d411>:
; pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
 8002dba:      	push	{r7, lr}
 8002dbc:      	mov	r7, sp
 8002dbe:      	sub	sp, #0x18
 8002dc0:      	str	r1, [sp, #0x8]
 8002dc2:      	str	r0, [sp, #0x10]
 8002dc4:      	str	r1, [sp, #0x14]
;     from_raw_parts_mut(data.cast(), len)
 8002dc6:      	bl	#0x32
 8002dca:      	str	r0, [sp, #0xc]
 8002dcc:      	b	#-0x2 <core::ptr::slice_from_raw_parts_mut::h341d018f77e3d411+0x14>
 8002dce:      	ldr	r1, [sp, #0x8]
 8002dd0:      	ldr	r0, [sp, #0xc]
 8002dd2:      	bl	#0x4e
 8002dd6:      	str	r0, [sp]
 8002dd8:      	str	r1, [sp, #0x4]
 8002dda:      	b	#-0x2 <core::ptr::slice_from_raw_parts_mut::h341d018f77e3d411+0x22>
; }
 8002ddc:      	ldr	r1, [sp, #0x4]
 8002dde:      	ldr	r0, [sp]
 8002de0:      	add	sp, #0x18
 8002de2:      	pop	{r7, pc}

08002de4 <core::ptr::mut_ptr::<impl *mut T>::add::had154162c471cda6>:
;     pub const unsafe fn add(self, count: usize) -> Self
 8002de4:      	push	{r7, lr}
 8002de6:      	mov	r7, sp
 8002de8:      	sub	sp, #0x10
 8002dea:      	str	r0, [sp, #0x8]
 8002dec:      	str	r1, [sp, #0xc]
;         unsafe { self.offset(count as isize) }
 8002dee:      	bl	#0x12
 8002df2:      	str	r0, [sp, #0x4]
 8002df4:      	b	#-0x2 <core::ptr::mut_ptr::<impl *mut T>::add::had154162c471cda6+0x12>
;     }
 8002df6:      	ldr	r0, [sp, #0x4]
 8002df8:      	add	sp, #0x10
 8002dfa:      	pop	{r7, pc}

08002dfc <core::ptr::mut_ptr::<impl *mut T>::cast::h21d18c48789e82f8>:
;     pub const fn cast<U>(self) -> *mut U {
 8002dfc:      	sub	sp, #0x4
 8002dfe:      	str	r0, [sp]
;     }
 8002e00:      	add	sp, #0x4
 8002e02:      	bx	lr

08002e04 <core::ptr::mut_ptr::<impl *mut T>::offset::h64834a5a3c3470cc>:
;     pub const unsafe fn offset(self, count: isize) -> *mut T
 8002e04:      	sub	sp, #0x10
 8002e06:      	str	r0, [sp, #0x4]
 8002e08:      	str	r1, [sp, #0x8]
;         unsafe { intrinsics::offset(self, count) as *mut T }
 8002e0a:      	add	r0, r1
 8002e0c:      	str	r0, [sp, #0xc]
 8002e0e:      	ldr	r0, [sp, #0xc]
 8002e10:      	str	r0, [sp]
 8002e12:      	b	#-0x2 <core::ptr::mut_ptr::<impl *mut T>::offset::h64834a5a3c3470cc+0x10>
;     }
 8002e14:      	ldr	r0, [sp]
 8002e16:      	add	sp, #0x10
 8002e18:      	bx	lr

08002e1a <core::ptr::mut_ptr::<impl *mut [T]>::as_mut_ptr::h04dc22149c16f975>:
;     pub const fn as_mut_ptr(self) -> *mut T {
 8002e1a:      	sub	sp, #0x8
 8002e1c:      	str	r0, [sp]
 8002e1e:      	str	r1, [sp, #0x4]
;     }
 8002e20:      	add	sp, #0x8
 8002e22:      	bx	lr

08002e24 <core::ptr::metadata::from_raw_parts_mut::h6ed32337855aadd4>:
; pub const fn from_raw_parts_mut<T: ?Sized>(
 8002e24:      	sub	sp, #0x18
 8002e26:      	str	r0, [sp, #0x10]
 8002e28:      	str	r1, [sp, #0x14]
;     unsafe { PtrRepr { components: PtrComponents { data_address, metadata } }.mut_ptr }
 8002e2a:      	str	r0, [sp, #0x8]
 8002e2c:      	str	r1, [sp, #0xc]
 8002e2e:      	ldr	r1, [sp, #0x8]
 8002e30:      	ldr	r0, [sp, #0xc]
 8002e32:      	str	r1, [sp]
 8002e34:      	str	r0, [sp, #0x4]
 8002e36:      	ldr	r0, [sp]
 8002e38:      	ldr	r1, [sp, #0x4]
; }
 8002e3a:      	add	sp, #0x18
 8002e3c:      	bx	lr

08002e3e <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h2fca387f91431215E>:
;     pub fn ok(self) -> Option<T> {
 8002e3e:      	sub	sp, #0x8
 8002e40:      	strb.w	r0, [sp, #0x2]
;             Ok(x) => Some(x),
 8002e44:      	ldrb.w	r1, [sp, #0x2]
 8002e48:      	lsls	r0, r1, #0x1f
 8002e4a:      	cbz	r0, #0xa
 8002e4c:      	b	#-0x2 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h2fca387f91431215E+0x10>
 8002e4e:      	movs	r0, #0x0
;             Err(_) => None,
 8002e50:      	strb.w	r0, [sp, #0x3]
;         match self {
 8002e54:      	b	#0x12 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h2fca387f91431215E+0x2c>
 8002e56:      	trap
 8002e58:      	movs	r0, #0x1
;             Ok(x) => Some(x),
 8002e5a:      	strb.w	r0, [sp, #0x3]
;     }
 8002e5e:      	b	#0x8 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h2fca387f91431215E+0x2c>
 8002e60:      	ldrb.w	r0, [sp, #0x3]
 8002e64:      	add	sp, #0x8
 8002e66:      	bx	lr
 8002e68:      	b	#-0xc <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h2fca387f91431215E+0x22>
 8002e6a:      	ldrb.w	r0, [sp, #0x2]
 8002e6e:      	lsls	r0, r0, #0x1f
 8002e70:      	cmp	r0, #0x0
 8002e72:      	beq	#-0x16 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h2fca387f91431215E+0x22>
 8002e74:      	b	#-0x10 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h2fca387f91431215E+0x2a>

08002e76 <cortex_m::itm::write_words::h1b135630fdbbe981>:
; unsafe fn write_words(stim: &mut Stim, bytes: &[u32]) {
 8002e76:      	push	{r7, lr}
 8002e78:      	mov	r7, sp
 8002e7a:      	sub	sp, #0x58
 8002e7c:      	str	r2, [sp, #0x1c]
 8002e7e:      	mov	r2, r1
 8002e80:      	ldr	r1, [sp, #0x1c]
 8002e82:      	str	r2, [sp, #0x20]
 8002e84:      	mov	r2, r0
 8002e86:      	ldr	r0, [sp, #0x20]
 8002e88:      	str	r2, [sp, #0x24]
 8002e8a:      	str	r2, [sp, #0x44]
 8002e8c:      	str	r0, [sp, #0x48]
 8002e8e:      	str	r1, [sp, #0x4c]
;     let mut p = bytes.as_ptr();
 8002e90:      	bl	#-0x1482
 8002e94:      	str	r0, [sp, #0x28]
 8002e96:      	b	#-0x2 <cortex_m::itm::write_words::h1b135630fdbbe981+0x22>
;     for _ in 0..bytes.len() {
 8002e98:      	ldr	r1, [sp, #0x1c]
 8002e9a:      	ldr	r0, [sp, #0x20]
 8002e9c:      	bl	#-0x14ae
 8002ea0:      	str	r0, [sp, #0x18]
 8002ea2:      	b	#-0x2 <cortex_m::itm::write_words::h1b135630fdbbe981+0x2e>
 8002ea4:      	ldr	r0, [sp, #0x18]
 8002ea6:      	movs	r1, #0x0
;     for _ in 0..bytes.len() {
 8002ea8:      	str	r1, [sp, #0x2c]
 8002eaa:      	str	r0, [sp, #0x30]
 8002eac:      	ldr	r0, [sp, #0x2c]
 8002eae:      	ldr	r1, [sp, #0x30]
 8002eb0:      	bl	#0x350
 8002eb4:      	str	r0, [sp, #0x10]
 8002eb6:      	str	r1, [sp, #0x14]
 8002eb8:      	b	#-0x2 <cortex_m::itm::write_words::h1b135630fdbbe981+0x44>
 8002eba:      	ldr	r0, [sp, #0x14]
 8002ebc:      	ldr	r1, [sp, #0x10]
 8002ebe:      	str	r1, [sp, #0x34]
 8002ec0:      	str	r0, [sp, #0x38]
 8002ec2:      	b	#-0x2 <cortex_m::itm::write_words::h1b135630fdbbe981+0x4e>
 8002ec4:      	add	r0, sp, #0x34
;     for _ in 0..bytes.len() {
 8002ec6:      	bl	#0x2e0
 8002eca:      	str	r1, [sp, #0x40]
 8002ecc:      	str	r0, [sp, #0x3c]
 8002ece:      	b	#-0x2 <cortex_m::itm::write_words::h1b135630fdbbe981+0x5a>
 8002ed0:      	ldr	r0, [sp, #0x3c]
 8002ed2:      	cbz	r0, #0x2
 8002ed4:      	b	#-0x2 <cortex_m::itm::write_words::h1b135630fdbbe981+0x60>
 8002ed6:      	b	#0x4 <cortex_m::itm::write_words::h1b135630fdbbe981+0x68>
; }
 8002ed8:      	add	sp, #0x58
 8002eda:      	pop	{r7, pc}
;     for _ in 0..bytes.len() {
 8002edc:      	trap
 8002ede:      	ldr	r0, [sp, #0x40]
 8002ee0:      	str	r0, [sp, #0x50]
 8002ee2:      	str	r0, [sp, #0x54]
;         while !stim.is_fifo_ready() {}
 8002ee4:      	b	#-0x2 <cortex_m::itm::write_words::h1b135630fdbbe981+0x70>
 8002ee6:      	ldr	r0, [sp, #0x24]
 8002ee8:      	bl	#0x3ba
 8002eec:      	str	r0, [sp, #0xc]
 8002eee:      	b	#-0x2 <cortex_m::itm::write_words::h1b135630fdbbe981+0x7a>
 8002ef0:      	ldr	r0, [sp, #0xc]
 8002ef2:      	lsls	r0, r0, #0x1f
 8002ef4:      	cbz	r0, #0xa
 8002ef6:      	b	#-0x2 <cortex_m::itm::write_words::h1b135630fdbbe981+0x82>
;         stim.write_u32(ptr::read(p));
 8002ef8:      	ldr	r0, [sp, #0x28]
 8002efa:      	bl	#-0x167a
 8002efe:      	str	r0, [sp, #0x8]
 8002f00:      	b	#0x0 <cortex_m::itm::write_words::h1b135630fdbbe981+0x8e>
;         while !stim.is_fifo_ready() {}
 8002f02:      	b	#-0x20 <cortex_m::itm::write_words::h1b135630fdbbe981+0x70>
;         stim.write_u32(ptr::read(p));
 8002f04:      	ldr	r1, [sp, #0x8]
 8002f06:      	ldr	r0, [sp, #0x24]
 8002f08:      	bl	#0x378
 8002f0c:      	b	#-0x2 <cortex_m::itm::write_words::h1b135630fdbbe981+0x98>
;         p = p.offset(1);
 8002f0e:      	ldr	r0, [sp, #0x28]
 8002f10:      	movs	r1, #0x1
 8002f12:      	bl	#-0x15b4
 8002f16:      	str	r0, [sp, #0x4]
 8002f18:      	b	#-0x2 <cortex_m::itm::write_words::h1b135630fdbbe981+0xa4>
 8002f1a:      	ldr	r0, [sp, #0x4]
 8002f1c:      	str	r0, [sp, #0x28]
;     for _ in 0..bytes.len() {
 8002f1e:      	b	#-0x5e <cortex_m::itm::write_words::h1b135630fdbbe981+0x4e>

08002f20 <cortex_m::itm::write_aligned_impl::h0fdae8f99a8aa540>:
; unsafe fn write_aligned_impl(port: &mut Stim, buffer: &[u8]) {
 8002f20:      	push	{r7, lr}
 8002f22:      	mov	r7, sp
 8002f24:      	sub	sp, #0x60
 8002f26:      	str	r2, [sp, #0x34]
 8002f28:      	mov	r2, r1
 8002f2a:      	ldr	r1, [sp, #0x34]
 8002f2c:      	str	r2, [sp, #0x38]
 8002f2e:      	mov	r2, r0
 8002f30:      	ldr	r0, [sp, #0x38]
 8002f32:      	str	r2, [sp, #0x3c]
 8002f34:      	str	r2, [sp, #0x4c]
 8002f36:      	str	r0, [sp, #0x50]
 8002f38:      	str	r1, [sp, #0x54]
;     let len = buffer.len();
 8002f3a:      	bl	#-0x153c
 8002f3e:      	mov	r1, r0
 8002f40:      	str	r1, [sp, #0x40]
 8002f42:      	str	r0, [sp, #0x58]
 8002f44:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::h0fdae8f99a8aa540+0x26>
;     if len == 0 {
 8002f46:      	ldr	r0, [sp, #0x40]
 8002f48:      	cbnz	r0, #0x2
 8002f4a:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::h0fdae8f99a8aa540+0x2c>
; }
 8002f4c:      	b	#0xdc <cortex_m::itm::write_aligned_impl::h0fdae8f99a8aa540+0x10c>
;     let split = len & !0b11;
 8002f4e:      	ldr	r1, [sp, #0x34]
 8002f50:      	ldr	r0, [sp, #0x38]
 8002f52:      	ldr	r2, [sp, #0x40]
 8002f54:      	bic	r2, r2, #0x3
 8002f58:      	mov	r3, r2
 8002f5a:      	str	r3, [sp, #0x2c]
 8002f5c:      	str	r2, [sp, #0x5c]
;         slice::from_raw_parts(buffer.as_ptr() as *const u32, split >> 2),
 8002f5e:      	bl	#-0x1546
 8002f62:      	str	r0, [sp, #0x30]
 8002f64:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::h0fdae8f99a8aa540+0x46>
 8002f66:      	ldr	r0, [sp, #0x2c]
 8002f68:      	ldr	r1, [sp, #0x30]
 8002f6a:      	str	r1, [sp, #0x24]
 8002f6c:      	lsrs	r0, r0, #0x2
 8002f6e:      	str	r0, [sp, #0x28]
 8002f70:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::h0fdae8f99a8aa540+0x52>
 8002f72:      	ldr	r1, [sp, #0x28]
 8002f74:      	ldr	r0, [sp, #0x24]
 8002f76:      	bl	#0x36c
 8002f7a:      	str	r0, [sp, #0x1c]
 8002f7c:      	str	r1, [sp, #0x20]
 8002f7e:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::h0fdae8f99a8aa540+0x60>
;     write_words(
 8002f80:      	ldr	r2, [sp, #0x20]
 8002f82:      	ldr	r1, [sp, #0x1c]
 8002f84:      	ldr	r0, [sp, #0x3c]
 8002f86:      	bl	#-0x114
 8002f8a:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::h0fdae8f99a8aa540+0x6c>
;     let mut left = len & 0b11;
 8002f8c:      	ldr	r1, [sp, #0x34]
 8002f8e:      	ldr	r0, [sp, #0x38]
 8002f90:      	ldr	r2, [sp, #0x40]
 8002f92:      	and	r2, r2, #0x3
 8002f96:      	str	r2, [sp, #0x44]
;     let mut ptr = buffer.as_ptr().add(split);
 8002f98:      	bl	#-0x1580
 8002f9c:      	str	r0, [sp, #0x18]
 8002f9e:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::h0fdae8f99a8aa540+0x80>
 8002fa0:      	ldr	r1, [sp, #0x2c]
 8002fa2:      	ldr	r0, [sp, #0x18]
 8002fa4:      	bl	#-0x1684
 8002fa8:      	str	r0, [sp, #0x48]
 8002faa:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::h0fdae8f99a8aa540+0x8c>
;     if left > 1 {
 8002fac:      	ldr	r0, [sp, #0x44]
 8002fae:      	cmp	r0, #0x1
 8002fb0:      	bhi	#0x2 <cortex_m::itm::write_aligned_impl::h0fdae8f99a8aa540+0x96>
 8002fb2:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::h0fdae8f99a8aa540+0x94>
 8002fb4:      	b	#0x48 <cortex_m::itm::write_aligned_impl::h0fdae8f99a8aa540+0xe0>
;         while !port.is_fifo_ready() {}
 8002fb6:      	ldr	r0, [sp, #0x3c]
 8002fb8:      	bl	#0x2ea
 8002fbc:      	str	r0, [sp, #0x14]
 8002fbe:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::h0fdae8f99a8aa540+0xa0>
 8002fc0:      	ldr	r0, [sp, #0x14]
 8002fc2:      	lsls	r0, r0, #0x1f
 8002fc4:      	cbz	r0, #0xa
 8002fc6:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::h0fdae8f99a8aa540+0xa8>
;         port.write_u16(ptr::read(ptr as *const u16));
 8002fc8:      	ldr	r0, [sp, #0x48]
 8002fca:      	bl	#-0x1718
 8002fce:      	str	r0, [sp, #0x10]
 8002fd0:      	b	#0x0 <cortex_m::itm::write_aligned_impl::h0fdae8f99a8aa540+0xb4>
;         while !port.is_fifo_ready() {}
 8002fd2:      	b	#-0x20 <cortex_m::itm::write_aligned_impl::h0fdae8f99a8aa540+0x96>
;         port.write_u16(ptr::read(ptr as *const u16));
 8002fd4:      	ldr	r1, [sp, #0x10]
 8002fd6:      	ldr	r0, [sp, #0x3c]
 8002fd8:      	bl	#0x282
 8002fdc:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::h0fdae8f99a8aa540+0xbe>
;         ptr = ptr.offset(2);
 8002fde:      	ldr	r0, [sp, #0x48]
 8002fe0:      	movs	r1, #0x2
 8002fe2:      	bl	#-0x169a
 8002fe6:      	str	r0, [sp, #0xc]
 8002fe8:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::h0fdae8f99a8aa540+0xca>
 8002fea:      	ldr	r0, [sp, #0xc]
 8002fec:      	str	r0, [sp, #0x48]
;         left -= 2;
 8002fee:      	ldr	r0, [sp, #0x44]
 8002ff0:      	subs	r1, r0, #0x2
 8002ff2:      	str	r1, [sp, #0x8]
 8002ff4:      	cmp	r0, #0x2
 8002ff6:      	blo	#0x36 <cortex_m::itm::write_aligned_impl::h0fdae8f99a8aa540+0x110>
 8002ff8:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::h0fdae8f99a8aa540+0xda>
 8002ffa:      	ldr	r0, [sp, #0x8]
 8002ffc:      	str	r0, [sp, #0x44]
;     if left > 1 {
 8002ffe:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::h0fdae8f99a8aa540+0xe0>
;     if left == 1 {
 8003000:      	ldr	r0, [sp, #0x44]
 8003002:      	cmp	r0, #0x1
 8003004:      	beq	#0x2 <cortex_m::itm::write_aligned_impl::h0fdae8f99a8aa540+0xea>
 8003006:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::h0fdae8f99a8aa540+0xe8>
 8003008:      	b	#0x20 <cortex_m::itm::write_aligned_impl::h0fdae8f99a8aa540+0x10c>
;         while !port.is_fifo_ready() {}
 800300a:      	ldr	r0, [sp, #0x3c]
 800300c:      	bl	#0x296
 8003010:      	str	r0, [sp, #0x4]
 8003012:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::h0fdae8f99a8aa540+0xf4>
 8003014:      	ldr	r0, [sp, #0x4]
 8003016:      	lsls	r0, r0, #0x1f
 8003018:      	cbz	r0, #0xc
 800301a:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::h0fdae8f99a8aa540+0xfc>
;         port.write_u8(*ptr);
 800301c:      	ldr	r0, [sp, #0x3c]
 800301e:      	ldr	r1, [sp, #0x48]
 8003020:      	ldrb	r1, [r1]
 8003022:      	bl	#0x212
 8003026:      	b	#0x0 <cortex_m::itm::write_aligned_impl::h0fdae8f99a8aa540+0x10a>
;         while !port.is_fifo_ready() {}
 8003028:      	b	#-0x22 <cortex_m::itm::write_aligned_impl::h0fdae8f99a8aa540+0xea>
;     if left == 1 {
 800302a:      	b	#-0x2 <cortex_m::itm::write_aligned_impl::h0fdae8f99a8aa540+0x10c>
; }
 800302c:      	add	sp, #0x60
 800302e:      	pop	{r7, pc}
;         left -= 2;
 8003030:      	movw	r0, #0x3b30
 8003034:      	movt	r0, #0x800
 8003038:      	movw	r2, #0x3b20
 800303c:      	movt	r2, #0x800
 8003040:      	movs	r1, #0x21
 8003042:      	bl	#-0x14b0
 8003046:      	trap

08003048 <cortex_m::itm::write_all::h441334bb52677f57>:
; pub fn write_all(port: &mut Stim, buffer: &[u8]) {
 8003048:      	push	{r7, lr}
 800304a:      	mov	r7, sp
 800304c:      	sub	sp, #0x48
 800304e:      	str	r2, [sp, #0x28]
 8003050:      	mov	r2, r1
 8003052:      	ldr	r1, [sp, #0x28]
 8003054:      	str	r2, [sp, #0x2c]
 8003056:      	mov	r2, r0
 8003058:      	ldr	r0, [sp, #0x2c]
 800305a:      	str	r2, [sp, #0x30]
 800305c:      	str	r2, [sp, #0x3c]
 800305e:      	str	r0, [sp, #0x40]
 8003060:      	str	r1, [sp, #0x44]
;         let mut len = buffer.len();
 8003062:      	bl	#-0x1664
 8003066:      	str	r0, [sp, #0x34]
 8003068:      	b	#-0x2 <cortex_m::itm::write_all::h441334bb52677f57+0x22>
;         let mut ptr = buffer.as_ptr();
 800306a:      	ldr	r1, [sp, #0x28]
 800306c:      	ldr	r0, [sp, #0x2c]
 800306e:      	bl	#-0x1656
 8003072:      	str	r0, [sp, #0x38]
 8003074:      	b	#-0x2 <cortex_m::itm::write_all::h441334bb52677f57+0x2e>
;         if len == 0 {
 8003076:      	ldr	r0, [sp, #0x34]
 8003078:      	cbnz	r0, #0x2
 800307a:      	b	#-0x2 <cortex_m::itm::write_all::h441334bb52677f57+0x34>
; //! Low level access to Cortex-M processors
 800307c:      	b	#0xf6 <cortex_m::itm::write_all::h441334bb52677f57+0x12e>
;         if ptr as usize % 2 == 1 {
 800307e:      	ldrb.w	r0, [sp, #0x38]
 8003082:      	lsls	r0, r0, #0x1f
 8003084:      	cbnz	r0, #0x2
 8003086:      	b	#-0x2 <cortex_m::itm::write_all::h441334bb52677f57+0x40>
 8003088:      	b	#0x40 <cortex_m::itm::write_all::h441334bb52677f57+0x84>
;             while !port.is_fifo_ready() {}
 800308a:      	ldr	r0, [sp, #0x30]
 800308c:      	bl	#0x216
 8003090:      	str	r0, [sp, #0x24]
 8003092:      	b	#-0x2 <cortex_m::itm::write_all::h441334bb52677f57+0x4c>
 8003094:      	ldr	r0, [sp, #0x24]
 8003096:      	lsls	r0, r0, #0x1f
 8003098:      	cbz	r0, #0xc
 800309a:      	b	#-0x2 <cortex_m::itm::write_all::h441334bb52677f57+0x54>
;             port.write_u8(*ptr);
 800309c:      	ldr	r0, [sp, #0x30]
 800309e:      	ldr	r1, [sp, #0x38]
 80030a0:      	ldrb	r1, [r1]
 80030a2:      	bl	#0x192
 80030a6:      	b	#0x0 <cortex_m::itm::write_all::h441334bb52677f57+0x62>
;             while !port.is_fifo_ready() {}
 80030a8:      	b	#-0x22 <cortex_m::itm::write_all::h441334bb52677f57+0x42>
;             ptr = ptr.offset(1);
 80030aa:      	ldr	r0, [sp, #0x38]
 80030ac:      	movs	r1, #0x1
 80030ae:      	bl	#-0x1766
 80030b2:      	str	r0, [sp, #0x20]
 80030b4:      	b	#-0x2 <cortex_m::itm::write_all::h441334bb52677f57+0x6e>
 80030b6:      	ldr	r0, [sp, #0x20]
 80030b8:      	str	r0, [sp, #0x38]
;             len -= 1;
 80030ba:      	ldr	r0, [sp, #0x34]
 80030bc:      	subs	r1, r0, #0x1
 80030be:      	str	r1, [sp, #0x1c]
 80030c0:      	cmp	r0, #0x1
 80030c2:      	blo	#0xb4 <cortex_m::itm::write_all::h441334bb52677f57+0x132>
 80030c4:      	b	#-0x2 <cortex_m::itm::write_all::h441334bb52677f57+0x7e>
 80030c6:      	ldr	r0, [sp, #0x1c]
 80030c8:      	str	r0, [sp, #0x34]
;         if ptr as usize % 2 == 1 {
 80030ca:      	b	#-0x2 <cortex_m::itm::write_all::h441334bb52677f57+0x84>
;         if ptr as usize % 4 == 2 {
 80030cc:      	ldr	r0, [sp, #0x38]
 80030ce:      	and	r0, r0, #0x3
 80030d2:      	cmp	r0, #0x2
 80030d4:      	bne	#0x8 <cortex_m::itm::write_all::h441334bb52677f57+0x98>
 80030d6:      	b	#-0x2 <cortex_m::itm::write_all::h441334bb52677f57+0x90>
;             if len > 1 {
 80030d8:      	ldr	r0, [sp, #0x34]
 80030da:      	cmp	r0, #0x1
 80030dc:      	bhi	#0xa <cortex_m::itm::write_all::h441334bb52677f57+0xa2>
 80030de:      	b	#0x0 <cortex_m::itm::write_all::h441334bb52677f57+0x9a>
;         if ptr as usize % 4 == 2 {
 80030e0:      	b	#0x76 <cortex_m::itm::write_all::h441334bb52677f57+0x112>
;                 if len == 1 {
 80030e2:      	ldr	r0, [sp, #0x34]
 80030e4:      	cmp	r0, #0x1
 80030e6:      	beq	#0x4c <cortex_m::itm::write_all::h441334bb52677f57+0xee>
 80030e8:      	b	#0x48 <cortex_m::itm::write_all::h441334bb52677f57+0xec>
;                 while !port.is_fifo_ready() {}
 80030ea:      	ldr	r0, [sp, #0x30]
 80030ec:      	bl	#0x1b6
 80030f0:      	str	r0, [sp, #0x18]
 80030f2:      	b	#-0x2 <cortex_m::itm::write_all::h441334bb52677f57+0xac>
 80030f4:      	ldr	r0, [sp, #0x18]
 80030f6:      	lsls	r0, r0, #0x1f
 80030f8:      	cbz	r0, #0xa
 80030fa:      	b	#-0x2 <cortex_m::itm::write_all::h441334bb52677f57+0xb4>
;                 port.write_u16(ptr::read(ptr as *const u16));
 80030fc:      	ldr	r0, [sp, #0x38]
 80030fe:      	bl	#-0x184c
 8003102:      	str	r0, [sp, #0x14]
 8003104:      	b	#0x0 <cortex_m::itm::write_all::h441334bb52677f57+0xc0>
;                 while !port.is_fifo_ready() {}
 8003106:      	b	#-0x20 <cortex_m::itm::write_all::h441334bb52677f57+0xa2>
;                 port.write_u16(ptr::read(ptr as *const u16));
 8003108:      	ldr	r1, [sp, #0x14]
 800310a:      	ldr	r0, [sp, #0x30]
 800310c:      	bl	#0x14e
 8003110:      	b	#-0x2 <cortex_m::itm::write_all::h441334bb52677f57+0xca>
;                 ptr = ptr.offset(2);
 8003112:      	ldr	r0, [sp, #0x38]
 8003114:      	movs	r1, #0x2
 8003116:      	bl	#-0x17ce
 800311a:      	str	r0, [sp, #0x10]
 800311c:      	b	#-0x2 <cortex_m::itm::write_all::h441334bb52677f57+0xd6>
 800311e:      	ldr	r0, [sp, #0x10]
 8003120:      	str	r0, [sp, #0x38]
;                 len -= 2;
 8003122:      	ldr	r0, [sp, #0x34]
 8003124:      	subs	r1, r0, #0x2
 8003126:      	str	r1, [sp, #0xc]
 8003128:      	cmp	r0, #0x2
 800312a:      	blo	#0x64 <cortex_m::itm::write_all::h441334bb52677f57+0x14a>
 800312c:      	b	#-0x2 <cortex_m::itm::write_all::h441334bb52677f57+0xe6>
 800312e:      	ldr	r0, [sp, #0xc]
 8003130:      	str	r0, [sp, #0x34]
;         if ptr as usize % 4 == 2 {
 8003132:      	b	#0x24 <cortex_m::itm::write_all::h441334bb52677f57+0x112>
;                 if len == 1 {
 8003134:      	b	#0x20 <cortex_m::itm::write_all::h441334bb52677f57+0x110>
;                     while !port.is_fifo_ready() {}
 8003136:      	ldr	r0, [sp, #0x30]
 8003138:      	bl	#0x16a
 800313c:      	str	r0, [sp, #0x8]
 800313e:      	b	#-0x2 <cortex_m::itm::write_all::h441334bb52677f57+0xf8>
 8003140:      	ldr	r0, [sp, #0x8]
 8003142:      	lsls	r0, r0, #0x1f
 8003144:      	cbz	r0, #0xc
 8003146:      	b	#-0x2 <cortex_m::itm::write_all::h441334bb52677f57+0x100>
;                     port.write_u8(*ptr);
 8003148:      	ldr	r0, [sp, #0x30]
 800314a:      	ldr	r1, [sp, #0x38]
 800314c:      	ldrb	r1, [r1]
 800314e:      	bl	#0xe6
 8003152:      	b	#0x0 <cortex_m::itm::write_all::h441334bb52677f57+0x10e>
;                     while !port.is_fifo_ready() {}
 8003154:      	b	#-0x22 <cortex_m::itm::write_all::h441334bb52677f57+0xee>
;                 if len == 1 {
 8003156:      	b	#-0x2 <cortex_m::itm::write_all::h441334bb52677f57+0x110>
; //! Low level access to Cortex-M processors
 8003158:      	b	#0x1a <cortex_m::itm::write_all::h441334bb52677f57+0x12e>
;         write_aligned_impl(port, slice::from_raw_parts(ptr, len));
 800315a:      	ldr	r0, [sp, #0x38]
 800315c:      	ldr	r1, [sp, #0x34]
 800315e:      	bl	#0x168
 8003162:      	str	r0, [sp]
 8003164:      	str	r1, [sp, #0x4]
 8003166:      	b	#-0x2 <cortex_m::itm::write_all::h441334bb52677f57+0x120>
 8003168:      	ldr	r2, [sp, #0x4]
 800316a:      	ldr	r1, [sp]
 800316c:      	ldr	r0, [sp, #0x30]
 800316e:      	bl	#-0x252
 8003172:      	b	#-0x2 <cortex_m::itm::write_all::h441334bb52677f57+0x12c>
; }
 8003174:      	b	#-0x2 <cortex_m::itm::write_all::h441334bb52677f57+0x12e>
 8003176:      	add	sp, #0x48
 8003178:      	pop	{r7, pc}
;             len -= 1;
 800317a:      	movw	r0, #0x3b30
 800317e:      	movt	r0, #0x800
 8003182:      	movw	r2, #0x3b54
 8003186:      	movt	r2, #0x800
 800318a:      	movs	r1, #0x21
 800318c:      	bl	#-0x15fa
 8003190:      	trap
;                 len -= 2;
 8003192:      	movw	r0, #0x3b30
 8003196:      	movt	r0, #0x800
 800319a:      	movw	r2, #0x3b64
 800319e:      	movt	r2, #0x800
 80031a2:      	movs	r1, #0x21
 80031a4:      	bl	#-0x1612
 80031a8:      	trap

080031aa <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h7f99fcfbc5c01093>:
;     fn next(&mut self) -> Option<A> {
 80031aa:      	push	{r7, lr}
 80031ac:      	mov	r7, sp
 80031ae:      	sub	sp, #0x28
 80031b0:      	str	r0, [sp, #0x10]
 80031b2:      	str	r0, [sp, #0x20]
;         if self.start < self.end {
 80031b4:      	adds	r1, r0, #0x4
 80031b6:      	bl	#-0x1840
 80031ba:      	str	r0, [sp, #0x14]
 80031bc:      	b	#-0x2 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h7f99fcfbc5c01093+0x14>
 80031be:      	ldr	r0, [sp, #0x14]
 80031c0:      	lsls	r0, r0, #0x1f
 80031c2:      	cbz	r0, #0xa
 80031c4:      	b	#-0x2 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h7f99fcfbc5c01093+0x1c>
;             let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
 80031c6:      	ldr	r0, [sp, #0x10]
 80031c8:      	bl	#-0x17e4
 80031cc:      	str	r0, [sp, #0xc]
 80031ce:      	b	#0x4 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h7f99fcfbc5c01093+0x2c>
 80031d0:      	movs	r0, #0x0
;             None
 80031d2:      	str	r0, [sp, #0x18]
;         if self.start < self.end {
 80031d4:      	b	#0x24 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h7f99fcfbc5c01093+0x52>
;             let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
 80031d6:      	ldr	r0, [sp, #0xc]
 80031d8:      	movs	r1, #0x1
 80031da:      	bl	#-0x18d2
 80031de:      	mov	r1, r0
 80031e0:      	str	r1, [sp, #0x8]
 80031e2:      	str	r0, [sp, #0x24]
 80031e4:      	b	#-0x2 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h7f99fcfbc5c01093+0x3c>
;             Some(mem::replace(&mut self.start, n))
 80031e6:      	ldr	r1, [sp, #0x8]
 80031e8:      	ldr	r0, [sp, #0x10]
 80031ea:      	bl	#0x20
 80031ee:      	str	r0, [sp, #0x4]
 80031f0:      	b	#-0x2 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h7f99fcfbc5c01093+0x48>
 80031f2:      	ldr	r0, [sp, #0x4]
 80031f4:      	str	r0, [sp, #0x1c]
 80031f6:      	movs	r0, #0x1
 80031f8:      	str	r0, [sp, #0x18]
;         if self.start < self.end {
 80031fa:      	b	#-0x2 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h7f99fcfbc5c01093+0x52>
;     }
 80031fc:      	ldr	r0, [sp, #0x18]
 80031fe:      	ldr	r1, [sp, #0x1c]
 8003200:      	add	sp, #0x28
 8003202:      	pop	{r7, pc}

08003204 <<I as core::iter::traits::collect::IntoIterator>::into_iter::hb36535df37d10469>:
;     fn into_iter(self) -> I {
 8003204:      	sub	sp, #0x8
 8003206:      	str	r0, [sp]
 8003208:      	str	r1, [sp, #0x4]
;     }
 800320a:      	add	sp, #0x8
 800320c:      	bx	lr

0800320e <core::mem::replace::h2f65b10b9250e343>:
; pub fn replace<T>(dest: &mut T, src: T) -> T {
 800320e:      	push	{r7, lr}
 8003210:      	mov	r7, sp
 8003212:      	sub	sp, #0x18
 8003214:      	str	r1, [sp]
 8003216:      	str	r0, [sp, #0x4]
 8003218:      	str	r0, [sp, #0xc]
 800321a:      	str	r1, [sp, #0x10]
;         let result = ptr::read(dest);
 800321c:      	bl	#-0x19ce
 8003220:      	mov	r1, r0
 8003222:      	str	r1, [sp, #0x8]
 8003224:      	str	r0, [sp, #0x14]
 8003226:      	b	#-0x2 <core::mem::replace::h2f65b10b9250e343+0x1a>
;         ptr::write(dest, src);
 8003228:      	ldr	r1, [sp]
 800322a:      	ldr	r0, [sp, #0x4]
 800322c:      	bl	#-0x1938
 8003230:      	b	#-0x2 <core::mem::replace::h2f65b10b9250e343+0x24>
; }
 8003232:      	ldr	r0, [sp, #0x8]
 8003234:      	add	sp, #0x18
 8003236:      	pop	{r7, pc}

08003238 <cortex_m::peripheral::itm::Stim::write_u8::hc7c2a1494af2e60f>:
;     pub fn write_u8(&mut self, value: u8) {
 8003238:      	push	{r7, lr}
 800323a:      	mov	r7, sp
 800323c:      	sub	sp, #0x10
 800323e:      	mov	r2, r1
 8003240:      	str	r2, [sp]
 8003242:      	str	r0, [sp, #0x8]
 8003244:      	strb	r1, [r7, #-1]
;         unsafe { ptr::write_volatile(self.register.get() as *mut u8, value) }
 8003248:      	bl	#-0x186c
 800324c:      	str	r0, [sp, #0x4]
 800324e:      	b	#-0x2 <cortex_m::peripheral::itm::Stim::write_u8::hc7c2a1494af2e60f+0x18>
 8003250:      	ldr	r1, [sp]
 8003252:      	ldr	r0, [sp, #0x4]
 8003254:      	bl	#-0x1a78
 8003258:      	b	#-0x2 <cortex_m::peripheral::itm::Stim::write_u8::hc7c2a1494af2e60f+0x22>
;     }
 800325a:      	add	sp, #0x10
 800325c:      	pop	{r7, pc}

0800325e <cortex_m::peripheral::itm::Stim::write_u16::h70b5bc75501de22b>:
;     pub fn write_u16(&mut self, value: u16) {
 800325e:      	push	{r7, lr}
 8003260:      	mov	r7, sp
 8003262:      	sub	sp, #0x10
 8003264:      	mov	r2, r1
 8003266:      	str	r2, [sp]
 8003268:      	str	r0, [sp, #0x8]
 800326a:      	strh	r1, [r7, #-2]
;         unsafe { ptr::write_volatile(self.register.get() as *mut u16, value) }
 800326e:      	bl	#-0x1892
 8003272:      	str	r0, [sp, #0x4]
 8003274:      	b	#-0x2 <cortex_m::peripheral::itm::Stim::write_u16::h70b5bc75501de22b+0x18>
 8003276:      	ldr	r1, [sp]
 8003278:      	ldr	r0, [sp, #0x4]
 800327a:      	bl	#-0x1aae
 800327e:      	b	#-0x2 <cortex_m::peripheral::itm::Stim::write_u16::h70b5bc75501de22b+0x22>
;     }
 8003280:      	add	sp, #0x10
 8003282:      	pop	{r7, pc}

08003284 <cortex_m::peripheral::itm::Stim::write_u32::h536463fbffd3b6d0>:
;     pub fn write_u32(&mut self, value: u32) {
 8003284:      	push	{r7, lr}
 8003286:      	mov	r7, sp
 8003288:      	sub	sp, #0x10
 800328a:      	str	r1, [sp]
 800328c:      	str	r0, [sp, #0x8]
 800328e:      	str	r1, [sp, #0xc]
;         unsafe { ptr::write_volatile(self.register.get(), value) }
 8003290:      	bl	#-0x18b4
 8003294:      	str	r0, [sp, #0x4]
 8003296:      	b	#-0x2 <cortex_m::peripheral::itm::Stim::write_u32::h536463fbffd3b6d0+0x14>
 8003298:      	ldr	r1, [sp]
 800329a:      	ldr	r0, [sp, #0x4]
 800329c:      	bl	#-0x1ab0
 80032a0:      	b	#-0x2 <cortex_m::peripheral::itm::Stim::write_u32::h536463fbffd3b6d0+0x1e>
;     }
 80032a2:      	add	sp, #0x10
 80032a4:      	pop	{r7, pc}

080032a6 <cortex_m::peripheral::itm::Stim::is_fifo_ready::ha0fba25ce051e29d>:
;     pub fn is_fifo_ready(&self) -> bool {
 80032a6:      	push	{r7, lr}
 80032a8:      	mov	r7, sp
 80032aa:      	sub	sp, #0x10
 80032ac:      	str	r0, [sp, #0xc]
;         unsafe { ptr::read_volatile(self.register.get()) & 0b1 == 1 }
 80032ae:      	bl	#-0x18d2
 80032b2:      	str	r0, [sp, #0x8]
 80032b4:      	b	#-0x2 <cortex_m::peripheral::itm::Stim::is_fifo_ready::ha0fba25ce051e29d+0x10>
 80032b6:      	ldr	r0, [sp, #0x8]
 80032b8:      	bl	#-0x1b00
 80032bc:      	str	r0, [sp, #0x4]
 80032be:      	b	#-0x2 <cortex_m::peripheral::itm::Stim::is_fifo_ready::ha0fba25ce051e29d+0x1a>
;     }
 80032c0:      	ldr	r0, [sp, #0x4]
 80032c2:      	and	r0, r0, #0x1
 80032c6:      	add	sp, #0x10
 80032c8:      	pop	{r7, pc}

080032ca <core::slice::raw::from_raw_parts::h6ca0617daaa8d178>:
; pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {
 80032ca:      	push	{r7, lr}
 80032cc:      	mov	r7, sp
 80032ce:      	sub	sp, #0x10
 80032d0:      	str	r0, [sp, #0x8]
 80032d2:      	str	r1, [sp, #0xc]
;     unsafe { &*ptr::slice_from_raw_parts(data, len) }
 80032d4:      	bl	#-0x1ada
 80032d8:      	str	r0, [sp]
 80032da:      	str	r1, [sp, #0x4]
 80032dc:      	b	#-0x2 <core::slice::raw::from_raw_parts::h6ca0617daaa8d178+0x14>
; }
 80032de:      	ldr	r1, [sp, #0x4]
 80032e0:      	ldr	r0, [sp]
 80032e2:      	add	sp, #0x10
 80032e4:      	pop	{r7, pc}

080032e6 <core::slice::raw::from_raw_parts::hf4d4364fca4275a4>:
; pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {
 80032e6:      	push	{r7, lr}
 80032e8:      	mov	r7, sp
 80032ea:      	sub	sp, #0x10
 80032ec:      	str	r0, [sp, #0x8]
 80032ee:      	str	r1, [sp, #0xc]
;     unsafe { &*ptr::slice_from_raw_parts(data, len) }
 80032f0:      	bl	#-0x1acc
 80032f4:      	str	r0, [sp]
 80032f6:      	str	r1, [sp, #0x4]
 80032f8:      	b	#-0x2 <core::slice::raw::from_raw_parts::hf4d4364fca4275a4+0x14>
; }
 80032fa:      	ldr	r1, [sp, #0x4]
 80032fc:      	ldr	r0, [sp]
 80032fe:      	add	sp, #0x10
 8003300:      	pop	{r7, pc}

08003302 <cortex_m::interrupt::disable::h96b611ef67a733c5>:
; pub fn disable() {
 8003302:      	push	{r7, lr}
 8003304:      	mov	r7, sp
;     call_asm!(__cpsid());
 8003306:      	bl	#-0x1890
 800330a:      	b	#-0x2 <cortex_m::interrupt::disable::h96b611ef67a733c5+0xa>
; }
 800330c:      	pop	{r7, pc}

0800330e <__aeabi_memcpy>:
 800330e:      	push	{r4, r5, r6, r7, lr}
 8003310:      	add	r7, sp, #0xc
 8003312:      	str	r8, [sp, #-4]!
 8003316:      	cbz	r2, #0x10
 8003318:      	subs	r3, r2, #0x1
 800331a:      	and	r12, r2, #0x3
 800331e:      	cmp	r3, #0x3
 8003320:      	bhs	#0xc <__aeabi_memcpy+0x22>
 8003322:      	movs	r2, #0x0
 8003324:      	cmp.w	r12, #0x0
 8003328:      	bne	#0x3e <__aeabi_memcpy+0x5c>
 800332a:      	ldr	r8, [sp], #4
 800332e:      	pop	{r4, r5, r6, r7, pc}
 8003330:      	bic	r2, r2, #0x3
 8003334:      	add.w	lr, r0, #0x1
 8003338:      	rsbs	r4, r2, #0
 800333a:      	add.w	r8, r1, #0x1
 800333e:      	mvn	r2, #0x3
 8003342:      	add.w	r5, r8, r2
 8003346:      	add.w	r3, lr, r2
 800334a:      	adds	r2, #0x4
 800334c:      	ldrb	r6, [r5, #0x3]
 800334e:      	strb	r6, [r3, #0x3]
 8003350:      	ldrb	r6, [r5, #0x4]
 8003352:      	strb	r6, [r3, #0x4]
 8003354:      	ldrb	r6, [r5, #0x5]
 8003356:      	strb	r6, [r3, #0x5]
 8003358:      	ldrb	r5, [r5, #0x6]
 800335a:      	strb	r5, [r3, #0x6]
 800335c:      	adds	r3, r4, r2
 800335e:      	adds	r3, #0x4
 8003360:      	bne	#-0x22 <__aeabi_memcpy+0x34>
 8003362:      	adds	r2, #0x4
 8003364:      	cmp.w	r12, #0x0
 8003368:      	beq	#-0x42 <__aeabi_memcpy+0x1c>
 800336a:      	ldrb	r3, [r1, r2]
 800336c:      	cmp.w	r12, #0x1
 8003370:      	strb	r3, [r0, r2]
 8003372:      	beq	#-0x4c <__aeabi_memcpy+0x1c>
 8003374:      	adds	r3, r2, #0x1
 8003376:      	cmp.w	r12, #0x2
 800337a:      	ldrb	r6, [r1, r3]
 800337c:      	strb	r6, [r0, r3]
 800337e:      	beq	#-0x58 <__aeabi_memcpy+0x1c>
 8003380:      	adds	r2, #0x2
 8003382:      	ldrb	r1, [r1, r2]
 8003384:      	strb	r1, [r0, r2]
 8003386:      	ldr	r8, [sp], #4
 800338a:      	pop	{r4, r5, r6, r7, pc}

0800338c <__aeabi_memcpy4>:
 800338c:      	push	{r4, r5, r7, lr}
 800338e:      	add	r7, sp, #0x8
 8003390:      	cmp	r2, #0x4
 8003392:      	blo	#0x62 <__aeabi_memcpy4+0x6c>
 8003394:      	sub.w	r12, r2, #0x4
 8003398:      	movs	r3, #0x1
 800339a:      	add.w	r3, r3, r12, lsr #2
 800339e:      	ands	lr, r3, #0x3
 80033a2:      	beq	#0x2e <__aeabi_memcpy4+0x48>
 80033a4:      	mov	r3, r1
 80033a6:      	mov	r4, r0
 80033a8:      	ldr	r5, [r3], #4
 80033ac:      	cmp.w	lr, #0x1
 80033b0:      	str	r5, [r4], #4
 80033b4:      	bne	#0xc <__aeabi_memcpy4+0x38>
 80033b6:      	mov	r2, r12
 80033b8:      	mov	r0, r4
 80033ba:      	mov	r1, r3
 80033bc:      	cmp.w	r12, #0xc
 80033c0:      	bhs	#0x16 <__aeabi_memcpy4+0x4e>
 80033c2:      	b	#0x32 <__aeabi_memcpy4+0x6c>
 80033c4:      	ldr	r3, [r1, #0x4]
 80033c6:      	cmp.w	lr, #0x2
 80033ca:      	str	r3, [r0, #0x4]
 80033cc:      	bne	#0x30 <__aeabi_memcpy4+0x74>
 80033ce:      	subs	r2, #0x8
 80033d0:      	adds	r1, #0x8
 80033d2:      	adds	r0, #0x8
 80033d4:      	cmp.w	r12, #0xc
 80033d8:      	blo	#0x1c <__aeabi_memcpy4+0x6c>
 80033da:      	ldr	r3, [r1]
 80033dc:      	subs	r2, #0x10
 80033de:      	str	r3, [r0]
 80033e0:      	cmp	r2, #0x3
 80033e2:      	ldr	r3, [r1, #0x4]
 80033e4:      	str	r3, [r0, #0x4]
 80033e6:      	ldr	r3, [r1, #0x8]
 80033e8:      	str	r3, [r0, #0x8]
 80033ea:      	ldr	r3, [r1, #0xc]
 80033ec:      	add.w	r1, r1, #0x10
 80033f0:      	str	r3, [r0, #0xc]
 80033f2:      	add.w	r0, r0, #0x10
 80033f6:      	bhi	#-0x20 <__aeabi_memcpy4+0x4e>
 80033f8:      	pop.w	{r4, r5, r7, lr}
 80033fc:      	b.w	#-0xf2 <__aeabi_memcpy>
 8003400:      	ldr	r3, [r1, #0x8]
 8003402:      	subs	r2, #0xc
 8003404:      	str	r3, [r0, #0x8]
 8003406:      	adds	r1, #0xc
 8003408:      	adds	r0, #0xc
 800340a:      	cmp.w	r12, #0xc
 800340e:      	bhs	#-0x38 <__aeabi_memcpy4+0x4e>
 8003410:      	b	#-0x1c <__aeabi_memcpy4+0x6c>

08003412 <__aeabi_memset>:
 8003412:      	push	{r4, r6, r7, lr}
 8003414:      	add	r7, sp, #0x8
 8003416:      	cbz	r1, #0x3e
 8003418:      	subs	r3, r1, #0x1
 800341a:      	and	r12, r1, #0x3
 800341e:      	cmp	r3, #0x3
 8003420:      	bhs	#0x2 <__aeabi_memset+0x14>
 8003422:      	movs	r1, #0x0
 8003424:      	b	#0x22 <__aeabi_memset+0x38>
 8003426:      	bic	r1, r1, #0x3
 800342a:      	add.w	lr, r0, #0x1
 800342e:      	rsbs	r3, r1, #0
 8003430:      	mvn	r1, #0x3
 8003434:      	add.w	r4, lr, r1
 8003438:      	adds	r1, #0x4
 800343a:      	strb	r2, [r4, #0x6]
 800343c:      	strb	r2, [r4, #0x5]
 800343e:      	strb	r2, [r4, #0x4]
 8003440:      	strb	r2, [r4, #0x3]
 8003442:      	adds	r4, r3, r1
 8003444:      	adds	r4, #0x4
 8003446:      	bne	#-0x16 <__aeabi_memset+0x22>
 8003448:      	adds	r1, #0x4
 800344a:      	cmp.w	r12, #0x0
 800344e:      	itt	ne
 8003450:      	strbne	r2, [r0, r1]
 8003452:      	cmpne.w	r12, #0x1
 8003456:      	bne	#0x0 <__aeabi_memset+0x48>
 8003458:      	pop	{r4, r6, r7, pc}
 800345a:      	add	r0, r1
 800345c:      	cmp.w	r12, #0x2
 8003460:      	strb	r2, [r0, #0x1]
 8003462:      	it	ne
 8003464:      	strbne	r2, [r0, #0x2]
 8003466:      	pop	{r4, r6, r7, pc}

08003468 <__aeabi_memset4>:
 8003468:      	push	{r4, r6, r7, lr}
 800346a:      	add	r7, sp, #0x8
 800346c:      	mov	r3, r2
 800346e:      	uxtb	r2, r2
 8003470:      	cmp	r1, #0x4
 8003472:      	blo	#0x72 <__aeabi_memset4+0x80>
 8003474:      	sub.w	lr, r1, #0x4
 8003478:      	orr.w	r3, r2, r3, lsl #24
 800347c:      	movs	r4, #0x1
 800347e:      	orr.w	r3, r3, r2, lsl #16
 8003482:      	add.w	r4, r4, lr, lsr #2
 8003486:      	orr.w	r3, r3, r2, lsl #8
 800348a:      	ands	r4, r4, #0x3
 800348e:      	beq	#0x14 <__aeabi_memset4+0x3e>
 8003490:      	mov	r12, r0
 8003492:      	cmp	r4, #0x1
 8003494:      	str	r3, [r12], #4
 8003498:      	bne	#0x12 <__aeabi_memset4+0x46>
 800349a:      	mov	r1, lr
 800349c:      	mov	r0, r12
 800349e:      	cmp.w	lr, #0xc
 80034a2:      	bhs	#0x32 <__aeabi_memset4+0x70>
 80034a4:      	b	#0x18 <__aeabi_memset4+0x58>
 80034a6:      	cmp.w	lr, #0xc
 80034aa:      	bhs	#0x2a <__aeabi_memset4+0x70>
 80034ac:      	b	#0x10 <__aeabi_memset4+0x58>
 80034ae:      	cmp	r4, #0x2
 80034b0:      	str	r3, [r0, #0x4]
 80034b2:      	bne	#0x14 <__aeabi_memset4+0x62>
 80034b4:      	adds	r0, #0x8
 80034b6:      	subs	r1, #0x8
 80034b8:      	mov	r12, r0
 80034ba:      	cmp.w	lr, #0xc
 80034be:      	bhs	#0x16 <__aeabi_memset4+0x70>
 80034c0:      	mov	r0, r12
 80034c2:      	pop.w	{r4, r6, r7, lr}
 80034c6:      	b.w	#-0xb8 <__aeabi_memset>
 80034ca:      	str	r3, [r0, #0x8]
 80034cc:      	adds	r0, #0xc
 80034ce:      	subs	r1, #0xc
 80034d0:      	mov	r12, r0
 80034d2:      	cmp.w	lr, #0xc
 80034d6:      	blo	#-0x1a <__aeabi_memset4+0x58>
 80034d8:      	subs	r1, #0x10
 80034da:      	strd	r3, r3, [r0]
 80034de:      	strd	r3, r3, [r0, #8]
 80034e2:      	adds	r0, #0x10
 80034e4:      	cmp	r1, #0x3
 80034e6:      	bhi	#-0x12 <__aeabi_memset4+0x70>
 80034e8:      	mov	r12, r0
 80034ea:      	mov	r0, r12
 80034ec:      	pop.w	{r4, r6, r7, lr}
 80034f0:      	b.w	#-0xe2 <__aeabi_memset>

080034f4 <HardFaultTrampoline>:
 80034f4:      	mov	r0, lr
 80034f6:      	movs	r1, #0x4
 80034f8:      	tst	r0, r1
 80034fa:      	bne	#0x4 <HardFaultTrampoline+0xe>
 80034fc:      	mrs	r0, msp
 8003500:      	b	#0x4 <HardFault_>
 8003502:      	mrs	r0, psp
 8003506:      	b	#-0x2 <HardFault_>

08003508 <HardFault_>:
; pub unsafe extern "C" fn HardFault_(ef: &ExceptionFrame) -> ! {
 8003508:      	push	{r7, lr}
 800350a:      	mov	r7, sp
 800350c:      	sub	sp, #0x8
 800350e:      	str	r0, [sp, #0x4]
 8003510:      	b	#-0x2 <HardFault_+0xa>
 8003512:      	movs	r0, #0x4
;         atomic::compiler_fence(Ordering::SeqCst);
 8003514:      	strb	r0, [r7, #-5]
 8003518:      	ldrb	r0, [r7, #-5]
 800351c:      	bl	#-0x1eb4
 8003520:      	b	#-0x2 <HardFault_+0x1a>
;     loop {
 8003522:      	b	#-0x14 <HardFault_+0xa>
